//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DataLib {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private AssetBasesDataTable tableAssetBases;
        
        private MusicsDataTable tableMusics;
        
        private AssetGroupsDataTable tableAssetGroups;
        
        private AssetsDataTable tableAssets;
        
        private EventvmDataTable tableEventvm;
        
        private FloorbasesDataTable tableFloorbases;
        
        private FloormapsDataTable tableFloormaps;
        
        private HolidaysDataTable tableHolidays;
        
        private InfoTreesDataTable tableInfoTrees;
        
        private SimpleMultisDataTable tableSimpleMultis;
        
        private SimplepaDataTable tableSimplepa;
        
        private UserTreesDataTable tableUserTrees;
        
        private global::System.Data.DataRelation relationFK_AssetBases_AssetGroups_0;
        
        private global::System.Data.DataRelation relationFK_Musics_InfoTrees_1;
        
        private global::System.Data.DataRelation relationFK_InfoTrees_AssetGroups_0;
        
        private global::System.Data.DataRelation relationFK_Musics_SimpleMultis_0;
        
        private global::System.Data.DataRelation relationFK_Holidays_Simplepa_0;
        
        private global::System.Data.DataRelation relationFK_SimpleMultis_AssetGroups_0;
        
        private global::System.Data.DataRelation relationFK_UserTrees_Simplepa_0;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AssetBases"] != null)) {
                    base.Tables.Add(new AssetBasesDataTable(ds.Tables["AssetBases"]));
                }
                if ((ds.Tables["Musics"] != null)) {
                    base.Tables.Add(new MusicsDataTable(ds.Tables["Musics"]));
                }
                if ((ds.Tables["AssetGroups"] != null)) {
                    base.Tables.Add(new AssetGroupsDataTable(ds.Tables["AssetGroups"]));
                }
                if ((ds.Tables["Assets"] != null)) {
                    base.Tables.Add(new AssetsDataTable(ds.Tables["Assets"]));
                }
                if ((ds.Tables["Eventvm"] != null)) {
                    base.Tables.Add(new EventvmDataTable(ds.Tables["Eventvm"]));
                }
                if ((ds.Tables["Floorbases"] != null)) {
                    base.Tables.Add(new FloorbasesDataTable(ds.Tables["Floorbases"]));
                }
                if ((ds.Tables["Floormaps"] != null)) {
                    base.Tables.Add(new FloormapsDataTable(ds.Tables["Floormaps"]));
                }
                if ((ds.Tables["Holidays"] != null)) {
                    base.Tables.Add(new HolidaysDataTable(ds.Tables["Holidays"]));
                }
                if ((ds.Tables["InfoTrees"] != null)) {
                    base.Tables.Add(new InfoTreesDataTable(ds.Tables["InfoTrees"]));
                }
                if ((ds.Tables["SimpleMultis"] != null)) {
                    base.Tables.Add(new SimpleMultisDataTable(ds.Tables["SimpleMultis"]));
                }
                if ((ds.Tables["Simplepa"] != null)) {
                    base.Tables.Add(new SimplepaDataTable(ds.Tables["Simplepa"]));
                }
                if ((ds.Tables["UserTrees"] != null)) {
                    base.Tables.Add(new UserTreesDataTable(ds.Tables["UserTrees"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetBasesDataTable AssetBases {
            get {
                return this.tableAssetBases;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MusicsDataTable Musics {
            get {
                return this.tableMusics;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetGroupsDataTable AssetGroups {
            get {
                return this.tableAssetGroups;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetsDataTable Assets {
            get {
                return this.tableAssets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventvmDataTable Eventvm {
            get {
                return this.tableEventvm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FloorbasesDataTable Floorbases {
            get {
                return this.tableFloorbases;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FloormapsDataTable Floormaps {
            get {
                return this.tableFloormaps;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HolidaysDataTable Holidays {
            get {
                return this.tableHolidays;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InfoTreesDataTable InfoTrees {
            get {
                return this.tableInfoTrees;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SimpleMultisDataTable SimpleMultis {
            get {
                return this.tableSimpleMultis;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SimplepaDataTable Simplepa {
            get {
                return this.tableSimplepa;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserTreesDataTable UserTrees {
            get {
                return this.tableUserTrees;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AssetBases"] != null)) {
                    base.Tables.Add(new AssetBasesDataTable(ds.Tables["AssetBases"]));
                }
                if ((ds.Tables["Musics"] != null)) {
                    base.Tables.Add(new MusicsDataTable(ds.Tables["Musics"]));
                }
                if ((ds.Tables["AssetGroups"] != null)) {
                    base.Tables.Add(new AssetGroupsDataTable(ds.Tables["AssetGroups"]));
                }
                if ((ds.Tables["Assets"] != null)) {
                    base.Tables.Add(new AssetsDataTable(ds.Tables["Assets"]));
                }
                if ((ds.Tables["Eventvm"] != null)) {
                    base.Tables.Add(new EventvmDataTable(ds.Tables["Eventvm"]));
                }
                if ((ds.Tables["Floorbases"] != null)) {
                    base.Tables.Add(new FloorbasesDataTable(ds.Tables["Floorbases"]));
                }
                if ((ds.Tables["Floormaps"] != null)) {
                    base.Tables.Add(new FloormapsDataTable(ds.Tables["Floormaps"]));
                }
                if ((ds.Tables["Holidays"] != null)) {
                    base.Tables.Add(new HolidaysDataTable(ds.Tables["Holidays"]));
                }
                if ((ds.Tables["InfoTrees"] != null)) {
                    base.Tables.Add(new InfoTreesDataTable(ds.Tables["InfoTrees"]));
                }
                if ((ds.Tables["SimpleMultis"] != null)) {
                    base.Tables.Add(new SimpleMultisDataTable(ds.Tables["SimpleMultis"]));
                }
                if ((ds.Tables["Simplepa"] != null)) {
                    base.Tables.Add(new SimplepaDataTable(ds.Tables["Simplepa"]));
                }
                if ((ds.Tables["UserTrees"] != null)) {
                    base.Tables.Add(new UserTreesDataTable(ds.Tables["UserTrees"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableAssetBases = ((AssetBasesDataTable)(base.Tables["AssetBases"]));
            if ((initTable == true)) {
                if ((this.tableAssetBases != null)) {
                    this.tableAssetBases.InitVars();
                }
            }
            this.tableMusics = ((MusicsDataTable)(base.Tables["Musics"]));
            if ((initTable == true)) {
                if ((this.tableMusics != null)) {
                    this.tableMusics.InitVars();
                }
            }
            this.tableAssetGroups = ((AssetGroupsDataTable)(base.Tables["AssetGroups"]));
            if ((initTable == true)) {
                if ((this.tableAssetGroups != null)) {
                    this.tableAssetGroups.InitVars();
                }
            }
            this.tableAssets = ((AssetsDataTable)(base.Tables["Assets"]));
            if ((initTable == true)) {
                if ((this.tableAssets != null)) {
                    this.tableAssets.InitVars();
                }
            }
            this.tableEventvm = ((EventvmDataTable)(base.Tables["Eventvm"]));
            if ((initTable == true)) {
                if ((this.tableEventvm != null)) {
                    this.tableEventvm.InitVars();
                }
            }
            this.tableFloorbases = ((FloorbasesDataTable)(base.Tables["Floorbases"]));
            if ((initTable == true)) {
                if ((this.tableFloorbases != null)) {
                    this.tableFloorbases.InitVars();
                }
            }
            this.tableFloormaps = ((FloormapsDataTable)(base.Tables["Floormaps"]));
            if ((initTable == true)) {
                if ((this.tableFloormaps != null)) {
                    this.tableFloormaps.InitVars();
                }
            }
            this.tableHolidays = ((HolidaysDataTable)(base.Tables["Holidays"]));
            if ((initTable == true)) {
                if ((this.tableHolidays != null)) {
                    this.tableHolidays.InitVars();
                }
            }
            this.tableInfoTrees = ((InfoTreesDataTable)(base.Tables["InfoTrees"]));
            if ((initTable == true)) {
                if ((this.tableInfoTrees != null)) {
                    this.tableInfoTrees.InitVars();
                }
            }
            this.tableSimpleMultis = ((SimpleMultisDataTable)(base.Tables["SimpleMultis"]));
            if ((initTable == true)) {
                if ((this.tableSimpleMultis != null)) {
                    this.tableSimpleMultis.InitVars();
                }
            }
            this.tableSimplepa = ((SimplepaDataTable)(base.Tables["Simplepa"]));
            if ((initTable == true)) {
                if ((this.tableSimplepa != null)) {
                    this.tableSimplepa.InitVars();
                }
            }
            this.tableUserTrees = ((UserTreesDataTable)(base.Tables["UserTrees"]));
            if ((initTable == true)) {
                if ((this.tableUserTrees != null)) {
                    this.tableUserTrees.InitVars();
                }
            }
            this.relationFK_AssetBases_AssetGroups_0 = this.Relations["FK_AssetBases_AssetGroups_0"];
            this.relationFK_Musics_InfoTrees_1 = this.Relations["FK_Musics_InfoTrees_1"];
            this.relationFK_InfoTrees_AssetGroups_0 = this.Relations["FK_InfoTrees_AssetGroups_0"];
            this.relationFK_Musics_SimpleMultis_0 = this.Relations["FK_Musics_SimpleMultis_0"];
            this.relationFK_Holidays_Simplepa_0 = this.Relations["FK_Holidays_Simplepa_0"];
            this.relationFK_SimpleMultis_AssetGroups_0 = this.Relations["FK_SimpleMultis_AssetGroups_0"];
            this.relationFK_UserTrees_Simplepa_0 = this.Relations["FK_UserTrees_Simplepa_0"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAssetBases = new AssetBasesDataTable();
            base.Tables.Add(this.tableAssetBases);
            this.tableMusics = new MusicsDataTable();
            base.Tables.Add(this.tableMusics);
            this.tableAssetGroups = new AssetGroupsDataTable();
            base.Tables.Add(this.tableAssetGroups);
            this.tableAssets = new AssetsDataTable();
            base.Tables.Add(this.tableAssets);
            this.tableEventvm = new EventvmDataTable();
            base.Tables.Add(this.tableEventvm);
            this.tableFloorbases = new FloorbasesDataTable();
            base.Tables.Add(this.tableFloorbases);
            this.tableFloormaps = new FloormapsDataTable();
            base.Tables.Add(this.tableFloormaps);
            this.tableHolidays = new HolidaysDataTable();
            base.Tables.Add(this.tableHolidays);
            this.tableInfoTrees = new InfoTreesDataTable();
            base.Tables.Add(this.tableInfoTrees);
            this.tableSimpleMultis = new SimpleMultisDataTable();
            base.Tables.Add(this.tableSimpleMultis);
            this.tableSimplepa = new SimplepaDataTable();
            base.Tables.Add(this.tableSimplepa);
            this.tableUserTrees = new UserTreesDataTable();
            base.Tables.Add(this.tableUserTrees);
            this.relationFK_AssetBases_AssetGroups_0 = new global::System.Data.DataRelation("FK_AssetBases_AssetGroups_0", new global::System.Data.DataColumn[] {
                        this.tableAssetGroups.AssetGroupIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAssetBases.AssetGroupIdColumn}, false);
            this.Relations.Add(this.relationFK_AssetBases_AssetGroups_0);
            this.relationFK_Musics_InfoTrees_1 = new global::System.Data.DataRelation("FK_Musics_InfoTrees_1", new global::System.Data.DataColumn[] {
                        this.tableInfoTrees.InfoTreeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMusics.InfoTreeIdColumn}, false);
            this.Relations.Add(this.relationFK_Musics_InfoTrees_1);
            this.relationFK_InfoTrees_AssetGroups_0 = new global::System.Data.DataRelation("FK_InfoTrees_AssetGroups_0", new global::System.Data.DataColumn[] {
                        this.tableAssetGroups.AssetGroupIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInfoTrees.gstreeAssetGroupIdColumn}, false);
            this.Relations.Add(this.relationFK_InfoTrees_AssetGroups_0);
            this.relationFK_Musics_SimpleMultis_0 = new global::System.Data.DataRelation("FK_Musics_SimpleMultis_0", new global::System.Data.DataColumn[] {
                        this.tableSimpleMultis.SimpleMultiIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMusics.SimpleMultiIdColumn}, false);
            this.Relations.Add(this.relationFK_Musics_SimpleMultis_0);
            this.relationFK_Holidays_Simplepa_0 = new global::System.Data.DataRelation("FK_Holidays_Simplepa_0", new global::System.Data.DataColumn[] {
                        this.tableSimplepa.SimplePAIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableHolidays.SimplePAIdColumn}, false);
            this.Relations.Add(this.relationFK_Holidays_Simplepa_0);
            this.relationFK_SimpleMultis_AssetGroups_0 = new global::System.Data.DataRelation("FK_SimpleMultis_AssetGroups_0", new global::System.Data.DataColumn[] {
                        this.tableAssetGroups.AssetGroupIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSimpleMultis.gstreeAssetGroupIdColumn}, false);
            this.Relations.Add(this.relationFK_SimpleMultis_AssetGroups_0);
            this.relationFK_UserTrees_Simplepa_0 = new global::System.Data.DataRelation("FK_UserTrees_Simplepa_0", new global::System.Data.DataColumn[] {
                        this.tableSimplepa.SimplePAIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUserTrees.SimplePAIdColumn}, false);
            this.Relations.Add(this.relationFK_UserTrees_Simplepa_0);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeAssetBases() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeMusics() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeAssetGroups() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeAssets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeEventvm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeFloorbases() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeFloormaps() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeHolidays() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeInfoTrees() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeSimpleMultis() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeSimplepa() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeUserTrees() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void AssetBasesRowChangeEventHandler(object sender, AssetBasesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void MusicsRowChangeEventHandler(object sender, MusicsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void AssetGroupsRowChangeEventHandler(object sender, AssetGroupsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void AssetsRowChangeEventHandler(object sender, AssetsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void EventvmRowChangeEventHandler(object sender, EventvmRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void FloorbasesRowChangeEventHandler(object sender, FloorbasesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void FloormapsRowChangeEventHandler(object sender, FloormapsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void HolidaysRowChangeEventHandler(object sender, HolidaysRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void InfoTreesRowChangeEventHandler(object sender, InfoTreesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void SimpleMultisRowChangeEventHandler(object sender, SimpleMultisRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void SimplepaRowChangeEventHandler(object sender, SimplepaRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void UserTreesRowChangeEventHandler(object sender, UserTreesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetBasesDataTable : global::System.Data.TypedTableBase<AssetBasesRow> {
            
            private global::System.Data.DataColumn columnAssetBaseId;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnlogicid;
            
            private global::System.Data.DataColumn columnip;
            
            private global::System.Data.DataColumn columnGroupName;
            
            private global::System.Data.DataColumn columnZoneName;
            
            private global::System.Data.DataColumn columnSpeakerName;
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columnfloor;
            
            private global::System.Data.DataColumn columnDeviceName;
            
            private global::System.Data.DataColumn columnstate;
            
            private global::System.Data.DataColumn columnstate_old;
            
            private global::System.Data.DataColumn columnchk;
            
            private global::System.Data.DataColumn columnseq;
            
            private global::System.Data.DataColumn columnAssetGroupId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesDataTable() {
                this.TableName = "AssetBases";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetBasesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected AssetBasesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetBaseIdColumn {
                get {
                    return this.columnAssetBaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn logicidColumn {
                get {
                    return this.columnlogicid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ipColumn {
                get {
                    return this.columnip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GroupNameColumn {
                get {
                    return this.columnGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ZoneNameColumn {
                get {
                    return this.columnZoneName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpeakerNameColumn {
                get {
                    return this.columnSpeakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn state_oldColumn {
                get {
                    return this.columnstate_old;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chkColumn {
                get {
                    return this.columnchk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn seqColumn {
                get {
                    return this.columnseq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetGroupIdColumn {
                get {
                    return this.columnAssetGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesRow this[int index] {
                get {
                    return ((AssetBasesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetBasesRowChangeEventHandler AssetBasesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetBasesRowChangeEventHandler AssetBasesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetBasesRowChangeEventHandler AssetBasesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetBasesRowChangeEventHandler AssetBasesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddAssetBasesRow(AssetBasesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesRow AddAssetBasesRow(long AssetBaseId, string id, string logicid, string ip, string GroupName, string ZoneName, string SpeakerName, string path, string floor, string DeviceName, string state, string state_old, long chk, long seq, AssetGroupsRow parentAssetGroupsRowByFK_AssetBases_AssetGroups_0) {
                AssetBasesRow rowAssetBasesRow = ((AssetBasesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetBaseId,
                        id,
                        logicid,
                        ip,
                        GroupName,
                        ZoneName,
                        SpeakerName,
                        path,
                        floor,
                        DeviceName,
                        state,
                        state_old,
                        chk,
                        seq,
                        null};
                if ((parentAssetGroupsRowByFK_AssetBases_AssetGroups_0 != null)) {
                    columnValuesArray[14] = parentAssetGroupsRowByFK_AssetBases_AssetGroups_0[0];
                }
                rowAssetBasesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetBasesRow);
                return rowAssetBasesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesRow FindByAssetBaseId(long AssetBaseId) {
                return ((AssetBasesRow)(this.Rows.Find(new object[] {
                            AssetBaseId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AssetBasesDataTable cln = ((AssetBasesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetBasesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnAssetBaseId = base.Columns["AssetBaseId"];
                this.columnid = base.Columns["id"];
                this.columnlogicid = base.Columns["logicid"];
                this.columnip = base.Columns["ip"];
                this.columnGroupName = base.Columns["GroupName"];
                this.columnZoneName = base.Columns["ZoneName"];
                this.columnSpeakerName = base.Columns["SpeakerName"];
                this.columnpath = base.Columns["path"];
                this.columnfloor = base.Columns["floor"];
                this.columnDeviceName = base.Columns["DeviceName"];
                this.columnstate = base.Columns["state"];
                this.columnstate_old = base.Columns["state_old"];
                this.columnchk = base.Columns["chk"];
                this.columnseq = base.Columns["seq"];
                this.columnAssetGroupId = base.Columns["AssetGroupId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnAssetBaseId = new global::System.Data.DataColumn("AssetBaseId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetBaseId);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnlogicid = new global::System.Data.DataColumn("logicid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogicid);
                this.columnip = new global::System.Data.DataColumn("ip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip);
                this.columnGroupName = new global::System.Data.DataColumn("GroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupName);
                this.columnZoneName = new global::System.Data.DataColumn("ZoneName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneName);
                this.columnSpeakerName = new global::System.Data.DataColumn("SpeakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeakerName);
                this.columnpath = new global::System.Data.DataColumn("path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnfloor = new global::System.Data.DataColumn("floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columnDeviceName = new global::System.Data.DataColumn("DeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.columnstate = new global::System.Data.DataColumn("state", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnstate_old = new global::System.Data.DataColumn("state_old", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate_old);
                this.columnchk = new global::System.Data.DataColumn("chk", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchk);
                this.columnseq = new global::System.Data.DataColumn("seq", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseq);
                this.columnAssetGroupId = new global::System.Data.DataColumn("AssetGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetGroupId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetBaseId}, true));
                this.columnAssetBaseId.AllowDBNull = false;
                this.columnAssetBaseId.Unique = true;
                this.columnchk.AllowDBNull = false;
                this.columnseq.AllowDBNull = false;
                this.columnAssetGroupId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesRow NewAssetBasesRow() {
                return ((AssetBasesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetBasesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AssetBasesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetBasesRowChanged != null)) {
                    this.AssetBasesRowChanged(this, new AssetBasesRowChangeEvent(((AssetBasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetBasesRowChanging != null)) {
                    this.AssetBasesRowChanging(this, new AssetBasesRowChangeEvent(((AssetBasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetBasesRowDeleted != null)) {
                    this.AssetBasesRowDeleted(this, new AssetBasesRowChangeEvent(((AssetBasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetBasesRowDeleting != null)) {
                    this.AssetBasesRowDeleting(this, new AssetBasesRowChangeEvent(((AssetBasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveAssetBasesRow(AssetBasesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetBasesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MusicsDataTable : global::System.Data.TypedTableBase<MusicsRow> {
            
            private global::System.Data.DataColumn columnMusicId;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnFileName;
            
            private global::System.Data.DataColumn columnFileContent;
            
            private global::System.Data.DataColumn columnFilePlay;
            
            private global::System.Data.DataColumn columndeletable;
            
            private global::System.Data.DataColumn columnduration;
            
            private global::System.Data.DataColumn columnInfoTreeId;
            
            private global::System.Data.DataColumn columnSimpleMultiId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsDataTable() {
                this.TableName = "Musics";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MusicsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected MusicsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MusicIdColumn {
                get {
                    return this.columnMusicId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FileContentColumn {
                get {
                    return this.columnFileContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FilePlayColumn {
                get {
                    return this.columnFilePlay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn deletableColumn {
                get {
                    return this.columndeletable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn InfoTreeIdColumn {
                get {
                    return this.columnInfoTreeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SimpleMultiIdColumn {
                get {
                    return this.columnSimpleMultiId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow this[int index] {
                get {
                    return ((MusicsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddMusicsRow(MusicsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow AddMusicsRow(long MusicId, string id, string FileName, string FileContent, long FilePlay, string deletable, string duration, InfoTreesRow parentInfoTreesRowByFK_Musics_InfoTrees_1, SimpleMultisRow parentSimpleMultisRowByFK_Musics_SimpleMultis_0) {
                MusicsRow rowMusicsRow = ((MusicsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MusicId,
                        id,
                        FileName,
                        FileContent,
                        FilePlay,
                        deletable,
                        duration,
                        null,
                        null};
                if ((parentInfoTreesRowByFK_Musics_InfoTrees_1 != null)) {
                    columnValuesArray[7] = parentInfoTreesRowByFK_Musics_InfoTrees_1[0];
                }
                if ((parentSimpleMultisRowByFK_Musics_SimpleMultis_0 != null)) {
                    columnValuesArray[8] = parentSimpleMultisRowByFK_Musics_SimpleMultis_0[0];
                }
                rowMusicsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMusicsRow);
                return rowMusicsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow FindByMusicId(long MusicId) {
                return ((MusicsRow)(this.Rows.Find(new object[] {
                            MusicId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                MusicsDataTable cln = ((MusicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MusicsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnMusicId = base.Columns["MusicId"];
                this.columnid = base.Columns["id"];
                this.columnFileName = base.Columns["FileName"];
                this.columnFileContent = base.Columns["FileContent"];
                this.columnFilePlay = base.Columns["FilePlay"];
                this.columndeletable = base.Columns["deletable"];
                this.columnduration = base.Columns["duration"];
                this.columnInfoTreeId = base.Columns["InfoTreeId"];
                this.columnSimpleMultiId = base.Columns["SimpleMultiId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnMusicId = new global::System.Data.DataColumn("MusicId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMusicId);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFileName = new global::System.Data.DataColumn("FileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnFileContent = new global::System.Data.DataColumn("FileContent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileContent);
                this.columnFilePlay = new global::System.Data.DataColumn("FilePlay", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePlay);
                this.columndeletable = new global::System.Data.DataColumn("deletable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeletable);
                this.columnduration = new global::System.Data.DataColumn("duration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnduration);
                this.columnInfoTreeId = new global::System.Data.DataColumn("InfoTreeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfoTreeId);
                this.columnSimpleMultiId = new global::System.Data.DataColumn("SimpleMultiId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimpleMultiId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMusicId}, true));
                this.columnMusicId.AllowDBNull = false;
                this.columnMusicId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow NewMusicsRow() {
                return ((MusicsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MusicsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(MusicsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MusicsRowChanged != null)) {
                    this.MusicsRowChanged(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MusicsRowChanging != null)) {
                    this.MusicsRowChanging(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MusicsRowDeleted != null)) {
                    this.MusicsRowDeleted(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MusicsRowDeleting != null)) {
                    this.MusicsRowDeleting(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveMusicsRow(MusicsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MusicsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetGroupsDataTable : global::System.Data.TypedTableBase<AssetGroupsRow> {
            
            private global::System.Data.DataColumn columnAssetGroupId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsDataTable() {
                this.TableName = "AssetGroups";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetGroupsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected AssetGroupsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetGroupIdColumn {
                get {
                    return this.columnAssetGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow this[int index] {
                get {
                    return ((AssetGroupsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddAssetGroupsRow(AssetGroupsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow AddAssetGroupsRow(long AssetGroupId, string Name) {
                AssetGroupsRow rowAssetGroupsRow = ((AssetGroupsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetGroupId,
                        Name};
                rowAssetGroupsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetGroupsRow);
                return rowAssetGroupsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow FindByAssetGroupId(long AssetGroupId) {
                return ((AssetGroupsRow)(this.Rows.Find(new object[] {
                            AssetGroupId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AssetGroupsDataTable cln = ((AssetGroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetGroupsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnAssetGroupId = base.Columns["AssetGroupId"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnAssetGroupId = new global::System.Data.DataColumn("AssetGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetGroupId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetGroupId}, true));
                this.columnAssetGroupId.AllowDBNull = false;
                this.columnAssetGroupId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow NewAssetGroupsRow() {
                return ((AssetGroupsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetGroupsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AssetGroupsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetGroupsRowChanged != null)) {
                    this.AssetGroupsRowChanged(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetGroupsRowChanging != null)) {
                    this.AssetGroupsRowChanging(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetGroupsRowDeleted != null)) {
                    this.AssetGroupsRowDeleted(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetGroupsRowDeleting != null)) {
                    this.AssetGroupsRowDeleting(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveAssetGroupsRow(AssetGroupsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetGroupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetsDataTable : global::System.Data.TypedTableBase<AssetsRow> {
            
            private global::System.Data.DataColumn columnAssetId;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnlogicid;
            
            private global::System.Data.DataColumn columnip;
            
            private global::System.Data.DataColumn columnGroupName;
            
            private global::System.Data.DataColumn columnZoneName;
            
            private global::System.Data.DataColumn columnSpeakerName;
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columnfloor;
            
            private global::System.Data.DataColumn columnDeviceName;
            
            private global::System.Data.DataColumn columnstate;
            
            private global::System.Data.DataColumn columnstate_old;
            
            private global::System.Data.DataColumn columnchk;
            
            private global::System.Data.DataColumn columnseq;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsDataTable() {
                this.TableName = "Assets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected AssetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetIdColumn {
                get {
                    return this.columnAssetId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn logicidColumn {
                get {
                    return this.columnlogicid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ipColumn {
                get {
                    return this.columnip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GroupNameColumn {
                get {
                    return this.columnGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ZoneNameColumn {
                get {
                    return this.columnZoneName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpeakerNameColumn {
                get {
                    return this.columnSpeakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn state_oldColumn {
                get {
                    return this.columnstate_old;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chkColumn {
                get {
                    return this.columnchk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn seqColumn {
                get {
                    return this.columnseq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow this[int index] {
                get {
                    return ((AssetsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddAssetsRow(AssetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow AddAssetsRow(long AssetId, string id, string logicid, string ip, string GroupName, string ZoneName, string SpeakerName, string path, string floor, string DeviceName, string state, string state_old, long chk, long seq) {
                AssetsRow rowAssetsRow = ((AssetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetId,
                        id,
                        logicid,
                        ip,
                        GroupName,
                        ZoneName,
                        SpeakerName,
                        path,
                        floor,
                        DeviceName,
                        state,
                        state_old,
                        chk,
                        seq};
                rowAssetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetsRow);
                return rowAssetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow FindByAssetId(long AssetId) {
                return ((AssetsRow)(this.Rows.Find(new object[] {
                            AssetId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AssetsDataTable cln = ((AssetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnAssetId = base.Columns["AssetId"];
                this.columnid = base.Columns["id"];
                this.columnlogicid = base.Columns["logicid"];
                this.columnip = base.Columns["ip"];
                this.columnGroupName = base.Columns["GroupName"];
                this.columnZoneName = base.Columns["ZoneName"];
                this.columnSpeakerName = base.Columns["SpeakerName"];
                this.columnpath = base.Columns["path"];
                this.columnfloor = base.Columns["floor"];
                this.columnDeviceName = base.Columns["DeviceName"];
                this.columnstate = base.Columns["state"];
                this.columnstate_old = base.Columns["state_old"];
                this.columnchk = base.Columns["chk"];
                this.columnseq = base.Columns["seq"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnAssetId = new global::System.Data.DataColumn("AssetId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetId);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnlogicid = new global::System.Data.DataColumn("logicid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogicid);
                this.columnip = new global::System.Data.DataColumn("ip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip);
                this.columnGroupName = new global::System.Data.DataColumn("GroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupName);
                this.columnZoneName = new global::System.Data.DataColumn("ZoneName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneName);
                this.columnSpeakerName = new global::System.Data.DataColumn("SpeakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeakerName);
                this.columnpath = new global::System.Data.DataColumn("path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnfloor = new global::System.Data.DataColumn("floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columnDeviceName = new global::System.Data.DataColumn("DeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.columnstate = new global::System.Data.DataColumn("state", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnstate_old = new global::System.Data.DataColumn("state_old", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate_old);
                this.columnchk = new global::System.Data.DataColumn("chk", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchk);
                this.columnseq = new global::System.Data.DataColumn("seq", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseq);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetId}, true));
                this.columnAssetId.AllowDBNull = false;
                this.columnAssetId.Unique = true;
                this.columnchk.AllowDBNull = false;
                this.columnseq.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow NewAssetsRow() {
                return ((AssetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AssetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetsRowChanged != null)) {
                    this.AssetsRowChanged(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetsRowChanging != null)) {
                    this.AssetsRowChanging(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetsRowDeleted != null)) {
                    this.AssetsRowDeleted(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetsRowDeleting != null)) {
                    this.AssetsRowDeleting(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveAssetsRow(AssetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventvmDataTable : global::System.Data.TypedTableBase<EventvmRow> {
            
            private global::System.Data.DataColumn columnEventVMId;
            
            private global::System.Data.DataColumn columnbase_text;
            
            private global::System.Data.DataColumn columnwrite_time;
            
            private global::System.Data.DataColumn columnevent_text;
            
            private global::System.Data.DataColumn columnip;
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columnDeviceName;
            
            private global::System.Data.DataColumn columnstate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmDataTable() {
                this.TableName = "Eventvm";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal EventvmDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected EventvmDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn EventVMIdColumn {
                get {
                    return this.columnEventVMId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn base_textColumn {
                get {
                    return this.columnbase_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn write_timeColumn {
                get {
                    return this.columnwrite_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn event_textColumn {
                get {
                    return this.columnevent_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ipColumn {
                get {
                    return this.columnip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow this[int index] {
                get {
                    return ((EventvmRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddEventvmRow(EventvmRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow AddEventvmRow(long EventVMId, string base_text, System.DateTime write_time, string event_text, string ip, string path, string DeviceName, string state) {
                EventvmRow rowEventvmRow = ((EventvmRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EventVMId,
                        base_text,
                        write_time,
                        event_text,
                        ip,
                        path,
                        DeviceName,
                        state};
                rowEventvmRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventvmRow);
                return rowEventvmRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow FindByEventVMId(long EventVMId) {
                return ((EventvmRow)(this.Rows.Find(new object[] {
                            EventVMId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                EventvmDataTable cln = ((EventvmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventvmDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnEventVMId = base.Columns["EventVMId"];
                this.columnbase_text = base.Columns["base_text"];
                this.columnwrite_time = base.Columns["write_time"];
                this.columnevent_text = base.Columns["event_text"];
                this.columnip = base.Columns["ip"];
                this.columnpath = base.Columns["path"];
                this.columnDeviceName = base.Columns["DeviceName"];
                this.columnstate = base.Columns["state"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnEventVMId = new global::System.Data.DataColumn("EventVMId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventVMId);
                this.columnbase_text = new global::System.Data.DataColumn("base_text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbase_text);
                this.columnwrite_time = new global::System.Data.DataColumn("write_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwrite_time);
                this.columnevent_text = new global::System.Data.DataColumn("event_text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnevent_text);
                this.columnip = new global::System.Data.DataColumn("ip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip);
                this.columnpath = new global::System.Data.DataColumn("path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnDeviceName = new global::System.Data.DataColumn("DeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.columnstate = new global::System.Data.DataColumn("state", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventVMId}, true));
                this.columnEventVMId.AllowDBNull = false;
                this.columnEventVMId.Unique = true;
                this.columnwrite_time.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow NewEventvmRow() {
                return ((EventvmRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventvmRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(EventvmRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventvmRowChanged != null)) {
                    this.EventvmRowChanged(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventvmRowChanging != null)) {
                    this.EventvmRowChanging(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventvmRowDeleted != null)) {
                    this.EventvmRowDeleted(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventvmRowDeleting != null)) {
                    this.EventvmRowDeleting(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveEventvmRow(EventvmRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventvmDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FloorbasesDataTable : global::System.Data.TypedTableBase<FloorbasesRow> {
            
            private global::System.Data.DataColumn columnFloorBaseId;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnlogicid;
            
            private global::System.Data.DataColumn columnbuildingname;
            
            private global::System.Data.DataColumn columnfloororder;
            
            private global::System.Data.DataColumn columnfloor;
            
            private global::System.Data.DataColumn columnfilename;
            
            private global::System.Data.DataColumn columnleft;
            
            private global::System.Data.DataColumn columntop;
            
            private global::System.Data.DataColumn columncontent;
            
            private global::System.Data.DataColumn columnassetname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesDataTable() {
                this.TableName = "Floorbases";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloorbasesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected FloorbasesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FloorBaseIdColumn {
                get {
                    return this.columnFloorBaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn logicidColumn {
                get {
                    return this.columnlogicid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn buildingnameColumn {
                get {
                    return this.columnbuildingname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floororderColumn {
                get {
                    return this.columnfloororder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn leftColumn {
                get {
                    return this.columnleft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn topColumn {
                get {
                    return this.columntop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn assetnameColumn {
                get {
                    return this.columnassetname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow this[int index] {
                get {
                    return ((FloorbasesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddFloorbasesRow(FloorbasesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow AddFloorbasesRow(long FloorBaseId, string Id, string logicid, string buildingname, long floororder, string floor, string filename, double left, double top, string content, string assetname) {
                FloorbasesRow rowFloorbasesRow = ((FloorbasesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FloorBaseId,
                        Id,
                        logicid,
                        buildingname,
                        floororder,
                        floor,
                        filename,
                        left,
                        top,
                        content,
                        assetname};
                rowFloorbasesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFloorbasesRow);
                return rowFloorbasesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow FindByFloorBaseId(long FloorBaseId) {
                return ((FloorbasesRow)(this.Rows.Find(new object[] {
                            FloorBaseId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FloorbasesDataTable cln = ((FloorbasesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FloorbasesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnFloorBaseId = base.Columns["FloorBaseId"];
                this.columnId = base.Columns["Id"];
                this.columnlogicid = base.Columns["logicid"];
                this.columnbuildingname = base.Columns["buildingname"];
                this.columnfloororder = base.Columns["floororder"];
                this.columnfloor = base.Columns["floor"];
                this.columnfilename = base.Columns["filename"];
                this.columnleft = base.Columns["left"];
                this.columntop = base.Columns["top"];
                this.columncontent = base.Columns["content"];
                this.columnassetname = base.Columns["assetname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnFloorBaseId = new global::System.Data.DataColumn("FloorBaseId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloorBaseId);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnlogicid = new global::System.Data.DataColumn("logicid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogicid);
                this.columnbuildingname = new global::System.Data.DataColumn("buildingname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildingname);
                this.columnfloororder = new global::System.Data.DataColumn("floororder", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloororder);
                this.columnfloor = new global::System.Data.DataColumn("floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columnfilename = new global::System.Data.DataColumn("filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilename);
                this.columnleft = new global::System.Data.DataColumn("left", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleft);
                this.columntop = new global::System.Data.DataColumn("top", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntop);
                this.columncontent = new global::System.Data.DataColumn("content", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent);
                this.columnassetname = new global::System.Data.DataColumn("assetname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassetname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFloorBaseId}, true));
                this.columnFloorBaseId.AllowDBNull = false;
                this.columnFloorBaseId.Unique = true;
                this.columnfloororder.AllowDBNull = false;
                this.columnleft.AllowDBNull = false;
                this.columntop.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow NewFloorbasesRow() {
                return ((FloorbasesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FloorbasesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FloorbasesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FloorbasesRowChanged != null)) {
                    this.FloorbasesRowChanged(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FloorbasesRowChanging != null)) {
                    this.FloorbasesRowChanging(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FloorbasesRowDeleted != null)) {
                    this.FloorbasesRowDeleted(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FloorbasesRowDeleting != null)) {
                    this.FloorbasesRowDeleting(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveFloorbasesRow(FloorbasesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FloorbasesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FloormapsDataTable : global::System.Data.TypedTableBase<FloormapsRow> {
            
            private global::System.Data.DataColumn columnFloorMapId;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnlogicid;
            
            private global::System.Data.DataColumn columnbuildingname;
            
            private global::System.Data.DataColumn columnfloororder;
            
            private global::System.Data.DataColumn columnfloor;
            
            private global::System.Data.DataColumn columnfilename;
            
            private global::System.Data.DataColumn columnleft;
            
            private global::System.Data.DataColumn columntop;
            
            private global::System.Data.DataColumn columncontent;
            
            private global::System.Data.DataColumn columnassetname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsDataTable() {
                this.TableName = "Floormaps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloormapsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected FloormapsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FloorMapIdColumn {
                get {
                    return this.columnFloorMapId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn logicidColumn {
                get {
                    return this.columnlogicid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn buildingnameColumn {
                get {
                    return this.columnbuildingname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floororderColumn {
                get {
                    return this.columnfloororder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn leftColumn {
                get {
                    return this.columnleft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn topColumn {
                get {
                    return this.columntop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn assetnameColumn {
                get {
                    return this.columnassetname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow this[int index] {
                get {
                    return ((FloormapsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddFloormapsRow(FloormapsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow AddFloormapsRow(long FloorMapId, string Id, string logicid, string buildingname, long floororder, string floor, string filename, double left, double top, string content, string assetname) {
                FloormapsRow rowFloormapsRow = ((FloormapsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FloorMapId,
                        Id,
                        logicid,
                        buildingname,
                        floororder,
                        floor,
                        filename,
                        left,
                        top,
                        content,
                        assetname};
                rowFloormapsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFloormapsRow);
                return rowFloormapsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow FindByFloorMapId(long FloorMapId) {
                return ((FloormapsRow)(this.Rows.Find(new object[] {
                            FloorMapId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FloormapsDataTable cln = ((FloormapsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FloormapsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnFloorMapId = base.Columns["FloorMapId"];
                this.columnId = base.Columns["Id"];
                this.columnlogicid = base.Columns["logicid"];
                this.columnbuildingname = base.Columns["buildingname"];
                this.columnfloororder = base.Columns["floororder"];
                this.columnfloor = base.Columns["floor"];
                this.columnfilename = base.Columns["filename"];
                this.columnleft = base.Columns["left"];
                this.columntop = base.Columns["top"];
                this.columncontent = base.Columns["content"];
                this.columnassetname = base.Columns["assetname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnFloorMapId = new global::System.Data.DataColumn("FloorMapId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloorMapId);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnlogicid = new global::System.Data.DataColumn("logicid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogicid);
                this.columnbuildingname = new global::System.Data.DataColumn("buildingname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildingname);
                this.columnfloororder = new global::System.Data.DataColumn("floororder", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloororder);
                this.columnfloor = new global::System.Data.DataColumn("floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columnfilename = new global::System.Data.DataColumn("filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilename);
                this.columnleft = new global::System.Data.DataColumn("left", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleft);
                this.columntop = new global::System.Data.DataColumn("top", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntop);
                this.columncontent = new global::System.Data.DataColumn("content", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent);
                this.columnassetname = new global::System.Data.DataColumn("assetname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassetname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFloorMapId}, true));
                this.columnFloorMapId.AllowDBNull = false;
                this.columnFloorMapId.Unique = true;
                this.columnfloororder.AllowDBNull = false;
                this.columnleft.AllowDBNull = false;
                this.columntop.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow NewFloormapsRow() {
                return ((FloormapsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FloormapsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FloormapsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FloormapsRowChanged != null)) {
                    this.FloormapsRowChanged(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FloormapsRowChanging != null)) {
                    this.FloormapsRowChanging(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FloormapsRowDeleted != null)) {
                    this.FloormapsRowDeleted(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FloormapsRowDeleting != null)) {
                    this.FloormapsRowDeleting(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveFloormapsRow(FloormapsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FloormapsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HolidaysDataTable : global::System.Data.TypedTableBase<HolidaysRow> {
            
            private global::System.Data.DataColumn columnHolidayId;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnhDate;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSimplePAId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysDataTable() {
                this.TableName = "Holidays";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal HolidaysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected HolidaysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn HolidayIdColumn {
                get {
                    return this.columnHolidayId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn hDateColumn {
                get {
                    return this.columnhDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SimplePAIdColumn {
                get {
                    return this.columnSimplePAId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow this[int index] {
                get {
                    return ((HolidaysRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddHolidaysRow(HolidaysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow AddHolidaysRow(long HolidayId, string id, System.DateTime hDate, string UserName, string Description, SimplepaRow parentSimplepaRowByFK_Holidays_Simplepa_0) {
                HolidaysRow rowHolidaysRow = ((HolidaysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HolidayId,
                        id,
                        hDate,
                        UserName,
                        Description,
                        null};
                if ((parentSimplepaRowByFK_Holidays_Simplepa_0 != null)) {
                    columnValuesArray[5] = parentSimplepaRowByFK_Holidays_Simplepa_0[0];
                }
                rowHolidaysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHolidaysRow);
                return rowHolidaysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow FindByHolidayId(long HolidayId) {
                return ((HolidaysRow)(this.Rows.Find(new object[] {
                            HolidayId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                HolidaysDataTable cln = ((HolidaysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HolidaysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnHolidayId = base.Columns["HolidayId"];
                this.columnid = base.Columns["id"];
                this.columnhDate = base.Columns["hDate"];
                this.columnUserName = base.Columns["UserName"];
                this.columnDescription = base.Columns["Description"];
                this.columnSimplePAId = base.Columns["SimplePAId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnHolidayId = new global::System.Data.DataColumn("HolidayId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHolidayId);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnhDate = new global::System.Data.DataColumn("hDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhDate);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSimplePAId = new global::System.Data.DataColumn("SimplePAId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimplePAId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHolidayId}, true));
                this.columnHolidayId.AllowDBNull = false;
                this.columnHolidayId.Unique = true;
                this.columnhDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow NewHolidaysRow() {
                return ((HolidaysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HolidaysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(HolidaysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HolidaysRowChanged != null)) {
                    this.HolidaysRowChanged(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HolidaysRowChanging != null)) {
                    this.HolidaysRowChanging(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HolidaysRowDeleted != null)) {
                    this.HolidaysRowDeleted(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HolidaysRowDeleting != null)) {
                    this.HolidaysRowDeleting(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveHolidaysRow(HolidaysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HolidaysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InfoTreesDataTable : global::System.Data.TypedTableBase<InfoTreesRow> {
            
            private global::System.Data.DataColumn columnInfoTreeId;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columngstreeAssetGroupId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesDataTable() {
                this.TableName = "InfoTrees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal InfoTreesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected InfoTreesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn InfoTreeIdColumn {
                get {
                    return this.columnInfoTreeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn gstreeAssetGroupIdColumn {
                get {
                    return this.columngstreeAssetGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow this[int index] {
                get {
                    return ((InfoTreesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddInfoTreesRow(InfoTreesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow AddInfoTreesRow(long InfoTreeId, string Id, string Subject, string Name, AssetGroupsRow parentAssetGroupsRowByFK_InfoTrees_AssetGroups_0) {
                InfoTreesRow rowInfoTreesRow = ((InfoTreesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InfoTreeId,
                        Id,
                        Subject,
                        Name,
                        null};
                if ((parentAssetGroupsRowByFK_InfoTrees_AssetGroups_0 != null)) {
                    columnValuesArray[4] = parentAssetGroupsRowByFK_InfoTrees_AssetGroups_0[0];
                }
                rowInfoTreesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInfoTreesRow);
                return rowInfoTreesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow FindByInfoTreeId(long InfoTreeId) {
                return ((InfoTreesRow)(this.Rows.Find(new object[] {
                            InfoTreeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                InfoTreesDataTable cln = ((InfoTreesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InfoTreesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnInfoTreeId = base.Columns["InfoTreeId"];
                this.columnId = base.Columns["Id"];
                this.columnSubject = base.Columns["Subject"];
                this.columnName = base.Columns["Name"];
                this.columngstreeAssetGroupId = base.Columns["gstreeAssetGroupId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnInfoTreeId = new global::System.Data.DataColumn("InfoTreeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfoTreeId);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columngstreeAssetGroupId = new global::System.Data.DataColumn("gstreeAssetGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngstreeAssetGroupId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInfoTreeId}, true));
                this.columnInfoTreeId.AllowDBNull = false;
                this.columnInfoTreeId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow NewInfoTreesRow() {
                return ((InfoTreesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InfoTreesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(InfoTreesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InfoTreesRowChanged != null)) {
                    this.InfoTreesRowChanged(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InfoTreesRowChanging != null)) {
                    this.InfoTreesRowChanging(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InfoTreesRowDeleted != null)) {
                    this.InfoTreesRowDeleted(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InfoTreesRowDeleting != null)) {
                    this.InfoTreesRowDeleting(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveInfoTreesRow(InfoTreesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InfoTreesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SimpleMultisDataTable : global::System.Data.TypedTableBase<SimpleMultisRow> {
            
            private global::System.Data.DataColumn columnSimpleMultiId;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnidno;
            
            private global::System.Data.DataColumn columnchno;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columngstreeAssetGroupId;
            
            private global::System.Data.DataColumn columnstm;
            
            private global::System.Data.DataColumn columnetm;
            
            private global::System.Data.DataColumn columnduration;
            
            private global::System.Data.DataColumn columnweek;
            
            private global::System.Data.DataColumn columnday1;
            
            private global::System.Data.DataColumn columnday2;
            
            private global::System.Data.DataColumn columnday3;
            
            private global::System.Data.DataColumn columnday4;
            
            private global::System.Data.DataColumn columnday5;
            
            private global::System.Data.DataColumn columnday6;
            
            private global::System.Data.DataColumn columnday7;
            
            private global::System.Data.DataColumn columntss;
            
            private global::System.Data.DataColumn columntse;
            
            private global::System.Data.DataColumn columnColor16;
            
            private global::System.Data.DataColumn columnoverlap;
            
            private global::System.Data.DataColumn columnweekday;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisDataTable() {
                this.TableName = "SimpleMultis";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimpleMultisDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected SimpleMultisDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SimpleMultiIdColumn {
                get {
                    return this.columnSimpleMultiId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idnoColumn {
                get {
                    return this.columnidno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chnoColumn {
                get {
                    return this.columnchno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn gstreeAssetGroupIdColumn {
                get {
                    return this.columngstreeAssetGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stmColumn {
                get {
                    return this.columnstm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn etmColumn {
                get {
                    return this.columnetm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn weekColumn {
                get {
                    return this.columnweek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day1Column {
                get {
                    return this.columnday1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day2Column {
                get {
                    return this.columnday2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day3Column {
                get {
                    return this.columnday3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day4Column {
                get {
                    return this.columnday4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day5Column {
                get {
                    return this.columnday5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day6Column {
                get {
                    return this.columnday6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day7Column {
                get {
                    return this.columnday7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn tssColumn {
                get {
                    return this.columntss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn tseColumn {
                get {
                    return this.columntse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Color16Column {
                get {
                    return this.columnColor16;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn overlapColumn {
                get {
                    return this.columnoverlap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn weekdayColumn {
                get {
                    return this.columnweekday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow this[int index] {
                get {
                    return ((SimpleMultisRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddSimpleMultisRow(SimpleMultisRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow AddSimpleMultisRow(
                        long SimpleMultiId, 
                        string Id, 
                        long idno, 
                        long chno, 
                        string Subject, 
                        string Name, 
                        AssetGroupsRow parentAssetGroupsRowByFK_SimpleMultis_AssetGroups_0, 
                        string stm, 
                        string etm, 
                        string duration, 
                        long week, 
                        long day1, 
                        long day2, 
                        long day3, 
                        long day4, 
                        long day5, 
                        long day6, 
                        long day7, 
                        string tss, 
                        string tse, 
                        string Color16, 
                        long overlap, 
                        long weekday) {
                SimpleMultisRow rowSimpleMultisRow = ((SimpleMultisRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SimpleMultiId,
                        Id,
                        idno,
                        chno,
                        Subject,
                        Name,
                        null,
                        stm,
                        etm,
                        duration,
                        week,
                        day1,
                        day2,
                        day3,
                        day4,
                        day5,
                        day6,
                        day7,
                        tss,
                        tse,
                        Color16,
                        overlap,
                        weekday};
                if ((parentAssetGroupsRowByFK_SimpleMultis_AssetGroups_0 != null)) {
                    columnValuesArray[6] = parentAssetGroupsRowByFK_SimpleMultis_AssetGroups_0[0];
                }
                rowSimpleMultisRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSimpleMultisRow);
                return rowSimpleMultisRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow FindBySimpleMultiId(long SimpleMultiId) {
                return ((SimpleMultisRow)(this.Rows.Find(new object[] {
                            SimpleMultiId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SimpleMultisDataTable cln = ((SimpleMultisDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SimpleMultisDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnSimpleMultiId = base.Columns["SimpleMultiId"];
                this.columnId = base.Columns["Id"];
                this.columnidno = base.Columns["idno"];
                this.columnchno = base.Columns["chno"];
                this.columnSubject = base.Columns["Subject"];
                this.columnName = base.Columns["Name"];
                this.columngstreeAssetGroupId = base.Columns["gstreeAssetGroupId"];
                this.columnstm = base.Columns["stm"];
                this.columnetm = base.Columns["etm"];
                this.columnduration = base.Columns["duration"];
                this.columnweek = base.Columns["week"];
                this.columnday1 = base.Columns["day1"];
                this.columnday2 = base.Columns["day2"];
                this.columnday3 = base.Columns["day3"];
                this.columnday4 = base.Columns["day4"];
                this.columnday5 = base.Columns["day5"];
                this.columnday6 = base.Columns["day6"];
                this.columnday7 = base.Columns["day7"];
                this.columntss = base.Columns["tss"];
                this.columntse = base.Columns["tse"];
                this.columnColor16 = base.Columns["Color16"];
                this.columnoverlap = base.Columns["overlap"];
                this.columnweekday = base.Columns["weekday"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnSimpleMultiId = new global::System.Data.DataColumn("SimpleMultiId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimpleMultiId);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnidno = new global::System.Data.DataColumn("idno", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidno);
                this.columnchno = new global::System.Data.DataColumn("chno", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchno);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columngstreeAssetGroupId = new global::System.Data.DataColumn("gstreeAssetGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngstreeAssetGroupId);
                this.columnstm = new global::System.Data.DataColumn("stm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstm);
                this.columnetm = new global::System.Data.DataColumn("etm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnetm);
                this.columnduration = new global::System.Data.DataColumn("duration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnduration);
                this.columnweek = new global::System.Data.DataColumn("week", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnweek);
                this.columnday1 = new global::System.Data.DataColumn("day1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday1);
                this.columnday2 = new global::System.Data.DataColumn("day2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday2);
                this.columnday3 = new global::System.Data.DataColumn("day3", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday3);
                this.columnday4 = new global::System.Data.DataColumn("day4", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday4);
                this.columnday5 = new global::System.Data.DataColumn("day5", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday5);
                this.columnday6 = new global::System.Data.DataColumn("day6", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday6);
                this.columnday7 = new global::System.Data.DataColumn("day7", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday7);
                this.columntss = new global::System.Data.DataColumn("tss", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntss);
                this.columntse = new global::System.Data.DataColumn("tse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntse);
                this.columnColor16 = new global::System.Data.DataColumn("Color16", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor16);
                this.columnoverlap = new global::System.Data.DataColumn("overlap", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoverlap);
                this.columnweekday = new global::System.Data.DataColumn("weekday", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnweekday);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSimpleMultiId}, true));
                this.columnSimpleMultiId.AllowDBNull = false;
                this.columnSimpleMultiId.Unique = true;
                this.columnidno.AllowDBNull = false;
                this.columnchno.AllowDBNull = false;
                this.columnstm.AllowDBNull = false;
                this.columnetm.AllowDBNull = false;
                this.columnweek.AllowDBNull = false;
                this.columnday1.AllowDBNull = false;
                this.columnday2.AllowDBNull = false;
                this.columnday3.AllowDBNull = false;
                this.columnday4.AllowDBNull = false;
                this.columnday5.AllowDBNull = false;
                this.columnday6.AllowDBNull = false;
                this.columnday7.AllowDBNull = false;
                this.columntss.AllowDBNull = false;
                this.columntse.AllowDBNull = false;
                this.columnoverlap.AllowDBNull = false;
                this.columnweekday.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow NewSimpleMultisRow() {
                return ((SimpleMultisRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SimpleMultisRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SimpleMultisRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SimpleMultisRowChanged != null)) {
                    this.SimpleMultisRowChanged(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SimpleMultisRowChanging != null)) {
                    this.SimpleMultisRowChanging(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SimpleMultisRowDeleted != null)) {
                    this.SimpleMultisRowDeleted(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SimpleMultisRowDeleting != null)) {
                    this.SimpleMultisRowDeleting(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveSimpleMultisRow(SimpleMultisRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SimpleMultisDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SimplepaDataTable : global::System.Data.TypedTableBase<SimplepaRow> {
            
            private global::System.Data.DataColumn columnSimplePAId;
            
            private global::System.Data.DataColumn columnTileWidth;
            
            private global::System.Data.DataColumn columnMapX;
            
            private global::System.Data.DataColumn columnMapY;
            
            private global::System.Data.DataColumn columnZoom;
            
            private global::System.Data.DataColumn columndebug;
            
            private global::System.Data.DataColumn columnSpeakerIconSize;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnEMServerIP;
            
            private global::System.Data.DataColumn columnServerIP;
            
            private global::System.Data.DataColumn columnServerPort;
            
            private global::System.Data.DataColumn columnReserved1;
            
            private global::System.Data.DataColumn columnReserved2;
            
            private global::System.Data.DataColumn columnReserved3;
            
            private global::System.Data.DataColumn columnReserved4;
            
            private global::System.Data.DataColumn columnReserved5;
            
            private global::System.Data.DataColumn columnReserved6;
            
            private global::System.Data.DataColumn columnReserved7;
            
            private global::System.Data.DataColumn columnReserved8;
            
            private global::System.Data.DataColumn columnReserved9;
            
            private global::System.Data.DataColumn columnReserved10;
            
            private global::System.Data.DataColumn columnReserved11;
            
            private global::System.Data.DataColumn columnGPIOPort;
            
            private global::System.Data.DataColumn columnRport;
            
            private global::System.Data.DataColumn columnReserved14;
            
            private global::System.Data.DataColumn columnReserved15;
            
            private global::System.Data.DataColumn columnReserved16;
            
            private global::System.Data.DataColumn columnJigsangbalhwa;
            
            private global::System.Data.DataColumn columnSpeakerTimer;
            
            private global::System.Data.DataColumn columninputvolume;
            
            private global::System.Data.DataColumn columnoutputvolume;
            
            private global::System.Data.DataColumn columndisp;
            
            private global::System.Data.DataColumn columnMulti_Ch;
            
            private global::System.Data.DataColumn columnSoundDeviceNum;
            
            private global::System.Data.DataColumn columnSoundDeviceName;
            
            private global::System.Data.DataColumn columnReserved17;
            
            private global::System.Data.DataColumn columnscalelength;
            
            private global::System.Data.DataColumn columnlength;
            
            private global::System.Data.DataColumn columnscale;
            
            private global::System.Data.DataColumn columnnoise1;
            
            private global::System.Data.DataColumn columnnoise2;
            
            private global::System.Data.DataColumn columndsp_vol;
            
            private global::System.Data.DataColumn columndsp_vol_em;
            
            private global::System.Data.DataColumn columnsms_server;
            
            private global::System.Data.DataColumn columnsms_id;
            
            private global::System.Data.DataColumn columnsms_pw;
            
            private global::System.Data.DataColumn columnsms_rcvno;
            
            private global::System.Data.DataColumn columnPport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaDataTable() {
                this.TableName = "Simplepa";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimplepaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected SimplepaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SimplePAIdColumn {
                get {
                    return this.columnSimplePAId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TileWidthColumn {
                get {
                    return this.columnTileWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MapXColumn {
                get {
                    return this.columnMapX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MapYColumn {
                get {
                    return this.columnMapY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ZoomColumn {
                get {
                    return this.columnZoom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn debugColumn {
                get {
                    return this.columndebug;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpeakerIconSizeColumn {
                get {
                    return this.columnSpeakerIconSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn EMServerIPColumn {
                get {
                    return this.columnEMServerIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ServerIPColumn {
                get {
                    return this.columnServerIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ServerPortColumn {
                get {
                    return this.columnServerPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved1Column {
                get {
                    return this.columnReserved1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved2Column {
                get {
                    return this.columnReserved2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved3Column {
                get {
                    return this.columnReserved3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved4Column {
                get {
                    return this.columnReserved4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved5Column {
                get {
                    return this.columnReserved5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved6Column {
                get {
                    return this.columnReserved6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved7Column {
                get {
                    return this.columnReserved7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved8Column {
                get {
                    return this.columnReserved8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved9Column {
                get {
                    return this.columnReserved9;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved10Column {
                get {
                    return this.columnReserved10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved11Column {
                get {
                    return this.columnReserved11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GPIOPortColumn {
                get {
                    return this.columnGPIOPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn RportColumn {
                get {
                    return this.columnRport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved14Column {
                get {
                    return this.columnReserved14;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved15Column {
                get {
                    return this.columnReserved15;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved16Column {
                get {
                    return this.columnReserved16;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn JigsangbalhwaColumn {
                get {
                    return this.columnJigsangbalhwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpeakerTimerColumn {
                get {
                    return this.columnSpeakerTimer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn inputvolumeColumn {
                get {
                    return this.columninputvolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn outputvolumeColumn {
                get {
                    return this.columnoutputvolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dispColumn {
                get {
                    return this.columndisp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Multi_ChColumn {
                get {
                    return this.columnMulti_Ch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SoundDeviceNumColumn {
                get {
                    return this.columnSoundDeviceNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SoundDeviceNameColumn {
                get {
                    return this.columnSoundDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved17Column {
                get {
                    return this.columnReserved17;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn scalelengthColumn {
                get {
                    return this.columnscalelength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn scaleColumn {
                get {
                    return this.columnscale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn noise1Column {
                get {
                    return this.columnnoise1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn noise2Column {
                get {
                    return this.columnnoise2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_volColumn {
                get {
                    return this.columndsp_vol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_vol_emColumn {
                get {
                    return this.columndsp_vol_em;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_serverColumn {
                get {
                    return this.columnsms_server;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_idColumn {
                get {
                    return this.columnsms_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_pwColumn {
                get {
                    return this.columnsms_pw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_rcvnoColumn {
                get {
                    return this.columnsms_rcvno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PportColumn {
                get {
                    return this.columnPport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow this[int index] {
                get {
                    return ((SimplepaRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddSimplepaRow(SimplepaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow AddSimplepaRow(
                        long SimplePAId, 
                        long TileWidth, 
                        long MapX, 
                        long MapY, 
                        double Zoom, 
                        long debug, 
                        long SpeakerIconSize, 
                        string UserName, 
                        string EMServerIP, 
                        string ServerIP, 
                        string ServerPort, 
                        string Reserved1, 
                        string Reserved2, 
                        string Reserved3, 
                        string Reserved4, 
                        string Reserved5, 
                        string Reserved6, 
                        string Reserved7, 
                        string Reserved8, 
                        string Reserved9, 
                        string Reserved10, 
                        string Reserved11, 
                        string GPIOPort, 
                        string Rport, 
                        string Reserved14, 
                        string Reserved15, 
                        string Reserved16, 
                        long Jigsangbalhwa, 
                        long SpeakerTimer, 
                        double inputvolume, 
                        double outputvolume, 
                        long disp, 
                        long Multi_Ch, 
                        long SoundDeviceNum, 
                        string SoundDeviceName, 
                        long Reserved17, 
                        double scalelength, 
                        double length, 
                        double scale, 
                        long noise1, 
                        long noise2, 
                        long dsp_vol, 
                        long dsp_vol_em, 
                        string sms_server, 
                        string sms_id, 
                        string sms_pw, 
                        string sms_rcvno, 
                        long Pport) {
                SimplepaRow rowSimplepaRow = ((SimplepaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SimplePAId,
                        TileWidth,
                        MapX,
                        MapY,
                        Zoom,
                        debug,
                        SpeakerIconSize,
                        UserName,
                        EMServerIP,
                        ServerIP,
                        ServerPort,
                        Reserved1,
                        Reserved2,
                        Reserved3,
                        Reserved4,
                        Reserved5,
                        Reserved6,
                        Reserved7,
                        Reserved8,
                        Reserved9,
                        Reserved10,
                        Reserved11,
                        GPIOPort,
                        Rport,
                        Reserved14,
                        Reserved15,
                        Reserved16,
                        Jigsangbalhwa,
                        SpeakerTimer,
                        inputvolume,
                        outputvolume,
                        disp,
                        Multi_Ch,
                        SoundDeviceNum,
                        SoundDeviceName,
                        Reserved17,
                        scalelength,
                        length,
                        scale,
                        noise1,
                        noise2,
                        dsp_vol,
                        dsp_vol_em,
                        sms_server,
                        sms_id,
                        sms_pw,
                        sms_rcvno,
                        Pport};
                rowSimplepaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSimplepaRow);
                return rowSimplepaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow FindBySimplePAId(long SimplePAId) {
                return ((SimplepaRow)(this.Rows.Find(new object[] {
                            SimplePAId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SimplepaDataTable cln = ((SimplepaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SimplepaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnSimplePAId = base.Columns["SimplePAId"];
                this.columnTileWidth = base.Columns["TileWidth"];
                this.columnMapX = base.Columns["MapX"];
                this.columnMapY = base.Columns["MapY"];
                this.columnZoom = base.Columns["Zoom"];
                this.columndebug = base.Columns["debug"];
                this.columnSpeakerIconSize = base.Columns["SpeakerIconSize"];
                this.columnUserName = base.Columns["UserName"];
                this.columnEMServerIP = base.Columns["EMServerIP"];
                this.columnServerIP = base.Columns["ServerIP"];
                this.columnServerPort = base.Columns["ServerPort"];
                this.columnReserved1 = base.Columns["Reserved1"];
                this.columnReserved2 = base.Columns["Reserved2"];
                this.columnReserved3 = base.Columns["Reserved3"];
                this.columnReserved4 = base.Columns["Reserved4"];
                this.columnReserved5 = base.Columns["Reserved5"];
                this.columnReserved6 = base.Columns["Reserved6"];
                this.columnReserved7 = base.Columns["Reserved7"];
                this.columnReserved8 = base.Columns["Reserved8"];
                this.columnReserved9 = base.Columns["Reserved9"];
                this.columnReserved10 = base.Columns["Reserved10"];
                this.columnReserved11 = base.Columns["Reserved11"];
                this.columnGPIOPort = base.Columns["GPIOPort"];
                this.columnRport = base.Columns["Rport"];
                this.columnReserved14 = base.Columns["Reserved14"];
                this.columnReserved15 = base.Columns["Reserved15"];
                this.columnReserved16 = base.Columns["Reserved16"];
                this.columnJigsangbalhwa = base.Columns["Jigsangbalhwa"];
                this.columnSpeakerTimer = base.Columns["SpeakerTimer"];
                this.columninputvolume = base.Columns["inputvolume"];
                this.columnoutputvolume = base.Columns["outputvolume"];
                this.columndisp = base.Columns["disp"];
                this.columnMulti_Ch = base.Columns["Multi_Ch"];
                this.columnSoundDeviceNum = base.Columns["SoundDeviceNum"];
                this.columnSoundDeviceName = base.Columns["SoundDeviceName"];
                this.columnReserved17 = base.Columns["Reserved17"];
                this.columnscalelength = base.Columns["scalelength"];
                this.columnlength = base.Columns["length"];
                this.columnscale = base.Columns["scale"];
                this.columnnoise1 = base.Columns["noise1"];
                this.columnnoise2 = base.Columns["noise2"];
                this.columndsp_vol = base.Columns["dsp_vol"];
                this.columndsp_vol_em = base.Columns["dsp_vol_em"];
                this.columnsms_server = base.Columns["sms_server"];
                this.columnsms_id = base.Columns["sms_id"];
                this.columnsms_pw = base.Columns["sms_pw"];
                this.columnsms_rcvno = base.Columns["sms_rcvno"];
                this.columnPport = base.Columns["Pport"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnSimplePAId = new global::System.Data.DataColumn("SimplePAId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimplePAId);
                this.columnTileWidth = new global::System.Data.DataColumn("TileWidth", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTileWidth);
                this.columnMapX = new global::System.Data.DataColumn("MapX", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapX);
                this.columnMapY = new global::System.Data.DataColumn("MapY", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapY);
                this.columnZoom = new global::System.Data.DataColumn("Zoom", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoom);
                this.columndebug = new global::System.Data.DataColumn("debug", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndebug);
                this.columnSpeakerIconSize = new global::System.Data.DataColumn("SpeakerIconSize", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeakerIconSize);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnEMServerIP = new global::System.Data.DataColumn("EMServerIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMServerIP);
                this.columnServerIP = new global::System.Data.DataColumn("ServerIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerIP);
                this.columnServerPort = new global::System.Data.DataColumn("ServerPort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerPort);
                this.columnReserved1 = new global::System.Data.DataColumn("Reserved1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved1);
                this.columnReserved2 = new global::System.Data.DataColumn("Reserved2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved2);
                this.columnReserved3 = new global::System.Data.DataColumn("Reserved3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved3);
                this.columnReserved4 = new global::System.Data.DataColumn("Reserved4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved4);
                this.columnReserved5 = new global::System.Data.DataColumn("Reserved5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved5);
                this.columnReserved6 = new global::System.Data.DataColumn("Reserved6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved6);
                this.columnReserved7 = new global::System.Data.DataColumn("Reserved7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved7);
                this.columnReserved8 = new global::System.Data.DataColumn("Reserved8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved8);
                this.columnReserved9 = new global::System.Data.DataColumn("Reserved9", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved9);
                this.columnReserved10 = new global::System.Data.DataColumn("Reserved10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved10);
                this.columnReserved11 = new global::System.Data.DataColumn("Reserved11", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved11);
                this.columnGPIOPort = new global::System.Data.DataColumn("GPIOPort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPIOPort);
                this.columnRport = new global::System.Data.DataColumn("Rport", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRport);
                this.columnReserved14 = new global::System.Data.DataColumn("Reserved14", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved14);
                this.columnReserved15 = new global::System.Data.DataColumn("Reserved15", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved15);
                this.columnReserved16 = new global::System.Data.DataColumn("Reserved16", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved16);
                this.columnJigsangbalhwa = new global::System.Data.DataColumn("Jigsangbalhwa", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJigsangbalhwa);
                this.columnSpeakerTimer = new global::System.Data.DataColumn("SpeakerTimer", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeakerTimer);
                this.columninputvolume = new global::System.Data.DataColumn("inputvolume", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputvolume);
                this.columnoutputvolume = new global::System.Data.DataColumn("outputvolume", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoutputvolume);
                this.columndisp = new global::System.Data.DataColumn("disp", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisp);
                this.columnMulti_Ch = new global::System.Data.DataColumn("Multi_Ch", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulti_Ch);
                this.columnSoundDeviceNum = new global::System.Data.DataColumn("SoundDeviceNum", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoundDeviceNum);
                this.columnSoundDeviceName = new global::System.Data.DataColumn("SoundDeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoundDeviceName);
                this.columnReserved17 = new global::System.Data.DataColumn("Reserved17", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved17);
                this.columnscalelength = new global::System.Data.DataColumn("scalelength", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscalelength);
                this.columnlength = new global::System.Data.DataColumn("length", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlength);
                this.columnscale = new global::System.Data.DataColumn("scale", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscale);
                this.columnnoise1 = new global::System.Data.DataColumn("noise1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnoise1);
                this.columnnoise2 = new global::System.Data.DataColumn("noise2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnoise2);
                this.columndsp_vol = new global::System.Data.DataColumn("dsp_vol", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_vol);
                this.columndsp_vol_em = new global::System.Data.DataColumn("dsp_vol_em", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_vol_em);
                this.columnsms_server = new global::System.Data.DataColumn("sms_server", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_server);
                this.columnsms_id = new global::System.Data.DataColumn("sms_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_id);
                this.columnsms_pw = new global::System.Data.DataColumn("sms_pw", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_pw);
                this.columnsms_rcvno = new global::System.Data.DataColumn("sms_rcvno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_rcvno);
                this.columnPport = new global::System.Data.DataColumn("Pport", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPport);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSimplePAId}, true));
                this.columnSimplePAId.AllowDBNull = false;
                this.columnSimplePAId.Unique = true;
                this.columnTileWidth.AllowDBNull = false;
                this.columnMapX.AllowDBNull = false;
                this.columnMapY.AllowDBNull = false;
                this.columnZoom.AllowDBNull = false;
                this.columndebug.AllowDBNull = false;
                this.columnSpeakerIconSize.AllowDBNull = false;
                this.columnJigsangbalhwa.AllowDBNull = false;
                this.columnSpeakerTimer.AllowDBNull = false;
                this.columninputvolume.AllowDBNull = false;
                this.columnoutputvolume.AllowDBNull = false;
                this.columndisp.AllowDBNull = false;
                this.columnMulti_Ch.AllowDBNull = false;
                this.columnSoundDeviceNum.AllowDBNull = false;
                this.columnReserved17.AllowDBNull = false;
                this.columnscalelength.AllowDBNull = false;
                this.columnlength.AllowDBNull = false;
                this.columnscale.AllowDBNull = false;
                this.columnnoise1.AllowDBNull = false;
                this.columnnoise2.AllowDBNull = false;
                this.columndsp_vol.AllowDBNull = false;
                this.columndsp_vol_em.AllowDBNull = false;
                this.columnPport.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow NewSimplepaRow() {
                return ((SimplepaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SimplepaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SimplepaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SimplepaRowChanged != null)) {
                    this.SimplepaRowChanged(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SimplepaRowChanging != null)) {
                    this.SimplepaRowChanging(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SimplepaRowDeleted != null)) {
                    this.SimplepaRowDeleted(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SimplepaRowDeleting != null)) {
                    this.SimplepaRowDeleting(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveSimplepaRow(SimplepaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SimplepaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserTreesDataTable : global::System.Data.TypedTableBase<UserTreesRow> {
            
            private global::System.Data.DataColumn columnUserTreeId;
            
            private global::System.Data.DataColumn columnuser_group;
            
            private global::System.Data.DataColumn columnuser_name;
            
            private global::System.Data.DataColumn columnlogin_id;
            
            private global::System.Data.DataColumn columnlogin_password;
            
            private global::System.Data.DataColumn columnlogin_password2;
            
            private global::System.Data.DataColumn columnmobile;
            
            private global::System.Data.DataColumn columnSimplePAId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesDataTable() {
                this.TableName = "UserTrees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UserTreesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected UserTreesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn UserTreeIdColumn {
                get {
                    return this.columnUserTreeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn user_groupColumn {
                get {
                    return this.columnuser_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn login_idColumn {
                get {
                    return this.columnlogin_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn login_passwordColumn {
                get {
                    return this.columnlogin_password;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn login_password2Column {
                get {
                    return this.columnlogin_password2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn mobileColumn {
                get {
                    return this.columnmobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SimplePAIdColumn {
                get {
                    return this.columnSimplePAId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow this[int index] {
                get {
                    return ((UserTreesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddUserTreesRow(UserTreesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow AddUserTreesRow(long UserTreeId, string user_group, string user_name, string login_id, string login_password, string login_password2, string mobile, SimplepaRow parentSimplepaRowByFK_UserTrees_Simplepa_0) {
                UserTreesRow rowUserTreesRow = ((UserTreesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserTreeId,
                        user_group,
                        user_name,
                        login_id,
                        login_password,
                        login_password2,
                        mobile,
                        null};
                if ((parentSimplepaRowByFK_UserTrees_Simplepa_0 != null)) {
                    columnValuesArray[7] = parentSimplepaRowByFK_UserTrees_Simplepa_0[0];
                }
                rowUserTreesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserTreesRow);
                return rowUserTreesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow FindByUserTreeId(long UserTreeId) {
                return ((UserTreesRow)(this.Rows.Find(new object[] {
                            UserTreeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                UserTreesDataTable cln = ((UserTreesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserTreesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnUserTreeId = base.Columns["UserTreeId"];
                this.columnuser_group = base.Columns["user_group"];
                this.columnuser_name = base.Columns["user_name"];
                this.columnlogin_id = base.Columns["login_id"];
                this.columnlogin_password = base.Columns["login_password"];
                this.columnlogin_password2 = base.Columns["login_password2"];
                this.columnmobile = base.Columns["mobile"];
                this.columnSimplePAId = base.Columns["SimplePAId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnUserTreeId = new global::System.Data.DataColumn("UserTreeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserTreeId);
                this.columnuser_group = new global::System.Data.DataColumn("user_group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_group);
                this.columnuser_name = new global::System.Data.DataColumn("user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_name);
                this.columnlogin_id = new global::System.Data.DataColumn("login_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_id);
                this.columnlogin_password = new global::System.Data.DataColumn("login_password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_password);
                this.columnlogin_password2 = new global::System.Data.DataColumn("login_password2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_password2);
                this.columnmobile = new global::System.Data.DataColumn("mobile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmobile);
                this.columnSimplePAId = new global::System.Data.DataColumn("SimplePAId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimplePAId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserTreeId}, true));
                this.columnUserTreeId.AllowDBNull = false;
                this.columnUserTreeId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow NewUserTreesRow() {
                return ((UserTreesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserTreesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(UserTreesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserTreesRowChanged != null)) {
                    this.UserTreesRowChanged(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserTreesRowChanging != null)) {
                    this.UserTreesRowChanging(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserTreesRowDeleted != null)) {
                    this.UserTreesRowDeleted(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserTreesRowDeleting != null)) {
                    this.UserTreesRowDeleting(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveUserTreesRow(UserTreesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserTreesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AssetBasesRow : global::System.Data.DataRow {
            
            private AssetBasesDataTable tableAssetBases;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetBasesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssetBases = ((AssetBasesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetBaseId {
                get {
                    return ((long)(this[this.tableAssetBases.AssetBaseIdColumn]));
                }
                set {
                    this[this.tableAssetBases.AssetBaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string logicid {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.logicidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'logicid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.logicidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ip {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.ipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'ip\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.ipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GroupName {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.GroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'GroupName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.GroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ZoneName {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.ZoneNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'ZoneName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.ZoneNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SpeakerName {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.SpeakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'SpeakerName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.SpeakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'path\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DeviceName {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.DeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'DeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.DeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state_old {
                get {
                    try {
                        return ((string)(this[this.tableAssetBases.state_oldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetBases\' 테이블의 \'state_old\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetBases.state_oldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chk {
                get {
                    return ((long)(this[this.tableAssetBases.chkColumn]));
                }
                set {
                    this[this.tableAssetBases.chkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long seq {
                get {
                    return ((long)(this[this.tableAssetBases.seqColumn]));
                }
                set {
                    this[this.tableAssetBases.seqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetGroupId {
                get {
                    return ((long)(this[this.tableAssetBases.AssetGroupIdColumn]));
                }
                set {
                    this[this.tableAssetBases.AssetGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow AssetGroupsRow {
                get {
                    return ((AssetGroupsRow)(this.GetParentRow(this.Table.ParentRelations["FK_AssetBases_AssetGroups_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AssetBases_AssetGroups_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsidNull() {
                return this.IsNull(this.tableAssetBases.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetidNull() {
                this[this.tableAssetBases.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IslogicidNull() {
                return this.IsNull(this.tableAssetBases.logicidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetlogicidNull() {
                this[this.tableAssetBases.logicidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsipNull() {
                return this.IsNull(this.tableAssetBases.ipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetipNull() {
                this[this.tableAssetBases.ipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGroupNameNull() {
                return this.IsNull(this.tableAssetBases.GroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGroupNameNull() {
                this[this.tableAssetBases.GroupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsZoneNameNull() {
                return this.IsNull(this.tableAssetBases.ZoneNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetZoneNameNull() {
                this[this.tableAssetBases.ZoneNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSpeakerNameNull() {
                return this.IsNull(this.tableAssetBases.SpeakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSpeakerNameNull() {
                this[this.tableAssetBases.SpeakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspathNull() {
                return this.IsNull(this.tableAssetBases.pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpathNull() {
                this[this.tableAssetBases.pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloorNull() {
                return this.IsNull(this.tableAssetBases.floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloorNull() {
                this[this.tableAssetBases.floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDeviceNameNull() {
                return this.IsNull(this.tableAssetBases.DeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDeviceNameNull() {
                this[this.tableAssetBases.DeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsstateNull() {
                return this.IsNull(this.tableAssetBases.stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetstateNull() {
                this[this.tableAssetBases.stateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isstate_oldNull() {
                return this.IsNull(this.tableAssetBases.state_oldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setstate_oldNull() {
                this[this.tableAssetBases.state_oldColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class MusicsRow : global::System.Data.DataRow {
            
            private MusicsDataTable tableMusics;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MusicsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMusics = ((MusicsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long MusicId {
                get {
                    return ((long)(this[this.tableMusics.MusicIdColumn]));
                }
                set {
                    this[this.tableMusics.MusicIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableMusics.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableMusics.FileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'FileName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.FileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string FileContent {
                get {
                    try {
                        return ((string)(this[this.tableMusics.FileContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'FileContent\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.FileContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long FilePlay {
                get {
                    try {
                        return ((long)(this[this.tableMusics.FilePlayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'FilePlay\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.FilePlayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string deletable {
                get {
                    try {
                        return ((string)(this[this.tableMusics.deletableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'deletable\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.deletableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string duration {
                get {
                    try {
                        return ((string)(this[this.tableMusics.durationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'duration\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.durationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long InfoTreeId {
                get {
                    try {
                        return ((long)(this[this.tableMusics.InfoTreeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'InfoTreeId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.InfoTreeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SimpleMultiId {
                get {
                    try {
                        return ((long)(this[this.tableMusics.SimpleMultiIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'SimpleMultiId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.SimpleMultiIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow InfoTreesRow {
                get {
                    return ((InfoTreesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Musics_InfoTrees_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Musics_InfoTrees_1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow SimpleMultisRow {
                get {
                    return ((SimpleMultisRow)(this.GetParentRow(this.Table.ParentRelations["FK_Musics_SimpleMultis_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Musics_SimpleMultis_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsidNull() {
                return this.IsNull(this.tableMusics.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetidNull() {
                this[this.tableMusics.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableMusics.FileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetFileNameNull() {
                this[this.tableMusics.FileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsFileContentNull() {
                return this.IsNull(this.tableMusics.FileContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetFileContentNull() {
                this[this.tableMusics.FileContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsFilePlayNull() {
                return this.IsNull(this.tableMusics.FilePlayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetFilePlayNull() {
                this[this.tableMusics.FilePlayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdeletableNull() {
                return this.IsNull(this.tableMusics.deletableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdeletableNull() {
                this[this.tableMusics.deletableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdurationNull() {
                return this.IsNull(this.tableMusics.durationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdurationNull() {
                this[this.tableMusics.durationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsInfoTreeIdNull() {
                return this.IsNull(this.tableMusics.InfoTreeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetInfoTreeIdNull() {
                this[this.tableMusics.InfoTreeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSimpleMultiIdNull() {
                return this.IsNull(this.tableMusics.SimpleMultiIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSimpleMultiIdNull() {
                this[this.tableMusics.SimpleMultiIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AssetGroupsRow : global::System.Data.DataRow {
            
            private AssetGroupsDataTable tableAssetGroups;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetGroupsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssetGroups = ((AssetGroupsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetGroupId {
                get {
                    return ((long)(this[this.tableAssetGroups.AssetGroupIdColumn]));
                }
                set {
                    this[this.tableAssetGroups.AssetGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAssetGroups.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetGroups\' 테이블의 \'Name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetGroups.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableAssetGroups.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetNameNull() {
                this[this.tableAssetGroups.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesRow[] GetAssetBasesRows() {
                if ((this.Table.ChildRelations["FK_AssetBases_AssetGroups_0"] == null)) {
                    return new AssetBasesRow[0];
                }
                else {
                    return ((AssetBasesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AssetBases_AssetGroups_0"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow[] GetInfoTreesRows() {
                if ((this.Table.ChildRelations["FK_InfoTrees_AssetGroups_0"] == null)) {
                    return new InfoTreesRow[0];
                }
                else {
                    return ((InfoTreesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InfoTrees_AssetGroups_0"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow[] GetSimpleMultisRows() {
                if ((this.Table.ChildRelations["FK_SimpleMultis_AssetGroups_0"] == null)) {
                    return new SimpleMultisRow[0];
                }
                else {
                    return ((SimpleMultisRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SimpleMultis_AssetGroups_0"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AssetsRow : global::System.Data.DataRow {
            
            private AssetsDataTable tableAssets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssets = ((AssetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetId {
                get {
                    return ((long)(this[this.tableAssets.AssetIdColumn]));
                }
                set {
                    this[this.tableAssets.AssetIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableAssets.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string logicid {
                get {
                    try {
                        return ((string)(this[this.tableAssets.logicidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'logicid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.logicidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ip {
                get {
                    try {
                        return ((string)(this[this.tableAssets.ipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'ip\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.ipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GroupName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.GroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'GroupName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.GroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ZoneName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.ZoneNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'ZoneName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.ZoneNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SpeakerName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.SpeakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'SpeakerName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.SpeakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableAssets.pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'path\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableAssets.floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DeviceName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.DeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'DeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.DeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableAssets.stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state_old {
                get {
                    try {
                        return ((string)(this[this.tableAssets.state_oldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'state_old\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.state_oldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chk {
                get {
                    return ((long)(this[this.tableAssets.chkColumn]));
                }
                set {
                    this[this.tableAssets.chkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long seq {
                get {
                    return ((long)(this[this.tableAssets.seqColumn]));
                }
                set {
                    this[this.tableAssets.seqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsidNull() {
                return this.IsNull(this.tableAssets.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetidNull() {
                this[this.tableAssets.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IslogicidNull() {
                return this.IsNull(this.tableAssets.logicidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetlogicidNull() {
                this[this.tableAssets.logicidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsipNull() {
                return this.IsNull(this.tableAssets.ipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetipNull() {
                this[this.tableAssets.ipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGroupNameNull() {
                return this.IsNull(this.tableAssets.GroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGroupNameNull() {
                this[this.tableAssets.GroupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsZoneNameNull() {
                return this.IsNull(this.tableAssets.ZoneNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetZoneNameNull() {
                this[this.tableAssets.ZoneNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSpeakerNameNull() {
                return this.IsNull(this.tableAssets.SpeakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSpeakerNameNull() {
                this[this.tableAssets.SpeakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspathNull() {
                return this.IsNull(this.tableAssets.pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpathNull() {
                this[this.tableAssets.pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloorNull() {
                return this.IsNull(this.tableAssets.floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloorNull() {
                this[this.tableAssets.floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDeviceNameNull() {
                return this.IsNull(this.tableAssets.DeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDeviceNameNull() {
                this[this.tableAssets.DeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsstateNull() {
                return this.IsNull(this.tableAssets.stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetstateNull() {
                this[this.tableAssets.stateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isstate_oldNull() {
                return this.IsNull(this.tableAssets.state_oldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setstate_oldNull() {
                this[this.tableAssets.state_oldColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EventvmRow : global::System.Data.DataRow {
            
            private EventvmDataTable tableEventvm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal EventvmRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventvm = ((EventvmDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long EventVMId {
                get {
                    return ((long)(this[this.tableEventvm.EventVMIdColumn]));
                }
                set {
                    this[this.tableEventvm.EventVMIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string base_text {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.base_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'base_text\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.base_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime write_time {
                get {
                    return ((global::System.DateTime)(this[this.tableEventvm.write_timeColumn]));
                }
                set {
                    this[this.tableEventvm.write_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string event_text {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.event_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'event_text\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.event_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ip {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.ipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'ip\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.ipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'path\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DeviceName {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.DeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'DeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.DeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isbase_textNull() {
                return this.IsNull(this.tableEventvm.base_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setbase_textNull() {
                this[this.tableEventvm.base_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isevent_textNull() {
                return this.IsNull(this.tableEventvm.event_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setevent_textNull() {
                this[this.tableEventvm.event_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsipNull() {
                return this.IsNull(this.tableEventvm.ipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetipNull() {
                this[this.tableEventvm.ipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspathNull() {
                return this.IsNull(this.tableEventvm.pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpathNull() {
                this[this.tableEventvm.pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDeviceNameNull() {
                return this.IsNull(this.tableEventvm.DeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDeviceNameNull() {
                this[this.tableEventvm.DeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsstateNull() {
                return this.IsNull(this.tableEventvm.stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetstateNull() {
                this[this.tableEventvm.stateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FloorbasesRow : global::System.Data.DataRow {
            
            private FloorbasesDataTable tableFloorbases;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloorbasesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFloorbases = ((FloorbasesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long FloorBaseId {
                get {
                    return ((long)(this[this.tableFloorbases.FloorBaseIdColumn]));
                }
                set {
                    this[this.tableFloorbases.FloorBaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'Id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string logicid {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.logicidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'logicid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.logicidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string buildingname {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.buildingnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'buildingname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.buildingnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long floororder {
                get {
                    return ((long)(this[this.tableFloorbases.floororderColumn]));
                }
                set {
                    this[this.tableFloorbases.floororderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string filename {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.filenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'filename\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.filenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double left {
                get {
                    return ((double)(this[this.tableFloorbases.leftColumn]));
                }
                set {
                    this[this.tableFloorbases.leftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double top {
                get {
                    return ((double)(this[this.tableFloorbases.topColumn]));
                }
                set {
                    this[this.tableFloorbases.topColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.contentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'content\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.contentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string assetname {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.assetnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'assetname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.assetnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableFloorbases.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIdNull() {
                this[this.tableFloorbases.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IslogicidNull() {
                return this.IsNull(this.tableFloorbases.logicidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetlogicidNull() {
                this[this.tableFloorbases.logicidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbuildingnameNull() {
                return this.IsNull(this.tableFloorbases.buildingnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbuildingnameNull() {
                this[this.tableFloorbases.buildingnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloorNull() {
                return this.IsNull(this.tableFloorbases.floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloorNull() {
                this[this.tableFloorbases.floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfilenameNull() {
                return this.IsNull(this.tableFloorbases.filenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfilenameNull() {
                this[this.tableFloorbases.filenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IscontentNull() {
                return this.IsNull(this.tableFloorbases.contentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetcontentNull() {
                this[this.tableFloorbases.contentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsassetnameNull() {
                return this.IsNull(this.tableFloorbases.assetnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetassetnameNull() {
                this[this.tableFloorbases.assetnameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FloormapsRow : global::System.Data.DataRow {
            
            private FloormapsDataTable tableFloormaps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloormapsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFloormaps = ((FloormapsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long FloorMapId {
                get {
                    return ((long)(this[this.tableFloormaps.FloorMapIdColumn]));
                }
                set {
                    this[this.tableFloormaps.FloorMapIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'Id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string logicid {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.logicidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'logicid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.logicidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string buildingname {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.buildingnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'buildingname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.buildingnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long floororder {
                get {
                    return ((long)(this[this.tableFloormaps.floororderColumn]));
                }
                set {
                    this[this.tableFloormaps.floororderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string filename {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.filenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'filename\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.filenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double left {
                get {
                    return ((double)(this[this.tableFloormaps.leftColumn]));
                }
                set {
                    this[this.tableFloormaps.leftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double top {
                get {
                    return ((double)(this[this.tableFloormaps.topColumn]));
                }
                set {
                    this[this.tableFloormaps.topColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.contentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'content\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.contentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string assetname {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.assetnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'assetname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.assetnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableFloormaps.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIdNull() {
                this[this.tableFloormaps.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IslogicidNull() {
                return this.IsNull(this.tableFloormaps.logicidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetlogicidNull() {
                this[this.tableFloormaps.logicidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbuildingnameNull() {
                return this.IsNull(this.tableFloormaps.buildingnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbuildingnameNull() {
                this[this.tableFloormaps.buildingnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloorNull() {
                return this.IsNull(this.tableFloormaps.floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloorNull() {
                this[this.tableFloormaps.floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfilenameNull() {
                return this.IsNull(this.tableFloormaps.filenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfilenameNull() {
                this[this.tableFloormaps.filenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IscontentNull() {
                return this.IsNull(this.tableFloormaps.contentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetcontentNull() {
                this[this.tableFloormaps.contentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsassetnameNull() {
                return this.IsNull(this.tableFloormaps.assetnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetassetnameNull() {
                this[this.tableFloormaps.assetnameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class HolidaysRow : global::System.Data.DataRow {
            
            private HolidaysDataTable tableHolidays;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal HolidaysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHolidays = ((HolidaysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long HolidayId {
                get {
                    return ((long)(this[this.tableHolidays.HolidayIdColumn]));
                }
                set {
                    this[this.tableHolidays.HolidayIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableHolidays.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Holidays\' 테이블의 \'id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHolidays.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime hDate {
                get {
                    return ((global::System.DateTime)(this[this.tableHolidays.hDateColumn]));
                }
                set {
                    this[this.tableHolidays.hDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableHolidays.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Holidays\' 테이블의 \'UserName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHolidays.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableHolidays.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Holidays\' 테이블의 \'Description\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHolidays.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SimplePAId {
                get {
                    try {
                        return ((long)(this[this.tableHolidays.SimplePAIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Holidays\' 테이블의 \'SimplePAId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHolidays.SimplePAIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow SimplepaRow {
                get {
                    return ((SimplepaRow)(this.GetParentRow(this.Table.ParentRelations["FK_Holidays_Simplepa_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Holidays_Simplepa_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsidNull() {
                return this.IsNull(this.tableHolidays.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetidNull() {
                this[this.tableHolidays.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableHolidays.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUserNameNull() {
                this[this.tableHolidays.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableHolidays.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tableHolidays.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSimplePAIdNull() {
                return this.IsNull(this.tableHolidays.SimplePAIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSimplePAIdNull() {
                this[this.tableHolidays.SimplePAIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class InfoTreesRow : global::System.Data.DataRow {
            
            private InfoTreesDataTable tableInfoTrees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal InfoTreesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInfoTrees = ((InfoTreesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long InfoTreeId {
                get {
                    return ((long)(this[this.tableInfoTrees.InfoTreeIdColumn]));
                }
                set {
                    this[this.tableInfoTrees.InfoTreeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableInfoTrees.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'Id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableInfoTrees.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'Subject\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableInfoTrees.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'Name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long gstreeAssetGroupId {
                get {
                    try {
                        return ((long)(this[this.tableInfoTrees.gstreeAssetGroupIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'gstreeAssetGroupId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.gstreeAssetGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow AssetGroupsRow {
                get {
                    return ((AssetGroupsRow)(this.GetParentRow(this.Table.ParentRelations["FK_InfoTrees_AssetGroups_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InfoTrees_AssetGroups_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableInfoTrees.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIdNull() {
                this[this.tableInfoTrees.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableInfoTrees.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSubjectNull() {
                this[this.tableInfoTrees.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableInfoTrees.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetNameNull() {
                this[this.tableInfoTrees.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsgstreeAssetGroupIdNull() {
                return this.IsNull(this.tableInfoTrees.gstreeAssetGroupIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetgstreeAssetGroupIdNull() {
                this[this.tableInfoTrees.gstreeAssetGroupIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow[] GetMusicsRows() {
                if ((this.Table.ChildRelations["FK_Musics_InfoTrees_1"] == null)) {
                    return new MusicsRow[0];
                }
                else {
                    return ((MusicsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Musics_InfoTrees_1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SimpleMultisRow : global::System.Data.DataRow {
            
            private SimpleMultisDataTable tableSimpleMultis;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimpleMultisRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSimpleMultis = ((SimpleMultisDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SimpleMultiId {
                get {
                    return ((long)(this[this.tableSimpleMultis.SimpleMultiIdColumn]));
                }
                set {
                    this[this.tableSimpleMultis.SimpleMultiIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long idno {
                get {
                    return ((long)(this[this.tableSimpleMultis.idnoColumn]));
                }
                set {
                    this[this.tableSimpleMultis.idnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chno {
                get {
                    return ((long)(this[this.tableSimpleMultis.chnoColumn]));
                }
                set {
                    this[this.tableSimpleMultis.chnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Subject\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long gstreeAssetGroupId {
                get {
                    try {
                        return ((long)(this[this.tableSimpleMultis.gstreeAssetGroupIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'gstreeAssetGroupId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.gstreeAssetGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string stm {
                get {
                    return ((string)(this[this.tableSimpleMultis.stmColumn]));
                }
                set {
                    this[this.tableSimpleMultis.stmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string etm {
                get {
                    return ((string)(this[this.tableSimpleMultis.etmColumn]));
                }
                set {
                    this[this.tableSimpleMultis.etmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string duration {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.durationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'duration\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.durationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long week {
                get {
                    return ((long)(this[this.tableSimpleMultis.weekColumn]));
                }
                set {
                    this[this.tableSimpleMultis.weekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day1 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day1Column]));
                }
                set {
                    this[this.tableSimpleMultis.day1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day2 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day2Column]));
                }
                set {
                    this[this.tableSimpleMultis.day2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day3 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day3Column]));
                }
                set {
                    this[this.tableSimpleMultis.day3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day4 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day4Column]));
                }
                set {
                    this[this.tableSimpleMultis.day4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day5 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day5Column]));
                }
                set {
                    this[this.tableSimpleMultis.day5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day6 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day6Column]));
                }
                set {
                    this[this.tableSimpleMultis.day6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day7 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day7Column]));
                }
                set {
                    this[this.tableSimpleMultis.day7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string tss {
                get {
                    return ((string)(this[this.tableSimpleMultis.tssColumn]));
                }
                set {
                    this[this.tableSimpleMultis.tssColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string tse {
                get {
                    return ((string)(this[this.tableSimpleMultis.tseColumn]));
                }
                set {
                    this[this.tableSimpleMultis.tseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Color16 {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.Color16Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Color16\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.Color16Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long overlap {
                get {
                    return ((long)(this[this.tableSimpleMultis.overlapColumn]));
                }
                set {
                    this[this.tableSimpleMultis.overlapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long weekday {
                get {
                    return ((long)(this[this.tableSimpleMultis.weekdayColumn]));
                }
                set {
                    this[this.tableSimpleMultis.weekdayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow AssetGroupsRow {
                get {
                    return ((AssetGroupsRow)(this.GetParentRow(this.Table.ParentRelations["FK_SimpleMultis_AssetGroups_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SimpleMultis_AssetGroups_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableSimpleMultis.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIdNull() {
                this[this.tableSimpleMultis.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableSimpleMultis.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSubjectNull() {
                this[this.tableSimpleMultis.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableSimpleMultis.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetNameNull() {
                this[this.tableSimpleMultis.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsgstreeAssetGroupIdNull() {
                return this.IsNull(this.tableSimpleMultis.gstreeAssetGroupIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetgstreeAssetGroupIdNull() {
                this[this.tableSimpleMultis.gstreeAssetGroupIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdurationNull() {
                return this.IsNull(this.tableSimpleMultis.durationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdurationNull() {
                this[this.tableSimpleMultis.durationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsColor16Null() {
                return this.IsNull(this.tableSimpleMultis.Color16Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetColor16Null() {
                this[this.tableSimpleMultis.Color16Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow[] GetMusicsRows() {
                if ((this.Table.ChildRelations["FK_Musics_SimpleMultis_0"] == null)) {
                    return new MusicsRow[0];
                }
                else {
                    return ((MusicsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Musics_SimpleMultis_0"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SimplepaRow : global::System.Data.DataRow {
            
            private SimplepaDataTable tableSimplepa;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimplepaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSimplepa = ((SimplepaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SimplePAId {
                get {
                    return ((long)(this[this.tableSimplepa.SimplePAIdColumn]));
                }
                set {
                    this[this.tableSimplepa.SimplePAIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long TileWidth {
                get {
                    return ((long)(this[this.tableSimplepa.TileWidthColumn]));
                }
                set {
                    this[this.tableSimplepa.TileWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long MapX {
                get {
                    return ((long)(this[this.tableSimplepa.MapXColumn]));
                }
                set {
                    this[this.tableSimplepa.MapXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long MapY {
                get {
                    return ((long)(this[this.tableSimplepa.MapYColumn]));
                }
                set {
                    this[this.tableSimplepa.MapYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double Zoom {
                get {
                    return ((double)(this[this.tableSimplepa.ZoomColumn]));
                }
                set {
                    this[this.tableSimplepa.ZoomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long debug {
                get {
                    return ((long)(this[this.tableSimplepa.debugColumn]));
                }
                set {
                    this[this.tableSimplepa.debugColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SpeakerIconSize {
                get {
                    return ((long)(this[this.tableSimplepa.SpeakerIconSizeColumn]));
                }
                set {
                    this[this.tableSimplepa.SpeakerIconSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'UserName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string EMServerIP {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.EMServerIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'EMServerIP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.EMServerIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ServerIP {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.ServerIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'ServerIP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.ServerIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ServerPort {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.ServerPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'ServerPort\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.ServerPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved1 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved2 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved3 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved4 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved4\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved5 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved5\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved6 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved6\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved7 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved7\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved8 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved8\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved9 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved9Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved9\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved9Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved10 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved10\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved11 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved11\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GPIOPort {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.GPIOPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'GPIOPort\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.GPIOPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Rport {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.RportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Rport\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.RportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved14 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved14Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved14\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved14Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved15 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved15Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved15\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved15Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved16 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved16Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved16\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved16Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Jigsangbalhwa {
                get {
                    return ((long)(this[this.tableSimplepa.JigsangbalhwaColumn]));
                }
                set {
                    this[this.tableSimplepa.JigsangbalhwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SpeakerTimer {
                get {
                    return ((long)(this[this.tableSimplepa.SpeakerTimerColumn]));
                }
                set {
                    this[this.tableSimplepa.SpeakerTimerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double inputvolume {
                get {
                    return ((double)(this[this.tableSimplepa.inputvolumeColumn]));
                }
                set {
                    this[this.tableSimplepa.inputvolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double outputvolume {
                get {
                    return ((double)(this[this.tableSimplepa.outputvolumeColumn]));
                }
                set {
                    this[this.tableSimplepa.outputvolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long disp {
                get {
                    return ((long)(this[this.tableSimplepa.dispColumn]));
                }
                set {
                    this[this.tableSimplepa.dispColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Multi_Ch {
                get {
                    return ((long)(this[this.tableSimplepa.Multi_ChColumn]));
                }
                set {
                    this[this.tableSimplepa.Multi_ChColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SoundDeviceNum {
                get {
                    return ((long)(this[this.tableSimplepa.SoundDeviceNumColumn]));
                }
                set {
                    this[this.tableSimplepa.SoundDeviceNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SoundDeviceName {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.SoundDeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'SoundDeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.SoundDeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Reserved17 {
                get {
                    return ((long)(this[this.tableSimplepa.Reserved17Column]));
                }
                set {
                    this[this.tableSimplepa.Reserved17Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double scalelength {
                get {
                    return ((double)(this[this.tableSimplepa.scalelengthColumn]));
                }
                set {
                    this[this.tableSimplepa.scalelengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double length {
                get {
                    return ((double)(this[this.tableSimplepa.lengthColumn]));
                }
                set {
                    this[this.tableSimplepa.lengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double scale {
                get {
                    return ((double)(this[this.tableSimplepa.scaleColumn]));
                }
                set {
                    this[this.tableSimplepa.scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long noise1 {
                get {
                    return ((long)(this[this.tableSimplepa.noise1Column]));
                }
                set {
                    this[this.tableSimplepa.noise1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long noise2 {
                get {
                    return ((long)(this[this.tableSimplepa.noise2Column]));
                }
                set {
                    this[this.tableSimplepa.noise2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long dsp_vol {
                get {
                    return ((long)(this[this.tableSimplepa.dsp_volColumn]));
                }
                set {
                    this[this.tableSimplepa.dsp_volColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long dsp_vol_em {
                get {
                    return ((long)(this[this.tableSimplepa.dsp_vol_emColumn]));
                }
                set {
                    this[this.tableSimplepa.dsp_vol_emColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_server {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_serverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_server\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_serverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_id {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_pw {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_pwColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_pw\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_pwColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_rcvno {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_rcvnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_rcvno\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_rcvnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Pport {
                get {
                    return ((long)(this[this.tableSimplepa.PportColumn]));
                }
                set {
                    this[this.tableSimplepa.PportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableSimplepa.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUserNameNull() {
                this[this.tableSimplepa.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsEMServerIPNull() {
                return this.IsNull(this.tableSimplepa.EMServerIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetEMServerIPNull() {
                this[this.tableSimplepa.EMServerIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsServerIPNull() {
                return this.IsNull(this.tableSimplepa.ServerIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetServerIPNull() {
                this[this.tableSimplepa.ServerIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsServerPortNull() {
                return this.IsNull(this.tableSimplepa.ServerPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetServerPortNull() {
                this[this.tableSimplepa.ServerPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved1Null() {
                return this.IsNull(this.tableSimplepa.Reserved1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved1Null() {
                this[this.tableSimplepa.Reserved1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved2Null() {
                return this.IsNull(this.tableSimplepa.Reserved2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved2Null() {
                this[this.tableSimplepa.Reserved2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved3Null() {
                return this.IsNull(this.tableSimplepa.Reserved3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved3Null() {
                this[this.tableSimplepa.Reserved3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved4Null() {
                return this.IsNull(this.tableSimplepa.Reserved4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved4Null() {
                this[this.tableSimplepa.Reserved4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved5Null() {
                return this.IsNull(this.tableSimplepa.Reserved5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved5Null() {
                this[this.tableSimplepa.Reserved5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved6Null() {
                return this.IsNull(this.tableSimplepa.Reserved6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved6Null() {
                this[this.tableSimplepa.Reserved6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved7Null() {
                return this.IsNull(this.tableSimplepa.Reserved7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved7Null() {
                this[this.tableSimplepa.Reserved7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved8Null() {
                return this.IsNull(this.tableSimplepa.Reserved8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved8Null() {
                this[this.tableSimplepa.Reserved8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved9Null() {
                return this.IsNull(this.tableSimplepa.Reserved9Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved9Null() {
                this[this.tableSimplepa.Reserved9Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved10Null() {
                return this.IsNull(this.tableSimplepa.Reserved10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved10Null() {
                this[this.tableSimplepa.Reserved10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved11Null() {
                return this.IsNull(this.tableSimplepa.Reserved11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved11Null() {
                this[this.tableSimplepa.Reserved11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGPIOPortNull() {
                return this.IsNull(this.tableSimplepa.GPIOPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGPIOPortNull() {
                this[this.tableSimplepa.GPIOPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRportNull() {
                return this.IsNull(this.tableSimplepa.RportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRportNull() {
                this[this.tableSimplepa.RportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved14Null() {
                return this.IsNull(this.tableSimplepa.Reserved14Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved14Null() {
                this[this.tableSimplepa.Reserved14Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved15Null() {
                return this.IsNull(this.tableSimplepa.Reserved15Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved15Null() {
                this[this.tableSimplepa.Reserved15Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved16Null() {
                return this.IsNull(this.tableSimplepa.Reserved16Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved16Null() {
                this[this.tableSimplepa.Reserved16Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSoundDeviceNameNull() {
                return this.IsNull(this.tableSimplepa.SoundDeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSoundDeviceNameNull() {
                this[this.tableSimplepa.SoundDeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_serverNull() {
                return this.IsNull(this.tableSimplepa.sms_serverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_serverNull() {
                this[this.tableSimplepa.sms_serverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_idNull() {
                return this.IsNull(this.tableSimplepa.sms_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_idNull() {
                this[this.tableSimplepa.sms_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_pwNull() {
                return this.IsNull(this.tableSimplepa.sms_pwColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_pwNull() {
                this[this.tableSimplepa.sms_pwColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_rcvnoNull() {
                return this.IsNull(this.tableSimplepa.sms_rcvnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_rcvnoNull() {
                this[this.tableSimplepa.sms_rcvnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow[] GetHolidaysRows() {
                if ((this.Table.ChildRelations["FK_Holidays_Simplepa_0"] == null)) {
                    return new HolidaysRow[0];
                }
                else {
                    return ((HolidaysRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Holidays_Simplepa_0"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow[] GetUserTreesRows() {
                if ((this.Table.ChildRelations["FK_UserTrees_Simplepa_0"] == null)) {
                    return new UserTreesRow[0];
                }
                else {
                    return ((UserTreesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_UserTrees_Simplepa_0"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UserTreesRow : global::System.Data.DataRow {
            
            private UserTreesDataTable tableUserTrees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UserTreesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserTrees = ((UserTreesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long UserTreeId {
                get {
                    return ((long)(this[this.tableUserTrees.UserTreeIdColumn]));
                }
                set {
                    this[this.tableUserTrees.UserTreeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string user_group {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.user_groupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'user_group\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.user_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string user_name {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.user_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'user_name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string login_id {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.login_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'login_id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.login_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string login_password {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.login_passwordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'login_password\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.login_passwordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string login_password2 {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.login_password2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'login_password2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.login_password2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string mobile {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.mobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'mobile\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.mobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SimplePAId {
                get {
                    try {
                        return ((long)(this[this.tableUserTrees.SimplePAIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'SimplePAId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.SimplePAIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow SimplepaRow {
                get {
                    return ((SimplepaRow)(this.GetParentRow(this.Table.ParentRelations["FK_UserTrees_Simplepa_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_UserTrees_Simplepa_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuser_groupNull() {
                return this.IsNull(this.tableUserTrees.user_groupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuser_groupNull() {
                this[this.tableUserTrees.user_groupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuser_nameNull() {
                return this.IsNull(this.tableUserTrees.user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuser_nameNull() {
                this[this.tableUserTrees.user_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islogin_idNull() {
                return this.IsNull(this.tableUserTrees.login_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlogin_idNull() {
                this[this.tableUserTrees.login_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islogin_passwordNull() {
                return this.IsNull(this.tableUserTrees.login_passwordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlogin_passwordNull() {
                this[this.tableUserTrees.login_passwordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islogin_password2Null() {
                return this.IsNull(this.tableUserTrees.login_password2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlogin_password2Null() {
                this[this.tableUserTrees.login_password2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsmobileNull() {
                return this.IsNull(this.tableUserTrees.mobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetmobileNull() {
                this[this.tableUserTrees.mobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSimplePAIdNull() {
                return this.IsNull(this.tableUserTrees.SimplePAIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSimplePAIdNull() {
                this[this.tableUserTrees.SimplePAIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class AssetBasesRowChangeEvent : global::System.EventArgs {
            
            private AssetBasesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesRowChangeEvent(AssetBasesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetBasesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class MusicsRowChangeEvent : global::System.EventArgs {
            
            private MusicsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRowChangeEvent(MusicsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class AssetGroupsRowChangeEvent : global::System.EventArgs {
            
            private AssetGroupsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRowChangeEvent(AssetGroupsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class AssetsRowChangeEvent : global::System.EventArgs {
            
            private AssetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRowChangeEvent(AssetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class EventvmRowChangeEvent : global::System.EventArgs {
            
            private EventvmRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRowChangeEvent(EventvmRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class FloorbasesRowChangeEvent : global::System.EventArgs {
            
            private FloorbasesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRowChangeEvent(FloorbasesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class FloormapsRowChangeEvent : global::System.EventArgs {
            
            private FloormapsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRowChangeEvent(FloormapsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class HolidaysRowChangeEvent : global::System.EventArgs {
            
            private HolidaysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRowChangeEvent(HolidaysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class InfoTreesRowChangeEvent : global::System.EventArgs {
            
            private InfoTreesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRowChangeEvent(InfoTreesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class SimpleMultisRowChangeEvent : global::System.EventArgs {
            
            private SimpleMultisRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRowChangeEvent(SimpleMultisRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class SimplepaRowChangeEvent : global::System.EventArgs {
            
            private SimplepaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRowChangeEvent(SimplepaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class UserTreesRowChangeEvent : global::System.EventArgs {
            
            private UserTreesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRowChangeEvent(UserTreesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DataLib.DataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AssetBasesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public AssetBasesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AssetBases";
            tableMapping.ColumnMappings.Add("AssetBaseId", "AssetBaseId");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("logicid", "logicid");
            tableMapping.ColumnMappings.Add("ip", "ip");
            tableMapping.ColumnMappings.Add("GroupName", "GroupName");
            tableMapping.ColumnMappings.Add("ZoneName", "ZoneName");
            tableMapping.ColumnMappings.Add("SpeakerName", "SpeakerName");
            tableMapping.ColumnMappings.Add("path", "path");
            tableMapping.ColumnMappings.Add("floor", "floor");
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName");
            tableMapping.ColumnMappings.Add("state", "state");
            tableMapping.ColumnMappings.Add("state_old", "state_old");
            tableMapping.ColumnMappings.Add("chk", "chk");
            tableMapping.ColumnMappings.Add("seq", "seq");
            tableMapping.ColumnMappings.Add("AssetGroupId", "AssetGroupId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""AssetBases"" WHERE ((""AssetBaseId"" = :Original_AssetBaseId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_ip = 1 AND ""ip"" IS NULL) OR (""ip"" = :Original_ip)) AND ((:IsNull_GroupName = 1 AND ""GroupName"" IS NULL) OR (""GroupName"" = :Original_GroupName)) AND ((:IsNull_ZoneName = 1 AND ""ZoneName"" IS NULL) OR (""ZoneName"" = :Original_ZoneName)) AND ((:IsNull_SpeakerName = 1 AND ""SpeakerName"" IS NULL) OR (""SpeakerName"" = :Original_SpeakerName)) AND ((:IsNull_path = 1 AND ""path"" IS NULL) OR (""path"" = :Original_path)) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_DeviceName = 1 AND ""DeviceName"" IS NULL) OR (""DeviceName"" = :Original_DeviceName)) AND ((:IsNull_state = 1 AND ""state"" IS NULL) OR (""state"" = :Original_state)) AND ((:IsNull_state_old = 1 AND ""state_old"" IS NULL) OR (""state_old"" = :Original_state_old)) AND (""chk"" = :Original_chk) AND (""seq"" = :Original_seq) AND (""AssetGroupId"" = :Original_AssetGroupId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetBaseId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ip";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_GroupName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ZoneName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SpeakerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_DeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state_old";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""AssetBases"" (""AssetBaseId"", ""id"", ""logicid"", ""ip"", ""GroupName"", ""ZoneName"", ""SpeakerName"", ""path"", ""floor"", ""DeviceName"", ""state"", ""state_old"", ""chk"", ""seq"", ""AssetGroupId"") VALUES (:AssetBaseId, :id, :logicid, :ip, :GroupName, :ZoneName, :SpeakerName, :path, :floor, :DeviceName, :state, :state_old, :chk, :seq, :AssetGroupId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetBaseId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""AssetBases"" SET ""AssetBaseId"" = :AssetBaseId, ""id"" = :id, ""logicid"" = :logicid, ""ip"" = :ip, ""GroupName"" = :GroupName, ""ZoneName"" = :ZoneName, ""SpeakerName"" = :SpeakerName, ""path"" = :path, ""floor"" = :floor, ""DeviceName"" = :DeviceName, ""state"" = :state, ""state_old"" = :state_old, ""chk"" = :chk, ""seq"" = :seq, ""AssetGroupId"" = :AssetGroupId WHERE ((""AssetBaseId"" = :Original_AssetBaseId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_ip = 1 AND ""ip"" IS NULL) OR (""ip"" = :Original_ip)) AND ((:IsNull_GroupName = 1 AND ""GroupName"" IS NULL) OR (""GroupName"" = :Original_GroupName)) AND ((:IsNull_ZoneName = 1 AND ""ZoneName"" IS NULL) OR (""ZoneName"" = :Original_ZoneName)) AND ((:IsNull_SpeakerName = 1 AND ""SpeakerName"" IS NULL) OR (""SpeakerName"" = :Original_SpeakerName)) AND ((:IsNull_path = 1 AND ""path"" IS NULL) OR (""path"" = :Original_path)) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_DeviceName = 1 AND ""DeviceName"" IS NULL) OR (""DeviceName"" = :Original_DeviceName)) AND ((:IsNull_state = 1 AND ""state"" IS NULL) OR (""state"" = :Original_state)) AND ((:IsNull_state_old = 1 AND ""state_old"" IS NULL) OR (""state_old"" = :Original_state_old)) AND (""chk"" = :Original_chk) AND (""seq"" = :Original_seq) AND (""AssetGroupId"" = :Original_AssetGroupId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetBaseId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetBaseId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ip";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_GroupName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ZoneName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SpeakerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_DeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state_old";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AssetBaseId, id, logicid, ip, GroupName, ZoneName, SpeakerName, path, floo" +
                "r, DeviceName, state, state_old, chk, seq, AssetGroupId FROM \"main\".AssetBases";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AssetBasesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AssetBasesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AssetBasesDataTable dataTable = new DataSet1.AssetBasesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AssetBasesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "AssetBases");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_AssetBaseId, string Original_id, string Original_logicid, string Original_ip, string Original_GroupName, string Original_ZoneName, string Original_SpeakerName, string Original_path, string Original_floor, string Original_DeviceName, string Original_state, string Original_state_old, long Original_chk, long Original_seq, long Original_AssetGroupId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_AssetBaseId));
            if ((Original_id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_logicid));
            }
            if ((Original_ip == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ip));
            }
            if ((Original_GroupName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_GroupName));
            }
            if ((Original_ZoneName == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ZoneName));
            }
            if ((Original_SpeakerName == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_SpeakerName));
            }
            if ((Original_path == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_path));
            }
            if ((Original_floor == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_floor));
            }
            if ((Original_DeviceName == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_DeviceName));
            }
            if ((Original_state == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_state));
            }
            if ((Original_state_old == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_state_old));
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((long)(Original_chk));
            this.Adapter.DeleteCommand.Parameters[24].Value = ((long)(Original_seq));
            this.Adapter.DeleteCommand.Parameters[25].Value = ((long)(Original_AssetGroupId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long AssetBaseId, string id, string logicid, string ip, string GroupName, string ZoneName, string SpeakerName, string path, string floor, string DeviceName, string state, string state_old, long chk, long seq, long AssetGroupId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(AssetBaseId));
            if ((id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(id));
            }
            if ((logicid == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((ip == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ip));
            }
            if ((GroupName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(GroupName));
            }
            if ((ZoneName == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ZoneName));
            }
            if ((SpeakerName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SpeakerName));
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(path));
            }
            if ((floor == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(floor));
            }
            if ((DeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(state));
            }
            if ((state_old == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(state_old));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(chk));
            this.Adapter.InsertCommand.Parameters[13].Value = ((long)(seq));
            this.Adapter.InsertCommand.Parameters[14].Value = ((long)(AssetGroupId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long AssetBaseId, 
                    string id, 
                    string logicid, 
                    string ip, 
                    string GroupName, 
                    string ZoneName, 
                    string SpeakerName, 
                    string path, 
                    string floor, 
                    string DeviceName, 
                    string state, 
                    string state_old, 
                    long chk, 
                    long seq, 
                    long AssetGroupId, 
                    long Original_AssetBaseId, 
                    string Original_id, 
                    string Original_logicid, 
                    string Original_ip, 
                    string Original_GroupName, 
                    string Original_ZoneName, 
                    string Original_SpeakerName, 
                    string Original_path, 
                    string Original_floor, 
                    string Original_DeviceName, 
                    string Original_state, 
                    string Original_state_old, 
                    long Original_chk, 
                    long Original_seq, 
                    long Original_AssetGroupId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(AssetBaseId));
            if ((id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(id));
            }
            if ((logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((ip == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ip));
            }
            if ((GroupName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(GroupName));
            }
            if ((ZoneName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ZoneName));
            }
            if ((SpeakerName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SpeakerName));
            }
            if ((path == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(path));
            }
            if ((floor == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(floor));
            }
            if ((DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(state));
            }
            if ((state_old == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(state_old));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(chk));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(seq));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(AssetGroupId));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_AssetBaseId));
            if ((Original_id == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_logicid));
            }
            if ((Original_ip == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_ip));
            }
            if ((Original_GroupName == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_GroupName));
            }
            if ((Original_ZoneName == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_ZoneName));
            }
            if ((Original_SpeakerName == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_SpeakerName));
            }
            if ((Original_path == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_path));
            }
            if ((Original_floor == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_floor));
            }
            if ((Original_DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_DeviceName));
            }
            if ((Original_state == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_state));
            }
            if ((Original_state_old == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_state_old));
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(Original_chk));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(Original_seq));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(Original_AssetGroupId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string id, 
                    string logicid, 
                    string ip, 
                    string GroupName, 
                    string ZoneName, 
                    string SpeakerName, 
                    string path, 
                    string floor, 
                    string DeviceName, 
                    string state, 
                    string state_old, 
                    long chk, 
                    long seq, 
                    long AssetGroupId, 
                    long Original_AssetBaseId, 
                    string Original_id, 
                    string Original_logicid, 
                    string Original_ip, 
                    string Original_GroupName, 
                    string Original_ZoneName, 
                    string Original_SpeakerName, 
                    string Original_path, 
                    string Original_floor, 
                    string Original_DeviceName, 
                    string Original_state, 
                    string Original_state_old, 
                    long Original_chk, 
                    long Original_seq, 
                    long Original_AssetGroupId) {
            return this.Update(Original_AssetBaseId, id, logicid, ip, GroupName, ZoneName, SpeakerName, path, floor, DeviceName, state, state_old, chk, seq, AssetGroupId, Original_AssetBaseId, Original_id, Original_logicid, Original_ip, Original_GroupName, Original_ZoneName, Original_SpeakerName, Original_path, Original_floor, Original_DeviceName, Original_state, Original_state_old, Original_chk, Original_seq, Original_AssetGroupId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MusicsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public MusicsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Musics";
            tableMapping.ColumnMappings.Add("MusicId", "MusicId");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("FileName", "FileName");
            tableMapping.ColumnMappings.Add("FileContent", "FileContent");
            tableMapping.ColumnMappings.Add("FilePlay", "FilePlay");
            tableMapping.ColumnMappings.Add("deletable", "deletable");
            tableMapping.ColumnMappings.Add("duration", "duration");
            tableMapping.ColumnMappings.Add("InfoTreeId", "InfoTreeId");
            tableMapping.ColumnMappings.Add("SimpleMultiId", "SimpleMultiId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Musics"" WHERE ((""MusicId"" = :Original_MusicId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND ((:IsNull_FileName = 1 AND ""FileName"" IS NULL) OR (""FileName"" = :Original_FileName)) AND ((:IsNull_FileContent = 1 AND ""FileContent"" IS NULL) OR (""FileContent"" = :Original_FileContent)) AND ((:IsNull_FilePlay = 1 AND ""FilePlay"" IS NULL) OR (""FilePlay"" = :Original_FilePlay)) AND ((:IsNull_deletable = 1 AND ""deletable"" IS NULL) OR (""deletable"" = :Original_deletable)) AND ((:IsNull_duration = 1 AND ""duration"" IS NULL) OR (""duration"" = :Original_duration)) AND ((:IsNull_InfoTreeId = 1 AND ""InfoTreeId"" IS NULL) OR (""InfoTreeId"" = :Original_InfoTreeId)) AND ((:IsNull_SimpleMultiId = 1 AND ""SimpleMultiId"" IS NULL) OR (""SimpleMultiId"" = :Original_SimpleMultiId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_FileName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FileName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_FileContent";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FileContent";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_FilePlay";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "FilePlay";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FilePlay";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FilePlay";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_deletable";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_deletable";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_duration";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Musics\" (\"MusicId\", \"id\", \"FileName\", \"FileContent\", \"FilePla" +
                "y\", \"deletable\", \"duration\", \"InfoTreeId\", \"SimpleMultiId\") VALUES (:MusicId, :i" +
                "d, :FileName, :FileContent, :FilePlay, :deletable, :duration, :InfoTreeId, :Simp" +
                "leMultiId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileContent";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FilePlay";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FilePlay";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "deletable";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Musics"" SET ""MusicId"" = :MusicId, ""id"" = :id, ""FileName"" = :FileName, ""FileContent"" = :FileContent, ""FilePlay"" = :FilePlay, ""deletable"" = :deletable, ""duration"" = :duration, ""InfoTreeId"" = :InfoTreeId, ""SimpleMultiId"" = :SimpleMultiId WHERE ((""MusicId"" = :Original_MusicId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND ((:IsNull_FileName = 1 AND ""FileName"" IS NULL) OR (""FileName"" = :Original_FileName)) AND ((:IsNull_FileContent = 1 AND ""FileContent"" IS NULL) OR (""FileContent"" = :Original_FileContent)) AND ((:IsNull_FilePlay = 1 AND ""FilePlay"" IS NULL) OR (""FilePlay"" = :Original_FilePlay)) AND ((:IsNull_deletable = 1 AND ""deletable"" IS NULL) OR (""deletable"" = :Original_deletable)) AND ((:IsNull_duration = 1 AND ""duration"" IS NULL) OR (""duration"" = :Original_duration)) AND ((:IsNull_InfoTreeId = 1 AND ""InfoTreeId"" IS NULL) OR (""InfoTreeId"" = :Original_InfoTreeId)) AND ((:IsNull_SimpleMultiId = 1 AND ""SimpleMultiId"" IS NULL) OR (""SimpleMultiId"" = :Original_SimpleMultiId)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileContent";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FilePlay";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FilePlay";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "deletable";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_FileName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FileName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_FileContent";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FileContent";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_FilePlay";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "FilePlay";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FilePlay";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FilePlay";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_deletable";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_deletable";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_duration";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MusicId, id, FileName, FileContent, FilePlay, deletable, duration, InfoTre" +
                "eId, SimpleMultiId FROM \"main\".Musics";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.MusicsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.MusicsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.MusicsDataTable dataTable = new DataSet1.MusicsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.MusicsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Musics");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_MusicId, string Original_id, string Original_FileName, string Original_FileContent, global::System.Nullable<long> Original_FilePlay, string Original_deletable, string Original_duration, global::System.Nullable<long> Original_InfoTreeId, global::System.Nullable<long> Original_SimpleMultiId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_MusicId));
            if ((Original_id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_id));
            }
            if ((Original_FileName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FileName));
            }
            if ((Original_FileContent == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FileContent));
            }
            if ((Original_FilePlay.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_FilePlay.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_deletable == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_deletable));
            }
            if ((Original_duration == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_duration));
            }
            if ((Original_InfoTreeId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_InfoTreeId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_SimpleMultiId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_SimpleMultiId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long MusicId, string id, string FileName, string FileContent, global::System.Nullable<long> FilePlay, string deletable, string duration, global::System.Nullable<long> InfoTreeId, global::System.Nullable<long> SimpleMultiId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(MusicId));
            if ((id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(id));
            }
            if ((FileName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FileName));
            }
            if ((FileContent == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FileContent));
            }
            if ((FilePlay.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(FilePlay.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((deletable == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(deletable));
            }
            if ((duration == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(duration));
            }
            if ((InfoTreeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(InfoTreeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SimpleMultiId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((long)(SimpleMultiId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long MusicId, 
                    string id, 
                    string FileName, 
                    string FileContent, 
                    global::System.Nullable<long> FilePlay, 
                    string deletable, 
                    string duration, 
                    global::System.Nullable<long> InfoTreeId, 
                    global::System.Nullable<long> SimpleMultiId, 
                    long Original_MusicId, 
                    string Original_id, 
                    string Original_FileName, 
                    string Original_FileContent, 
                    global::System.Nullable<long> Original_FilePlay, 
                    string Original_deletable, 
                    string Original_duration, 
                    global::System.Nullable<long> Original_InfoTreeId, 
                    global::System.Nullable<long> Original_SimpleMultiId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(MusicId));
            if ((id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(id));
            }
            if ((FileName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FileName));
            }
            if ((FileContent == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FileContent));
            }
            if ((FilePlay.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(FilePlay.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((deletable == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(deletable));
            }
            if ((duration == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(duration));
            }
            if ((InfoTreeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(InfoTreeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SimpleMultiId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(SimpleMultiId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_MusicId));
            if ((Original_id == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_id));
            }
            if ((Original_FileName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_FileName));
            }
            if ((Original_FileContent == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_FileContent));
            }
            if ((Original_FilePlay.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_FilePlay.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_deletable == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_deletable));
            }
            if ((Original_duration == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_duration));
            }
            if ((Original_InfoTreeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_InfoTreeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_SimpleMultiId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((long)(Original_SimpleMultiId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string id, 
                    string FileName, 
                    string FileContent, 
                    global::System.Nullable<long> FilePlay, 
                    string deletable, 
                    string duration, 
                    global::System.Nullable<long> InfoTreeId, 
                    global::System.Nullable<long> SimpleMultiId, 
                    long Original_MusicId, 
                    string Original_id, 
                    string Original_FileName, 
                    string Original_FileContent, 
                    global::System.Nullable<long> Original_FilePlay, 
                    string Original_deletable, 
                    string Original_duration, 
                    global::System.Nullable<long> Original_InfoTreeId, 
                    global::System.Nullable<long> Original_SimpleMultiId) {
            return this.Update(Original_MusicId, id, FileName, FileContent, FilePlay, deletable, duration, InfoTreeId, SimpleMultiId, Original_MusicId, Original_id, Original_FileName, Original_FileContent, Original_FilePlay, Original_deletable, Original_duration, Original_InfoTreeId, Original_SimpleMultiId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AssetGroupsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public AssetGroupsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AssetGroups";
            tableMapping.ColumnMappings.Add("AssetGroupId", "AssetGroupId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"AssetGroups\" WHERE ((\"AssetGroupId\" = :Original_AssetGroupId)" +
                " AND ((:IsNull_Name = 1 AND \"Name\" IS NULL) OR (\"Name\" = :Original_Name)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"AssetGroups\" (\"AssetGroupId\", \"Name\") VALUES (:AssetGroupId, " +
                ":Name)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"AssetGroups\" SET \"AssetGroupId\" = :AssetGroupId, \"Name\" = :Name WH" +
                "ERE ((\"AssetGroupId\" = :Original_AssetGroupId) AND ((:IsNull_Name = 1 AND \"Name\"" +
                " IS NULL) OR (\"Name\" = :Original_Name)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AssetGroupId, Name FROM \"main\".AssetGroups";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AssetGroupsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AssetGroupsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AssetGroupsDataTable dataTable = new DataSet1.AssetGroupsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AssetGroupsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "AssetGroups");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_AssetGroupId, string Original_Name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_AssetGroupId));
            if ((Original_Name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long AssetGroupId, string Name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(AssetGroupId));
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long AssetGroupId, string Name, long Original_AssetGroupId, string Original_Name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(AssetGroupId));
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(Original_AssetGroupId));
            if ((Original_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, long Original_AssetGroupId, string Original_Name) {
            return this.Update(Original_AssetGroupId, Name, Original_AssetGroupId, Original_Name);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AssetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public AssetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Assets";
            tableMapping.ColumnMappings.Add("AssetId", "AssetId");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("logicid", "logicid");
            tableMapping.ColumnMappings.Add("ip", "ip");
            tableMapping.ColumnMappings.Add("GroupName", "GroupName");
            tableMapping.ColumnMappings.Add("ZoneName", "ZoneName");
            tableMapping.ColumnMappings.Add("SpeakerName", "SpeakerName");
            tableMapping.ColumnMappings.Add("path", "path");
            tableMapping.ColumnMappings.Add("floor", "floor");
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName");
            tableMapping.ColumnMappings.Add("state", "state");
            tableMapping.ColumnMappings.Add("state_old", "state_old");
            tableMapping.ColumnMappings.Add("chk", "chk");
            tableMapping.ColumnMappings.Add("seq", "seq");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Assets"" WHERE ((""AssetId"" = :Original_AssetId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_ip = 1 AND ""ip"" IS NULL) OR (""ip"" = :Original_ip)) AND ((:IsNull_GroupName = 1 AND ""GroupName"" IS NULL) OR (""GroupName"" = :Original_GroupName)) AND ((:IsNull_ZoneName = 1 AND ""ZoneName"" IS NULL) OR (""ZoneName"" = :Original_ZoneName)) AND ((:IsNull_SpeakerName = 1 AND ""SpeakerName"" IS NULL) OR (""SpeakerName"" = :Original_SpeakerName)) AND ((:IsNull_path = 1 AND ""path"" IS NULL) OR (""path"" = :Original_path)) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_DeviceName = 1 AND ""DeviceName"" IS NULL) OR (""DeviceName"" = :Original_DeviceName)) AND ((:IsNull_state = 1 AND ""state"" IS NULL) OR (""state"" = :Original_state)) AND ((:IsNull_state_old = 1 AND ""state_old"" IS NULL) OR (""state_old"" = :Original_state_old)) AND (""chk"" = :Original_chk) AND (""seq"" = :Original_seq))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ip";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_GroupName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ZoneName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SpeakerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_DeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state_old";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""Assets"" (""AssetId"", ""id"", ""logicid"", ""ip"", ""GroupName"", ""ZoneName"", ""SpeakerName"", ""path"", ""floor"", ""DeviceName"", ""state"", ""state_old"", ""chk"", ""seq"") VALUES (:AssetId, :id, :logicid, :ip, :GroupName, :ZoneName, :SpeakerName, :path, :floor, :DeviceName, :state, :state_old, :chk, :seq)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Assets"" SET ""AssetId"" = :AssetId, ""id"" = :id, ""logicid"" = :logicid, ""ip"" = :ip, ""GroupName"" = :GroupName, ""ZoneName"" = :ZoneName, ""SpeakerName"" = :SpeakerName, ""path"" = :path, ""floor"" = :floor, ""DeviceName"" = :DeviceName, ""state"" = :state, ""state_old"" = :state_old, ""chk"" = :chk, ""seq"" = :seq WHERE ((""AssetId"" = :Original_AssetId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_ip = 1 AND ""ip"" IS NULL) OR (""ip"" = :Original_ip)) AND ((:IsNull_GroupName = 1 AND ""GroupName"" IS NULL) OR (""GroupName"" = :Original_GroupName)) AND ((:IsNull_ZoneName = 1 AND ""ZoneName"" IS NULL) OR (""ZoneName"" = :Original_ZoneName)) AND ((:IsNull_SpeakerName = 1 AND ""SpeakerName"" IS NULL) OR (""SpeakerName"" = :Original_SpeakerName)) AND ((:IsNull_path = 1 AND ""path"" IS NULL) OR (""path"" = :Original_path)) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_DeviceName = 1 AND ""DeviceName"" IS NULL) OR (""DeviceName"" = :Original_DeviceName)) AND ((:IsNull_state = 1 AND ""state"" IS NULL) OR (""state"" = :Original_state)) AND ((:IsNull_state_old = 1 AND ""state_old"" IS NULL) OR (""state_old"" = :Original_state_old)) AND (""chk"" = :Original_chk) AND (""seq"" = :Original_seq))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ip";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_GroupName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ZoneName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SpeakerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_DeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state_old";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AssetId, id, logicid, ip, GroupName, ZoneName, SpeakerName, path, floor, D" +
                "eviceName, state, state_old, chk, seq FROM \"main\".Assets";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AssetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AssetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AssetsDataTable dataTable = new DataSet1.AssetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AssetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Assets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_AssetId, string Original_id, string Original_logicid, string Original_ip, string Original_GroupName, string Original_ZoneName, string Original_SpeakerName, string Original_path, string Original_floor, string Original_DeviceName, string Original_state, string Original_state_old, long Original_chk, long Original_seq) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_AssetId));
            if ((Original_id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_logicid));
            }
            if ((Original_ip == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ip));
            }
            if ((Original_GroupName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_GroupName));
            }
            if ((Original_ZoneName == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ZoneName));
            }
            if ((Original_SpeakerName == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_SpeakerName));
            }
            if ((Original_path == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_path));
            }
            if ((Original_floor == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_floor));
            }
            if ((Original_DeviceName == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_DeviceName));
            }
            if ((Original_state == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_state));
            }
            if ((Original_state_old == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_state_old));
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((long)(Original_chk));
            this.Adapter.DeleteCommand.Parameters[24].Value = ((long)(Original_seq));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long AssetId, string id, string logicid, string ip, string GroupName, string ZoneName, string SpeakerName, string path, string floor, string DeviceName, string state, string state_old, long chk, long seq) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(AssetId));
            if ((id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(id));
            }
            if ((logicid == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((ip == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ip));
            }
            if ((GroupName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(GroupName));
            }
            if ((ZoneName == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ZoneName));
            }
            if ((SpeakerName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SpeakerName));
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(path));
            }
            if ((floor == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(floor));
            }
            if ((DeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(state));
            }
            if ((state_old == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(state_old));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(chk));
            this.Adapter.InsertCommand.Parameters[13].Value = ((long)(seq));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long AssetId, 
                    string id, 
                    string logicid, 
                    string ip, 
                    string GroupName, 
                    string ZoneName, 
                    string SpeakerName, 
                    string path, 
                    string floor, 
                    string DeviceName, 
                    string state, 
                    string state_old, 
                    long chk, 
                    long seq, 
                    long Original_AssetId, 
                    string Original_id, 
                    string Original_logicid, 
                    string Original_ip, 
                    string Original_GroupName, 
                    string Original_ZoneName, 
                    string Original_SpeakerName, 
                    string Original_path, 
                    string Original_floor, 
                    string Original_DeviceName, 
                    string Original_state, 
                    string Original_state_old, 
                    long Original_chk, 
                    long Original_seq) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(AssetId));
            if ((id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(id));
            }
            if ((logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((ip == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ip));
            }
            if ((GroupName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(GroupName));
            }
            if ((ZoneName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ZoneName));
            }
            if ((SpeakerName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SpeakerName));
            }
            if ((path == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(path));
            }
            if ((floor == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(floor));
            }
            if ((DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(state));
            }
            if ((state_old == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(state_old));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(chk));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(seq));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_AssetId));
            if ((Original_id == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_logicid));
            }
            if ((Original_ip == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_ip));
            }
            if ((Original_GroupName == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_GroupName));
            }
            if ((Original_ZoneName == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ZoneName));
            }
            if ((Original_SpeakerName == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_SpeakerName));
            }
            if ((Original_path == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_path));
            }
            if ((Original_floor == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_floor));
            }
            if ((Original_DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_DeviceName));
            }
            if ((Original_state == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_state));
            }
            if ((Original_state_old == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_state_old));
            }
            this.Adapter.UpdateCommand.Parameters[37].Value = ((long)(Original_chk));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(Original_seq));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string id, 
                    string logicid, 
                    string ip, 
                    string GroupName, 
                    string ZoneName, 
                    string SpeakerName, 
                    string path, 
                    string floor, 
                    string DeviceName, 
                    string state, 
                    string state_old, 
                    long chk, 
                    long seq, 
                    long Original_AssetId, 
                    string Original_id, 
                    string Original_logicid, 
                    string Original_ip, 
                    string Original_GroupName, 
                    string Original_ZoneName, 
                    string Original_SpeakerName, 
                    string Original_path, 
                    string Original_floor, 
                    string Original_DeviceName, 
                    string Original_state, 
                    string Original_state_old, 
                    long Original_chk, 
                    long Original_seq) {
            return this.Update(Original_AssetId, id, logicid, ip, GroupName, ZoneName, SpeakerName, path, floor, DeviceName, state, state_old, chk, seq, Original_AssetId, Original_id, Original_logicid, Original_ip, Original_GroupName, Original_ZoneName, Original_SpeakerName, Original_path, Original_floor, Original_DeviceName, Original_state, Original_state_old, Original_chk, Original_seq);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EventvmTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public EventvmTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Eventvm";
            tableMapping.ColumnMappings.Add("EventVMId", "EventVMId");
            tableMapping.ColumnMappings.Add("base_text", "base_text");
            tableMapping.ColumnMappings.Add("write_time", "write_time");
            tableMapping.ColumnMappings.Add("event_text", "event_text");
            tableMapping.ColumnMappings.Add("ip", "ip");
            tableMapping.ColumnMappings.Add("path", "path");
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName");
            tableMapping.ColumnMappings.Add("state", "state");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Eventvm"" WHERE ((""EventVMId"" = :Original_EventVMId) AND ((:IsNull_base_text = 1 AND ""base_text"" IS NULL) OR (""base_text"" = :Original_base_text)) AND (""write_time"" = :Original_write_time) AND ((:IsNull_event_text = 1 AND ""event_text"" IS NULL) OR (""event_text"" = :Original_event_text)) AND ((:IsNull_ip = 1 AND ""ip"" IS NULL) OR (""ip"" = :Original_ip)) AND ((:IsNull_path = 1 AND ""path"" IS NULL) OR (""path"" = :Original_path)) AND ((:IsNull_DeviceName = 1 AND ""DeviceName"" IS NULL) OR (""DeviceName"" = :Original_DeviceName)) AND ((:IsNull_state = 1 AND ""state"" IS NULL) OR (""state"" = :Original_state)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_base_text";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "base_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_base_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "base_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_write_time";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "write_time";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_event_text";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_event_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ip";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_DeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Eventvm\" (\"EventVMId\", \"base_text\", \"write_time\", \"event_text" +
                "\", \"ip\", \"path\", \"DeviceName\", \"state\") VALUES (:EventVMId, :base_text, :write_t" +
                "ime, :event_text, :ip, :path, :DeviceName, :state)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "base_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "base_text";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "write_time";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "write_time";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "event_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Eventvm"" SET ""EventVMId"" = :EventVMId, ""base_text"" = :base_text, ""write_time"" = :write_time, ""event_text"" = :event_text, ""ip"" = :ip, ""path"" = :path, ""DeviceName"" = :DeviceName, ""state"" = :state WHERE ((""EventVMId"" = :Original_EventVMId) AND ((:IsNull_base_text = 1 AND ""base_text"" IS NULL) OR (""base_text"" = :Original_base_text)) AND (""write_time"" = :Original_write_time) AND ((:IsNull_event_text = 1 AND ""event_text"" IS NULL) OR (""event_text"" = :Original_event_text)) AND ((:IsNull_ip = 1 AND ""ip"" IS NULL) OR (""ip"" = :Original_ip)) AND ((:IsNull_path = 1 AND ""path"" IS NULL) OR (""path"" = :Original_path)) AND ((:IsNull_DeviceName = 1 AND ""DeviceName"" IS NULL) OR (""DeviceName"" = :Original_DeviceName)) AND ((:IsNull_state = 1 AND ""state"" IS NULL) OR (""state"" = :Original_state)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "base_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "base_text";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "write_time";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "write_time";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "event_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_base_text";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "base_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_base_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "base_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_write_time";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "write_time";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_event_text";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_event_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ip";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_DeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_state";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EventVMId, base_text, write_time, event_text, ip, path, DeviceName, state " +
                "FROM \"main\".Eventvm";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.EventvmDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.EventvmDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.EventvmDataTable dataTable = new DataSet1.EventvmDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.EventvmDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Eventvm");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_EventVMId, string Original_base_text, System.DateTime Original_write_time, string Original_event_text, string Original_ip, string Original_path, string Original_DeviceName, string Original_state) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_EventVMId));
            if ((Original_base_text == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_base_text));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_write_time));
            if ((Original_event_text == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_event_text));
            }
            if ((Original_ip == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_ip));
            }
            if ((Original_path == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_path));
            }
            if ((Original_DeviceName == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_DeviceName));
            }
            if ((Original_state == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_state));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long EventVMId, string base_text, System.DateTime write_time, string event_text, string ip, string path, string DeviceName, string state) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(EventVMId));
            if ((base_text == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(base_text));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(write_time));
            if ((event_text == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(event_text));
            }
            if ((ip == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ip));
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(path));
            }
            if ((DeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(state));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long EventVMId, 
                    string base_text, 
                    System.DateTime write_time, 
                    string event_text, 
                    string ip, 
                    string path, 
                    string DeviceName, 
                    string state, 
                    long Original_EventVMId, 
                    string Original_base_text, 
                    System.DateTime Original_write_time, 
                    string Original_event_text, 
                    string Original_ip, 
                    string Original_path, 
                    string Original_DeviceName, 
                    string Original_state) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(EventVMId));
            if ((base_text == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(base_text));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(write_time));
            if ((event_text == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(event_text));
            }
            if ((ip == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ip));
            }
            if ((path == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(path));
            }
            if ((DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(state));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_EventVMId));
            if ((Original_base_text == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_base_text));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_write_time));
            if ((Original_event_text == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_event_text));
            }
            if ((Original_ip == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ip));
            }
            if ((Original_path == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_path));
            }
            if ((Original_DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_DeviceName));
            }
            if ((Original_state == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_state));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string base_text, System.DateTime write_time, string event_text, string ip, string path, string DeviceName, string state, long Original_EventVMId, string Original_base_text, System.DateTime Original_write_time, string Original_event_text, string Original_ip, string Original_path, string Original_DeviceName, string Original_state) {
            return this.Update(Original_EventVMId, base_text, write_time, event_text, ip, path, DeviceName, state, Original_EventVMId, Original_base_text, Original_write_time, Original_event_text, Original_ip, Original_path, Original_DeviceName, Original_state);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FloorbasesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public FloorbasesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Floorbases";
            tableMapping.ColumnMappings.Add("FloorBaseId", "FloorBaseId");
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("logicid", "logicid");
            tableMapping.ColumnMappings.Add("buildingname", "buildingname");
            tableMapping.ColumnMappings.Add("floororder", "floororder");
            tableMapping.ColumnMappings.Add("floor", "floor");
            tableMapping.ColumnMappings.Add("filename", "filename");
            tableMapping.ColumnMappings.Add("left", "left");
            tableMapping.ColumnMappings.Add("top", "top");
            tableMapping.ColumnMappings.Add("content", "content");
            tableMapping.ColumnMappings.Add("assetname", "assetname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Floorbases"" WHERE ((""FloorBaseId"" = :Original_FloorBaseId) AND ((:IsNull_Id = 1 AND ""Id"" IS NULL) OR (""Id"" = :Original_Id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_buildingname = 1 AND ""buildingname"" IS NULL) OR (""buildingname"" = :Original_buildingname)) AND (""floororder"" = :Original_floororder) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_filename = 1 AND ""filename"" IS NULL) OR (""filename"" = :Original_filename)) AND (""left"" = :Original_left) AND (""top"" = :Original_top) AND ((:IsNull_content = 1 AND ""content"" IS NULL) OR (""content"" = :Original_content)) AND ((:IsNull_assetname = 1 AND ""assetname"" IS NULL) OR (""assetname"" = :Original_assetname)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_buildingname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_filename";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_content";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_assetname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""Floorbases"" (""FloorBaseId"", ""Id"", ""logicid"", ""buildingname"", ""floororder"", ""floor"", ""filename"", ""left"", ""top"", ""content"", ""assetname"") VALUES (:FloorBaseId, :Id, :logicid, :buildingname, :floororder, :floor, :filename, :left, :top, :content, :assetname)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Floorbases"" SET ""FloorBaseId"" = :FloorBaseId, ""Id"" = :Id, ""logicid"" = :logicid, ""buildingname"" = :buildingname, ""floororder"" = :floororder, ""floor"" = :floor, ""filename"" = :filename, ""left"" = :left, ""top"" = :top, ""content"" = :content, ""assetname"" = :assetname WHERE ((""FloorBaseId"" = :Original_FloorBaseId) AND ((:IsNull_Id = 1 AND ""Id"" IS NULL) OR (""Id"" = :Original_Id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_buildingname = 1 AND ""buildingname"" IS NULL) OR (""buildingname"" = :Original_buildingname)) AND (""floororder"" = :Original_floororder) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_filename = 1 AND ""filename"" IS NULL) OR (""filename"" = :Original_filename)) AND (""left"" = :Original_left) AND (""top"" = :Original_top) AND ((:IsNull_content = 1 AND ""content"" IS NULL) OR (""content"" = :Original_content)) AND ((:IsNull_assetname = 1 AND ""assetname"" IS NULL) OR (""assetname"" = :Original_assetname)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_buildingname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_filename";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_content";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_assetname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FloorBaseId, Id, logicid, buildingname, floororder, floor, filename, \"left" +
                "\", \"top\", content, assetname FROM \"main\".Floorbases";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.FloorbasesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.FloorbasesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.FloorbasesDataTable dataTable = new DataSet1.FloorbasesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.FloorbasesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Floorbases");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_FloorBaseId, string Original_Id, string Original_logicid, string Original_buildingname, long Original_floororder, string Original_floor, string Original_filename, double Original_left, double Original_top, string Original_content, string Original_assetname) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_FloorBaseId));
            if ((Original_Id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_logicid));
            }
            if ((Original_buildingname == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_buildingname));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_floororder));
            if ((Original_floor == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_floor));
            }
            if ((Original_filename == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_filename));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_left));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((double)(Original_top));
            if ((Original_content == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_content));
            }
            if ((Original_assetname == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long FloorBaseId, string Id, string logicid, string buildingname, long floororder, string floor, string filename, double left, double top, string content, string assetname) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(FloorBaseId));
            if ((Id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((logicid == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((buildingname == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(buildingname));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(floororder));
            if ((floor == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(filename));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((double)(left));
            this.Adapter.InsertCommand.Parameters[8].Value = ((double)(top));
            if ((content == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long FloorBaseId, 
                    string Id, 
                    string logicid, 
                    string buildingname, 
                    long floororder, 
                    string floor, 
                    string filename, 
                    double left, 
                    double top, 
                    string content, 
                    string assetname, 
                    long Original_FloorBaseId, 
                    string Original_Id, 
                    string Original_logicid, 
                    string Original_buildingname, 
                    long Original_floororder, 
                    string Original_floor, 
                    string Original_filename, 
                    double Original_left, 
                    double Original_top, 
                    string Original_content, 
                    string Original_assetname) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(FloorBaseId));
            if ((Id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((buildingname == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(buildingname));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(floororder));
            if ((floor == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(filename));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(left));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(top));
            if ((content == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(assetname));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_FloorBaseId));
            if ((Original_Id == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_logicid));
            }
            if ((Original_buildingname == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_buildingname));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_floororder));
            if ((Original_floor == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_floor));
            }
            if ((Original_filename == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Original_left));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_top));
            if ((Original_content == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_content));
            }
            if ((Original_assetname == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Id, 
                    string logicid, 
                    string buildingname, 
                    long floororder, 
                    string floor, 
                    string filename, 
                    double left, 
                    double top, 
                    string content, 
                    string assetname, 
                    long Original_FloorBaseId, 
                    string Original_Id, 
                    string Original_logicid, 
                    string Original_buildingname, 
                    long Original_floororder, 
                    string Original_floor, 
                    string Original_filename, 
                    double Original_left, 
                    double Original_top, 
                    string Original_content, 
                    string Original_assetname) {
            return this.Update(Original_FloorBaseId, Id, logicid, buildingname, floororder, floor, filename, left, top, content, assetname, Original_FloorBaseId, Original_Id, Original_logicid, Original_buildingname, Original_floororder, Original_floor, Original_filename, Original_left, Original_top, Original_content, Original_assetname);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FloormapsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public FloormapsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Floormaps";
            tableMapping.ColumnMappings.Add("FloorMapId", "FloorMapId");
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("logicid", "logicid");
            tableMapping.ColumnMappings.Add("buildingname", "buildingname");
            tableMapping.ColumnMappings.Add("floororder", "floororder");
            tableMapping.ColumnMappings.Add("floor", "floor");
            tableMapping.ColumnMappings.Add("filename", "filename");
            tableMapping.ColumnMappings.Add("left", "left");
            tableMapping.ColumnMappings.Add("top", "top");
            tableMapping.ColumnMappings.Add("content", "content");
            tableMapping.ColumnMappings.Add("assetname", "assetname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Floormaps"" WHERE ((""FloorMapId"" = :Original_FloorMapId) AND ((:IsNull_Id = 1 AND ""Id"" IS NULL) OR (""Id"" = :Original_Id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_buildingname = 1 AND ""buildingname"" IS NULL) OR (""buildingname"" = :Original_buildingname)) AND (""floororder"" = :Original_floororder) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_filename = 1 AND ""filename"" IS NULL) OR (""filename"" = :Original_filename)) AND (""left"" = :Original_left) AND (""top"" = :Original_top) AND ((:IsNull_content = 1 AND ""content"" IS NULL) OR (""content"" = :Original_content)) AND ((:IsNull_assetname = 1 AND ""assetname"" IS NULL) OR (""assetname"" = :Original_assetname)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_buildingname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_filename";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_content";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_assetname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""Floormaps"" (""FloorMapId"", ""Id"", ""logicid"", ""buildingname"", ""floororder"", ""floor"", ""filename"", ""left"", ""top"", ""content"", ""assetname"") VALUES (:FloorMapId, :Id, :logicid, :buildingname, :floororder, :floor, :filename, :left, :top, :content, :assetname)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Floormaps"" SET ""FloorMapId"" = :FloorMapId, ""Id"" = :Id, ""logicid"" = :logicid, ""buildingname"" = :buildingname, ""floororder"" = :floororder, ""floor"" = :floor, ""filename"" = :filename, ""left"" = :left, ""top"" = :top, ""content"" = :content, ""assetname"" = :assetname WHERE ((""FloorMapId"" = :Original_FloorMapId) AND ((:IsNull_Id = 1 AND ""Id"" IS NULL) OR (""Id"" = :Original_Id)) AND ((:IsNull_logicid = 1 AND ""logicid"" IS NULL) OR (""logicid"" = :Original_logicid)) AND ((:IsNull_buildingname = 1 AND ""buildingname"" IS NULL) OR (""buildingname"" = :Original_buildingname)) AND (""floororder"" = :Original_floororder) AND ((:IsNull_floor = 1 AND ""floor"" IS NULL) OR (""floor"" = :Original_floor)) AND ((:IsNull_filename = 1 AND ""filename"" IS NULL) OR (""filename"" = :Original_filename)) AND (""left"" = :Original_left) AND (""top"" = :Original_top) AND ((:IsNull_content = 1 AND ""content"" IS NULL) OR (""content"" = :Original_content)) AND ((:IsNull_assetname = 1 AND ""assetname"" IS NULL) OR (""assetname"" = :Original_assetname)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_logicid";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_logicid";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "logicid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_buildingname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_floor";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_filename";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_left";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "left";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_top";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "top";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_content";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_assetname";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FloorMapId, Id, logicid, buildingname, floororder, floor, filename, \"left\"" +
                ", \"top\", content, assetname FROM \"main\".Floormaps";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.FloormapsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.FloormapsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.FloormapsDataTable dataTable = new DataSet1.FloormapsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.FloormapsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Floormaps");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_FloorMapId, string Original_Id, string Original_logicid, string Original_buildingname, long Original_floororder, string Original_floor, string Original_filename, double Original_left, double Original_top, string Original_content, string Original_assetname) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_FloorMapId));
            if ((Original_Id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_logicid));
            }
            if ((Original_buildingname == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_buildingname));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_floororder));
            if ((Original_floor == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_floor));
            }
            if ((Original_filename == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_filename));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_left));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((double)(Original_top));
            if ((Original_content == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_content));
            }
            if ((Original_assetname == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long FloorMapId, string Id, string logicid, string buildingname, long floororder, string floor, string filename, double left, double top, string content, string assetname) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(FloorMapId));
            if ((Id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((logicid == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((buildingname == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(buildingname));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(floororder));
            if ((floor == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(filename));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((double)(left));
            this.Adapter.InsertCommand.Parameters[8].Value = ((double)(top));
            if ((content == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long FloorMapId, 
                    string Id, 
                    string logicid, 
                    string buildingname, 
                    long floororder, 
                    string floor, 
                    string filename, 
                    double left, 
                    double top, 
                    string content, 
                    string assetname, 
                    long Original_FloorMapId, 
                    string Original_Id, 
                    string Original_logicid, 
                    string Original_buildingname, 
                    long Original_floororder, 
                    string Original_floor, 
                    string Original_filename, 
                    double Original_left, 
                    double Original_top, 
                    string Original_content, 
                    string Original_assetname) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(FloorMapId));
            if ((Id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(logicid));
            }
            if ((buildingname == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(buildingname));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(floororder));
            if ((floor == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(filename));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(left));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(top));
            if ((content == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(assetname));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_FloorMapId));
            if ((Original_Id == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Id));
            }
            if ((Original_logicid == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_logicid));
            }
            if ((Original_buildingname == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_buildingname));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_floororder));
            if ((Original_floor == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_floor));
            }
            if ((Original_filename == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Original_left));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_top));
            if ((Original_content == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_content));
            }
            if ((Original_assetname == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Id, 
                    string logicid, 
                    string buildingname, 
                    long floororder, 
                    string floor, 
                    string filename, 
                    double left, 
                    double top, 
                    string content, 
                    string assetname, 
                    long Original_FloorMapId, 
                    string Original_Id, 
                    string Original_logicid, 
                    string Original_buildingname, 
                    long Original_floororder, 
                    string Original_floor, 
                    string Original_filename, 
                    double Original_left, 
                    double Original_top, 
                    string Original_content, 
                    string Original_assetname) {
            return this.Update(Original_FloorMapId, Id, logicid, buildingname, floororder, floor, filename, left, top, content, assetname, Original_FloorMapId, Original_Id, Original_logicid, Original_buildingname, Original_floororder, Original_floor, Original_filename, Original_left, Original_top, Original_content, Original_assetname);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HolidaysTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public HolidaysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Holidays";
            tableMapping.ColumnMappings.Add("HolidayId", "HolidayId");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("hDate", "hDate");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("SimplePAId", "SimplePAId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Holidays"" WHERE ((""HolidayId"" = :Original_HolidayId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND (""hDate"" = :Original_hDate) AND ((:IsNull_UserName = 1 AND ""UserName"" IS NULL) OR (""UserName"" = :Original_UserName)) AND ((:IsNull_Description = 1 AND ""Description"" IS NULL) OR (""Description"" = :Original_Description)) AND ((:IsNull_SimplePAId = 1 AND ""SimplePAId"" IS NULL) OR (""SimplePAId"" = :Original_SimplePAId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_hDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "hDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_UserName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Description";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Description";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SimplePAId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Holidays\" (\"HolidayId\", \"id\", \"hDate\", \"UserName\", \"Descripti" +
                "on\", \"SimplePAId\") VALUES (:HolidayId, :id, :hDate, :UserName, :Description, :Si" +
                "mplePAId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "hDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "hDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Description";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Holidays"" SET ""HolidayId"" = :HolidayId, ""id"" = :id, ""hDate"" = :hDate, ""UserName"" = :UserName, ""Description"" = :Description, ""SimplePAId"" = :SimplePAId WHERE ((""HolidayId"" = :Original_HolidayId) AND ((:IsNull_id = 1 AND ""id"" IS NULL) OR (""id"" = :Original_id)) AND (""hDate"" = :Original_hDate) AND ((:IsNull_UserName = 1 AND ""UserName"" IS NULL) OR (""UserName"" = :Original_UserName)) AND ((:IsNull_Description = 1 AND ""Description"" IS NULL) OR (""Description"" = :Original_Description)) AND ((:IsNull_SimplePAId = 1 AND ""SimplePAId"" IS NULL) OR (""SimplePAId"" = :Original_SimplePAId)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "hDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "hDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Description";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_hDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "hDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_UserName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Description";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Description";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SimplePAId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT HolidayId, id, hDate, UserName, Description, SimplePAId FROM \"main\".Holida" +
                "ys";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.HolidaysDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.HolidaysDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.HolidaysDataTable dataTable = new DataSet1.HolidaysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.HolidaysDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Holidays");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_HolidayId, string Original_id, System.DateTime Original_hDate, string Original_UserName, string Original_Description, global::System.Nullable<long> Original_SimplePAId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_HolidayId));
            if ((Original_id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_id));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_hDate));
            if ((Original_UserName == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_UserName));
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Description));
            }
            if ((Original_SimplePAId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((long)(Original_SimplePAId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long HolidayId, string id, System.DateTime hDate, string UserName, string Description, global::System.Nullable<long> SimplePAId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(HolidayId));
            if ((id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(id));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(hDate));
            if ((UserName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(UserName));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Description));
            }
            if ((SimplePAId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(SimplePAId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long HolidayId, string id, System.DateTime hDate, string UserName, string Description, global::System.Nullable<long> SimplePAId, long Original_HolidayId, string Original_id, System.DateTime Original_hDate, string Original_UserName, string Original_Description, global::System.Nullable<long> Original_SimplePAId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(HolidayId));
            if ((id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(id));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(hDate));
            if ((UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(UserName));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Description));
            }
            if ((SimplePAId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(SimplePAId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_HolidayId));
            if ((Original_id == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_id));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_hDate));
            if ((Original_UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_UserName));
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Description));
            }
            if ((Original_SimplePAId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_SimplePAId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string id, System.DateTime hDate, string UserName, string Description, global::System.Nullable<long> SimplePAId, long Original_HolidayId, string Original_id, System.DateTime Original_hDate, string Original_UserName, string Original_Description, global::System.Nullable<long> Original_SimplePAId) {
            return this.Update(Original_HolidayId, id, hDate, UserName, Description, SimplePAId, Original_HolidayId, Original_id, Original_hDate, Original_UserName, Original_Description, Original_SimplePAId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InfoTreesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public InfoTreesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InfoTrees";
            tableMapping.ColumnMappings.Add("InfoTreeId", "InfoTreeId");
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("gstreeAssetGroupId", "gstreeAssetGroupId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""InfoTrees"" WHERE ((""InfoTreeId"" = :Original_InfoTreeId) AND ((:IsNull_Id = 1 AND ""Id"" IS NULL) OR (""Id"" = :Original_Id)) AND ((:IsNull_Subject = 1 AND ""Subject"" IS NULL) OR (""Subject"" = :Original_Subject)) AND ((:IsNull_Name = 1 AND ""Name"" IS NULL) OR (""Name"" = :Original_Name)) AND ((:IsNull_gstreeAssetGroupId = 1 AND ""gstreeAssetGroupId"" IS NULL) OR (""gstreeAssetGroupId"" = :Original_gstreeAssetGroupId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Subject";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"InfoTrees\" (\"InfoTreeId\", \"Id\", \"Subject\", \"Name\", \"gstreeAss" +
                "etGroupId\") VALUES (:InfoTreeId, :Id, :Subject, :Name, :gstreeAssetGroupId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""InfoTrees"" SET ""InfoTreeId"" = :InfoTreeId, ""Id"" = :Id, ""Subject"" = :Subject, ""Name"" = :Name, ""gstreeAssetGroupId"" = :gstreeAssetGroupId WHERE ((""InfoTreeId"" = :Original_InfoTreeId) AND ((:IsNull_Id = 1 AND ""Id"" IS NULL) OR (""Id"" = :Original_Id)) AND ((:IsNull_Subject = 1 AND ""Subject"" IS NULL) OR (""Subject"" = :Original_Subject)) AND ((:IsNull_Name = 1 AND ""Name"" IS NULL) OR (""Name"" = :Original_Name)) AND ((:IsNull_gstreeAssetGroupId = 1 AND ""gstreeAssetGroupId"" IS NULL) OR (""gstreeAssetGroupId"" = :Original_gstreeAssetGroupId)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Subject";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT InfoTreeId, Id, Subject, Name, gstreeAssetGroupId FROM \"main\".InfoTrees";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.InfoTreesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.InfoTreesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.InfoTreesDataTable dataTable = new DataSet1.InfoTreesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.InfoTreesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "InfoTrees");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_InfoTreeId, string Original_Id, string Original_Subject, string Original_Name, global::System.Nullable<long> Original_gstreeAssetGroupId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_InfoTreeId));
            if ((Original_Id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Id));
            }
            if ((Original_Subject == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Subject));
            }
            if ((Original_Name == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Name));
            }
            if ((Original_gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long InfoTreeId, string Id, string Subject, string Name, global::System.Nullable<long> gstreeAssetGroupId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(InfoTreeId));
            if ((Id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((Subject == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long InfoTreeId, string Id, string Subject, string Name, global::System.Nullable<long> gstreeAssetGroupId, long Original_InfoTreeId, string Original_Id, string Original_Subject, string Original_Name, global::System.Nullable<long> Original_gstreeAssetGroupId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(InfoTreeId));
            if ((Id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_InfoTreeId));
            if ((Original_Id == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Id));
            }
            if ((Original_Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Subject));
            }
            if ((Original_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Name));
            }
            if ((Original_gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Id, string Subject, string Name, global::System.Nullable<long> gstreeAssetGroupId, long Original_InfoTreeId, string Original_Id, string Original_Subject, string Original_Name, global::System.Nullable<long> Original_gstreeAssetGroupId) {
            return this.Update(Original_InfoTreeId, Id, Subject, Name, gstreeAssetGroupId, Original_InfoTreeId, Original_Id, Original_Subject, Original_Name, Original_gstreeAssetGroupId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SimpleMultisTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public SimpleMultisTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SimpleMultis";
            tableMapping.ColumnMappings.Add("SimpleMultiId", "SimpleMultiId");
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("idno", "idno");
            tableMapping.ColumnMappings.Add("chno", "chno");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("gstreeAssetGroupId", "gstreeAssetGroupId");
            tableMapping.ColumnMappings.Add("stm", "stm");
            tableMapping.ColumnMappings.Add("etm", "etm");
            tableMapping.ColumnMappings.Add("duration", "duration");
            tableMapping.ColumnMappings.Add("week", "week");
            tableMapping.ColumnMappings.Add("day1", "day1");
            tableMapping.ColumnMappings.Add("day2", "day2");
            tableMapping.ColumnMappings.Add("day3", "day3");
            tableMapping.ColumnMappings.Add("day4", "day4");
            tableMapping.ColumnMappings.Add("day5", "day5");
            tableMapping.ColumnMappings.Add("day6", "day6");
            tableMapping.ColumnMappings.Add("day7", "day7");
            tableMapping.ColumnMappings.Add("tss", "tss");
            tableMapping.ColumnMappings.Add("tse", "tse");
            tableMapping.ColumnMappings.Add("Color16", "Color16");
            tableMapping.ColumnMappings.Add("overlap", "overlap");
            tableMapping.ColumnMappings.Add("weekday", "weekday");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""SimpleMultis"" WHERE ((""SimpleMultiId"" = :Original_SimpleMultiId) AND ((:IsNull_Id = 1 AND ""Id"" IS NULL) OR (""Id"" = :Original_Id)) AND (""idno"" = :Original_idno) AND (""chno"" = :Original_chno) AND ((:IsNull_Subject = 1 AND ""Subject"" IS NULL) OR (""Subject"" = :Original_Subject)) AND ((:IsNull_Name = 1 AND ""Name"" IS NULL) OR (""Name"" = :Original_Name)) AND ((:IsNull_gstreeAssetGroupId = 1 AND ""gstreeAssetGroupId"" IS NULL) OR (""gstreeAssetGroupId"" = :Original_gstreeAssetGroupId)) AND (""stm"" = :Original_stm) AND (""etm"" = :Original_etm) AND ((:IsNull_duration = 1 AND ""duration"" IS NULL) OR (""duration"" = :Original_duration)) AND (""week"" = :Original_week) AND (""day1"" = :Original_day1) AND (""day2"" = :Original_day2) AND (""day3"" = :Original_day3) AND (""day4"" = :Original_day4) AND (""day5"" = :Original_day5) AND (""day6"" = :Original_day6) AND (""day7"" = :Original_day7) AND (""tss"" = :Original_tss) AND (""tse"" = :Original_tse) AND ((:IsNull_Color16 = 1 AND ""Color16"" IS NULL) OR (""Color16"" = :Original_Color16)) AND (""overlap"" = :Original_overlap) AND (""weekday"" = :Original_weekday))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_idno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "idno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Subject";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_stm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "stm";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_etm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "etm";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_duration";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_week";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "week";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day3";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day4";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day4";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day5";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day5";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day6";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day6";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day7";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day7";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_tss";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tss";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_tse";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tse";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Color16";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Color16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_overlap";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "overlap";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_weekday";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "weekday";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""SimpleMultis"" (""SimpleMultiId"", ""Id"", ""idno"", ""chno"", ""Subject"", ""Name"", ""gstreeAssetGroupId"", ""stm"", ""etm"", ""duration"", ""week"", ""day1"", ""day2"", ""day3"", ""day4"", ""day5"", ""day6"", ""day7"", ""tss"", ""tse"", ""Color16"", ""overlap"", ""weekday"") VALUES (:SimpleMultiId, :Id, :idno, :chno, :Subject, :Name, :gstreeAssetGroupId, :stm, :etm, :duration, :week, :day1, :day2, :day3, :day4, :day5, :day6, :day7, :tss, :tse, :Color16, :overlap, :weekday)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "idno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "idno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "stm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "stm";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "etm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "etm";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "week";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "week";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day3";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day4";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day4";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day5";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day5";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day6";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day6";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day7";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day7";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tss";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tss";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tse";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tse";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Color16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "overlap";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "overlap";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "weekday";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "weekday";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"SimpleMultis\" SET \"SimpleMultiId\" = :SimpleMultiId, \"Id\" = :Id, \"i" +
                "dno\" = :idno, \"chno\" = :chno, \"Subject\" = :Subject, \"Name\" = :Name, \"gstreeAsset" +
                "GroupId\" = :gstreeAssetGroupId, \"stm\" = :stm, \"etm\" = :etm, \"duration\" = :durati" +
                "on, \"week\" = :week, \"day1\" = :day1, \"day2\" = :day2, \"day3\" = :day3, \"day4\" = :da" +
                "y4, \"day5\" = :day5, \"day6\" = :day6, \"day7\" = :day7, \"tss\" = :tss, \"tse\" = :tse, " +
                "\"Color16\" = :Color16, \"overlap\" = :overlap, \"weekday\" = :weekday WHERE ((\"Simple" +
                "MultiId\" = :Original_SimpleMultiId) AND ((:IsNull_Id = 1 AND \"Id\" IS NULL) OR (\"" +
                "Id\" = :Original_Id)) AND (\"idno\" = :Original_idno) AND (\"chno\" = :Original_chno)" +
                " AND ((:IsNull_Subject = 1 AND \"Subject\" IS NULL) OR (\"Subject\" = :Original_Subj" +
                "ect)) AND ((:IsNull_Name = 1 AND \"Name\" IS NULL) OR (\"Name\" = :Original_Name)) A" +
                "ND ((:IsNull_gstreeAssetGroupId = 1 AND \"gstreeAssetGroupId\" IS NULL) OR (\"gstre" +
                "eAssetGroupId\" = :Original_gstreeAssetGroupId)) AND (\"stm\" = :Original_stm) AND " +
                "(\"etm\" = :Original_etm) AND ((:IsNull_duration = 1 AND \"duration\" IS NULL) OR (\"" +
                "duration\" = :Original_duration)) AND (\"week\" = :Original_week) AND (\"day1\" = :Or" +
                "iginal_day1) AND (\"day2\" = :Original_day2) AND (\"day3\" = :Original_day3) AND (\"d" +
                "ay4\" = :Original_day4) AND (\"day5\" = :Original_day5) AND (\"day6\" = :Original_day" +
                "6) AND (\"day7\" = :Original_day7) AND (\"tss\" = :Original_tss) AND (\"tse\" = :Origi" +
                "nal_tse) AND ((:IsNull_Color16 = 1 AND \"Color16\" IS NULL) OR (\"Color16\" = :Origi" +
                "nal_Color16)) AND (\"overlap\" = :Original_overlap) AND (\"weekday\" = :Original_wee" +
                "kday))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "idno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "idno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "stm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "stm";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "etm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "etm";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "week";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "week";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day3";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day4";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day4";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day5";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day5";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day6";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day6";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day7";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day7";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tss";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tss";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tse";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tse";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Color16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "overlap";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "overlap";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "weekday";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "weekday";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_idno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "idno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Subject";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_stm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "stm";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_etm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "etm";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_duration";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_week";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "week";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day3";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day4";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day4";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day5";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day5";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day6";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day6";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_day7";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day7";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_tss";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tss";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_tse";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tse";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Color16";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Color16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_overlap";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "overlap";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_weekday";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "weekday";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SimpleMultiId, Id, idno, chno, Subject, Name, gstreeAssetGroupId, stm, etm" +
                ", duration, week, day1, day2, day3, day4, day5, day6, day7, tss, tse, Color16, o" +
                "verlap, weekday FROM \"main\".SimpleMultis";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SimpleMultisDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SimpleMultisDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SimpleMultisDataTable dataTable = new DataSet1.SimpleMultisDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SimpleMultisDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "SimpleMultis");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_SimpleMultiId, 
                    string Original_Id, 
                    long Original_idno, 
                    long Original_chno, 
                    string Original_Subject, 
                    string Original_Name, 
                    global::System.Nullable<long> Original_gstreeAssetGroupId, 
                    string Original_stm, 
                    string Original_etm, 
                    string Original_duration, 
                    long Original_week, 
                    long Original_day1, 
                    long Original_day2, 
                    long Original_day3, 
                    long Original_day4, 
                    long Original_day5, 
                    long Original_day6, 
                    long Original_day7, 
                    string Original_tss, 
                    string Original_tse, 
                    string Original_Color16, 
                    long Original_overlap, 
                    long Original_weekday) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SimpleMultiId));
            if ((Original_Id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Id));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_idno));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_chno));
            if ((Original_Subject == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Subject));
            }
            if ((Original_Name == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Name));
            }
            if ((Original_gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_stm == null)) {
                throw new global::System.ArgumentNullException("Original_stm");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_stm));
            }
            if ((Original_etm == null)) {
                throw new global::System.ArgumentNullException("Original_etm");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_etm));
            }
            if ((Original_duration == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_duration));
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((long)(Original_week));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_day1));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((long)(Original_day2));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((long)(Original_day3));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((long)(Original_day4));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_day5));
            this.Adapter.DeleteCommand.Parameters[21].Value = ((long)(Original_day6));
            this.Adapter.DeleteCommand.Parameters[22].Value = ((long)(Original_day7));
            if ((Original_tss == null)) {
                throw new global::System.ArgumentNullException("Original_tss");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_tss));
            }
            if ((Original_tse == null)) {
                throw new global::System.ArgumentNullException("Original_tse");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_tse));
            }
            if ((Original_Color16 == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_Color16));
            }
            this.Adapter.DeleteCommand.Parameters[27].Value = ((long)(Original_overlap));
            this.Adapter.DeleteCommand.Parameters[28].Value = ((long)(Original_weekday));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long SimpleMultiId, 
                    string Id, 
                    long idno, 
                    long chno, 
                    string Subject, 
                    string Name, 
                    global::System.Nullable<long> gstreeAssetGroupId, 
                    string stm, 
                    string etm, 
                    string duration, 
                    long week, 
                    long day1, 
                    long day2, 
                    long day3, 
                    long day4, 
                    long day5, 
                    long day6, 
                    long day7, 
                    string tss, 
                    string tse, 
                    string Color16, 
                    long overlap, 
                    long weekday) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(SimpleMultiId));
            if ((Id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Id));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(idno));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(chno));
            if ((Subject == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((stm == null)) {
                throw new global::System.ArgumentNullException("stm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(stm));
            }
            if ((etm == null)) {
                throw new global::System.ArgumentNullException("etm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(etm));
            }
            if ((duration == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(duration));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((long)(week));
            this.Adapter.InsertCommand.Parameters[11].Value = ((long)(day1));
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(day2));
            this.Adapter.InsertCommand.Parameters[13].Value = ((long)(day3));
            this.Adapter.InsertCommand.Parameters[14].Value = ((long)(day4));
            this.Adapter.InsertCommand.Parameters[15].Value = ((long)(day5));
            this.Adapter.InsertCommand.Parameters[16].Value = ((long)(day6));
            this.Adapter.InsertCommand.Parameters[17].Value = ((long)(day7));
            if ((tss == null)) {
                throw new global::System.ArgumentNullException("tss");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(tss));
            }
            if ((tse == null)) {
                throw new global::System.ArgumentNullException("tse");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(tse));
            }
            if ((Color16 == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Color16));
            }
            this.Adapter.InsertCommand.Parameters[21].Value = ((long)(overlap));
            this.Adapter.InsertCommand.Parameters[22].Value = ((long)(weekday));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long SimpleMultiId, 
                    string Id, 
                    long idno, 
                    long chno, 
                    string Subject, 
                    string Name, 
                    global::System.Nullable<long> gstreeAssetGroupId, 
                    string stm, 
                    string etm, 
                    string duration, 
                    long week, 
                    long day1, 
                    long day2, 
                    long day3, 
                    long day4, 
                    long day5, 
                    long day6, 
                    long day7, 
                    string tss, 
                    string tse, 
                    string Color16, 
                    long overlap, 
                    long weekday, 
                    long Original_SimpleMultiId, 
                    string Original_Id, 
                    long Original_idno, 
                    long Original_chno, 
                    string Original_Subject, 
                    string Original_Name, 
                    global::System.Nullable<long> Original_gstreeAssetGroupId, 
                    string Original_stm, 
                    string Original_etm, 
                    string Original_duration, 
                    long Original_week, 
                    long Original_day1, 
                    long Original_day2, 
                    long Original_day3, 
                    long Original_day4, 
                    long Original_day5, 
                    long Original_day6, 
                    long Original_day7, 
                    string Original_tss, 
                    string Original_tse, 
                    string Original_Color16, 
                    long Original_overlap, 
                    long Original_weekday) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(SimpleMultiId));
            if ((Id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Id));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(idno));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(chno));
            if ((Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((stm == null)) {
                throw new global::System.ArgumentNullException("stm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(stm));
            }
            if ((etm == null)) {
                throw new global::System.ArgumentNullException("etm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(etm));
            }
            if ((duration == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(duration));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(week));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(day1));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(day2));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(day3));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(day4));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(day5));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(day6));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(day7));
            if ((tss == null)) {
                throw new global::System.ArgumentNullException("tss");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(tss));
            }
            if ((tse == null)) {
                throw new global::System.ArgumentNullException("tse");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(tse));
            }
            if ((Color16 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Color16));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(overlap));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(weekday));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_SimpleMultiId));
            if ((Original_Id == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Id));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(Original_idno));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(Original_chno));
            if ((Original_Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_Subject));
            }
            if ((Original_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Name));
            }
            if ((Original_gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(Original_gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_stm == null)) {
                throw new global::System.ArgumentNullException("Original_stm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_stm));
            }
            if ((Original_etm == null)) {
                throw new global::System.ArgumentNullException("Original_etm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_etm));
            }
            if ((Original_duration == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_duration));
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(Original_week));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(Original_day1));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(Original_day2));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((long)(Original_day3));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((long)(Original_day4));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((long)(Original_day5));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((long)(Original_day6));
            this.Adapter.UpdateCommand.Parameters[45].Value = ((long)(Original_day7));
            if ((Original_tss == null)) {
                throw new global::System.ArgumentNullException("Original_tss");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_tss));
            }
            if ((Original_tse == null)) {
                throw new global::System.ArgumentNullException("Original_tse");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_tse));
            }
            if ((Original_Color16 == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_Color16));
            }
            this.Adapter.UpdateCommand.Parameters[50].Value = ((long)(Original_overlap));
            this.Adapter.UpdateCommand.Parameters[51].Value = ((long)(Original_weekday));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Id, 
                    long idno, 
                    long chno, 
                    string Subject, 
                    string Name, 
                    global::System.Nullable<long> gstreeAssetGroupId, 
                    string stm, 
                    string etm, 
                    string duration, 
                    long week, 
                    long day1, 
                    long day2, 
                    long day3, 
                    long day4, 
                    long day5, 
                    long day6, 
                    long day7, 
                    string tss, 
                    string tse, 
                    string Color16, 
                    long overlap, 
                    long weekday, 
                    long Original_SimpleMultiId, 
                    string Original_Id, 
                    long Original_idno, 
                    long Original_chno, 
                    string Original_Subject, 
                    string Original_Name, 
                    global::System.Nullable<long> Original_gstreeAssetGroupId, 
                    string Original_stm, 
                    string Original_etm, 
                    string Original_duration, 
                    long Original_week, 
                    long Original_day1, 
                    long Original_day2, 
                    long Original_day3, 
                    long Original_day4, 
                    long Original_day5, 
                    long Original_day6, 
                    long Original_day7, 
                    string Original_tss, 
                    string Original_tse, 
                    string Original_Color16, 
                    long Original_overlap, 
                    long Original_weekday) {
            return this.Update(Original_SimpleMultiId, Id, idno, chno, Subject, Name, gstreeAssetGroupId, stm, etm, duration, week, day1, day2, day3, day4, day5, day6, day7, tss, tse, Color16, overlap, weekday, Original_SimpleMultiId, Original_Id, Original_idno, Original_chno, Original_Subject, Original_Name, Original_gstreeAssetGroupId, Original_stm, Original_etm, Original_duration, Original_week, Original_day1, Original_day2, Original_day3, Original_day4, Original_day5, Original_day6, Original_day7, Original_tss, Original_tse, Original_Color16, Original_overlap, Original_weekday);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SimplepaTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public SimplepaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Simplepa";
            tableMapping.ColumnMappings.Add("SimplePAId", "SimplePAId");
            tableMapping.ColumnMappings.Add("TileWidth", "TileWidth");
            tableMapping.ColumnMappings.Add("MapX", "MapX");
            tableMapping.ColumnMappings.Add("MapY", "MapY");
            tableMapping.ColumnMappings.Add("Zoom", "Zoom");
            tableMapping.ColumnMappings.Add("debug", "debug");
            tableMapping.ColumnMappings.Add("SpeakerIconSize", "SpeakerIconSize");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("EMServerIP", "EMServerIP");
            tableMapping.ColumnMappings.Add("ServerIP", "ServerIP");
            tableMapping.ColumnMappings.Add("ServerPort", "ServerPort");
            tableMapping.ColumnMappings.Add("Reserved1", "Reserved1");
            tableMapping.ColumnMappings.Add("Reserved2", "Reserved2");
            tableMapping.ColumnMappings.Add("Reserved3", "Reserved3");
            tableMapping.ColumnMappings.Add("Reserved4", "Reserved4");
            tableMapping.ColumnMappings.Add("Reserved5", "Reserved5");
            tableMapping.ColumnMappings.Add("Reserved6", "Reserved6");
            tableMapping.ColumnMappings.Add("Reserved7", "Reserved7");
            tableMapping.ColumnMappings.Add("Reserved8", "Reserved8");
            tableMapping.ColumnMappings.Add("Reserved9", "Reserved9");
            tableMapping.ColumnMappings.Add("Reserved10", "Reserved10");
            tableMapping.ColumnMappings.Add("Reserved11", "Reserved11");
            tableMapping.ColumnMappings.Add("GPIOPort", "GPIOPort");
            tableMapping.ColumnMappings.Add("Rport", "Rport");
            tableMapping.ColumnMappings.Add("Reserved14", "Reserved14");
            tableMapping.ColumnMappings.Add("Reserved15", "Reserved15");
            tableMapping.ColumnMappings.Add("Reserved16", "Reserved16");
            tableMapping.ColumnMappings.Add("Jigsangbalhwa", "Jigsangbalhwa");
            tableMapping.ColumnMappings.Add("SpeakerTimer", "SpeakerTimer");
            tableMapping.ColumnMappings.Add("inputvolume", "inputvolume");
            tableMapping.ColumnMappings.Add("outputvolume", "outputvolume");
            tableMapping.ColumnMappings.Add("disp", "disp");
            tableMapping.ColumnMappings.Add("Multi_Ch", "Multi_Ch");
            tableMapping.ColumnMappings.Add("SoundDeviceNum", "SoundDeviceNum");
            tableMapping.ColumnMappings.Add("SoundDeviceName", "SoundDeviceName");
            tableMapping.ColumnMappings.Add("Reserved17", "Reserved17");
            tableMapping.ColumnMappings.Add("scalelength", "scalelength");
            tableMapping.ColumnMappings.Add("length", "length");
            tableMapping.ColumnMappings.Add("scale", "scale");
            tableMapping.ColumnMappings.Add("noise1", "noise1");
            tableMapping.ColumnMappings.Add("noise2", "noise2");
            tableMapping.ColumnMappings.Add("dsp_vol", "dsp_vol");
            tableMapping.ColumnMappings.Add("dsp_vol_em", "dsp_vol_em");
            tableMapping.ColumnMappings.Add("sms_server", "sms_server");
            tableMapping.ColumnMappings.Add("sms_id", "sms_id");
            tableMapping.ColumnMappings.Add("sms_pw", "sms_pw");
            tableMapping.ColumnMappings.Add("sms_rcvno", "sms_rcvno");
            tableMapping.ColumnMappings.Add("Pport", "Pport");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Simplepa\" WHERE ((\"SimplePAId\" = :Original_SimplePAId) AND (\"" +
                "TileWidth\" = :Original_TileWidth) AND (\"MapX\" = :Original_MapX) AND (\"MapY\" = :O" +
                "riginal_MapY) AND (\"Zoom\" = :Original_Zoom) AND (\"debug\" = :Original_debug) AND " +
                "(\"SpeakerIconSize\" = :Original_SpeakerIconSize) AND ((:IsNull_UserName = 1 AND \"" +
                "UserName\" IS NULL) OR (\"UserName\" = :Original_UserName)) AND ((:IsNull_EMServerI" +
                "P = 1 AND \"EMServerIP\" IS NULL) OR (\"EMServerIP\" = :Original_EMServerIP)) AND ((" +
                ":IsNull_ServerIP = 1 AND \"ServerIP\" IS NULL) OR (\"ServerIP\" = :Original_ServerIP" +
                ")) AND ((:IsNull_ServerPort = 1 AND \"ServerPort\" IS NULL) OR (\"ServerPort\" = :Or" +
                "iginal_ServerPort)) AND ((:IsNull_Reserved1 = 1 AND \"Reserved1\" IS NULL) OR (\"Re" +
                "served1\" = :Original_Reserved1)) AND ((:IsNull_Reserved2 = 1 AND \"Reserved2\" IS " +
                "NULL) OR (\"Reserved2\" = :Original_Reserved2)) AND ((:IsNull_Reserved3 = 1 AND \"R" +
                "eserved3\" IS NULL) OR (\"Reserved3\" = :Original_Reserved3)) AND ((:IsNull_Reserve" +
                "d4 = 1 AND \"Reserved4\" IS NULL) OR (\"Reserved4\" = :Original_Reserved4)) AND ((:I" +
                "sNull_Reserved5 = 1 AND \"Reserved5\" IS NULL) OR (\"Reserved5\" = :Original_Reserve" +
                "d5)) AND ((:IsNull_Reserved6 = 1 AND \"Reserved6\" IS NULL) OR (\"Reserved6\" = :Ori" +
                "ginal_Reserved6)) AND ((:IsNull_Reserved7 = 1 AND \"Reserved7\" IS NULL) OR (\"Rese" +
                "rved7\" = :Original_Reserved7)) AND ((:IsNull_Reserved8 = 1 AND \"Reserved8\" IS NU" +
                "LL) OR (\"Reserved8\" = :Original_Reserved8)) AND ((:IsNull_Reserved9 = 1 AND \"Res" +
                "erved9\" IS NULL) OR (\"Reserved9\" = :Original_Reserved9)) AND ((:IsNull_Reserved1" +
                "0 = 1 AND \"Reserved10\" IS NULL) OR (\"Reserved10\" = :Original_Reserved10)) AND ((" +
                ":IsNull_Reserved11 = 1 AND \"Reserved11\" IS NULL) OR (\"Reserved11\" = :Original_Re" +
                "served11)) AND ((:IsNull_GPIOPort = 1 AND \"GPIOPort\" IS NULL) OR (\"GPIOPort\" = :" +
                "Original_GPIOPort)) AND ((:IsNull_Rport = 1 AND \"Rport\" IS NULL) OR (\"Rport\" = :" +
                "Original_Rport)) AND ((:IsNull_Reserved14 = 1 AND \"Reserved14\" IS NULL) OR (\"Res" +
                "erved14\" = :Original_Reserved14)) AND ((:IsNull_Reserved15 = 1 AND \"Reserved15\" " +
                "IS NULL) OR (\"Reserved15\" = :Original_Reserved15)) AND ((:IsNull_Reserved16 = 1 " +
                "AND \"Reserved16\" IS NULL) OR (\"Reserved16\" = :Original_Reserved16)) AND (\"Jigsan" +
                "gbalhwa\" = :Original_Jigsangbalhwa) AND (\"SpeakerTimer\" = :Original_SpeakerTimer" +
                ") AND (\"inputvolume\" = :Original_inputvolume) AND (\"outputvolume\" = :Original_ou" +
                "tputvolume) AND (\"disp\" = :Original_disp) AND (\"Multi_Ch\" = :Original_Multi_Ch) " +
                "AND (\"SoundDeviceNum\" = :Original_SoundDeviceNum) AND ((:IsNull_SoundDeviceName " +
                "= 1 AND \"SoundDeviceName\" IS NULL) OR (\"SoundDeviceName\" = :Original_SoundDevice" +
                "Name)) AND (\"Reserved17\" = :Original_Reserved17) AND (\"scalelength\" = :Original_" +
                "scalelength) AND (\"length\" = :Original_length) AND (\"scale\" = :Original_scale) A" +
                "ND (\"noise1\" = :Original_noise1) AND (\"noise2\" = :Original_noise2) AND (\"dsp_vol" +
                "\" = :Original_dsp_vol) AND (\"dsp_vol_em\" = :Original_dsp_vol_em) AND ((:IsNull_s" +
                "ms_server = 1 AND \"sms_server\" IS NULL) OR (\"sms_server\" = :Original_sms_server)" +
                ") AND ((:IsNull_sms_id = 1 AND \"sms_id\" IS NULL) OR (\"sms_id\" = :Original_sms_id" +
                ")) AND ((:IsNull_sms_pw = 1 AND \"sms_pw\" IS NULL) OR (\"sms_pw\" = :Original_sms_p" +
                "w)) AND ((:IsNull_sms_rcvno = 1 AND \"sms_rcvno\" IS NULL) OR (\"sms_rcvno\" = :Orig" +
                "inal_sms_rcvno)) AND (\"Pport\" = :Original_Pport))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_TileWidth";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "TileWidth";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MapX";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MapY";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Zoom";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Zoom";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_debug";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "debug";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerIconSize";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerIconSize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_UserName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_EMServerIP";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_EMServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ServerIP";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ServerPort";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ServerPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved1";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved2";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved3";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved3";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved4";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved4";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved5";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved5";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved6";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved6";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved7";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved7";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved8";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved8";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved9";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved9";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved10";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved10";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved11";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved11";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_GPIOPort";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_GPIOPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Rport";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Rport";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved14";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved14";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved14";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved14";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved15";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved15";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved16";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Jigsangbalhwa";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Jigsangbalhwa";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerTimer";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerTimer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_inputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "inputvolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_outputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "outputvolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_disp";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "disp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Multi_Ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Multi_Ch";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SoundDeviceNum";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceNum";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SoundDeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SoundDeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved17";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Reserved17";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_scalelength";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scalelength";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_length";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "length";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_scale";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_noise1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_noise2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_server";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_server";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_pw";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_pw";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_rcvno";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_rcvno";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Pport";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Pport";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""Simplepa"" (""SimplePAId"", ""TileWidth"", ""MapX"", ""MapY"", ""Zoom"", ""debug"", ""SpeakerIconSize"", ""UserName"", ""EMServerIP"", ""ServerIP"", ""ServerPort"", ""Reserved1"", ""Reserved2"", ""Reserved3"", ""Reserved4"", ""Reserved5"", ""Reserved6"", ""Reserved7"", ""Reserved8"", ""Reserved9"", ""Reserved10"", ""Reserved11"", ""GPIOPort"", ""Rport"", ""Reserved14"", ""Reserved15"", ""Reserved16"", ""Jigsangbalhwa"", ""SpeakerTimer"", ""inputvolume"", ""outputvolume"", ""disp"", ""Multi_Ch"", ""SoundDeviceNum"", ""SoundDeviceName"", ""Reserved17"", ""scalelength"", ""length"", ""scale"", ""noise1"", ""noise2"", ""dsp_vol"", ""dsp_vol_em"", ""sms_server"", ""sms_id"", ""sms_pw"", ""sms_rcvno"", ""Pport"") VALUES (:SimplePAId, :TileWidth, :MapX, :MapY, :Zoom, :debug, :SpeakerIconSize, :UserName, :EMServerIP, :ServerIP, :ServerPort, :Reserved1, :Reserved2, :Reserved3, :Reserved4, :Reserved5, :Reserved6, :Reserved7, :Reserved8, :Reserved9, :Reserved10, :Reserved11, :GPIOPort, :Rport, :Reserved14, :Reserved15, :Reserved16, :Jigsangbalhwa, :SpeakerTimer, :inputvolume, :outputvolume, :disp, :Multi_Ch, :SoundDeviceNum, :SoundDeviceName, :Reserved17, :scalelength, :length, :scale, :noise1, :noise2, :dsp_vol, :dsp_vol_em, :sms_server, :sms_id, :sms_pw, :sms_rcvno, :Pport)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "TileWidth";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "TileWidth";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapX";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapY";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Zoom";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Zoom";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "debug";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "debug";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerIconSize";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerIconSize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EMServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved3";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved4";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved5";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved6";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved7";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved8";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved9";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved10";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved11";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GPIOPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Rport";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved14";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved14";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved15";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Jigsangbalhwa";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Jigsangbalhwa";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerTimer";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerTimer";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "inputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "inputvolume";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "outputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "outputvolume";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "disp";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "disp";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Multi_Ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Multi_Ch";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceNum";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceNum";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved17";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Reserved17";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scalelength";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scalelength";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "length";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "length";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scale";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scale";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_server";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_pw";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_rcvno";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Pport";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Pport";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"Simplepa\" SET \"SimplePAId\" = :SimplePAId, \"TileWidth\" = :TileWidth" +
                ", \"MapX\" = :MapX, \"MapY\" = :MapY, \"Zoom\" = :Zoom, \"debug\" = :debug, \"SpeakerIcon" +
                "Size\" = :SpeakerIconSize, \"UserName\" = :UserName, \"EMServerIP\" = :EMServerIP, \"S" +
                "erverIP\" = :ServerIP, \"ServerPort\" = :ServerPort, \"Reserved1\" = :Reserved1, \"Res" +
                "erved2\" = :Reserved2, \"Reserved3\" = :Reserved3, \"Reserved4\" = :Reserved4, \"Reser" +
                "ved5\" = :Reserved5, \"Reserved6\" = :Reserved6, \"Reserved7\" = :Reserved7, \"Reserve" +
                "d8\" = :Reserved8, \"Reserved9\" = :Reserved9, \"Reserved10\" = :Reserved10, \"Reserve" +
                "d11\" = :Reserved11, \"GPIOPort\" = :GPIOPort, \"Rport\" = :Rport, \"Reserved14\" = :Re" +
                "served14, \"Reserved15\" = :Reserved15, \"Reserved16\" = :Reserved16, \"Jigsangbalhwa" +
                "\" = :Jigsangbalhwa, \"SpeakerTimer\" = :SpeakerTimer, \"inputvolume\" = :inputvolume" +
                ", \"outputvolume\" = :outputvolume, \"disp\" = :disp, \"Multi_Ch\" = :Multi_Ch, \"Sound" +
                "DeviceNum\" = :SoundDeviceNum, \"SoundDeviceName\" = :SoundDeviceName, \"Reserved17\"" +
                " = :Reserved17, \"scalelength\" = :scalelength, \"length\" = :length, \"scale\" = :sca" +
                "le, \"noise1\" = :noise1, \"noise2\" = :noise2, \"dsp_vol\" = :dsp_vol, \"dsp_vol_em\" =" +
                " :dsp_vol_em, \"sms_server\" = :sms_server, \"sms_id\" = :sms_id, \"sms_pw\" = :sms_pw" +
                ", \"sms_rcvno\" = :sms_rcvno, \"Pport\" = :Pport WHERE ((\"SimplePAId\" = :Original_Si" +
                "mplePAId) AND (\"TileWidth\" = :Original_TileWidth) AND (\"MapX\" = :Original_MapX) " +
                "AND (\"MapY\" = :Original_MapY) AND (\"Zoom\" = :Original_Zoom) AND (\"debug\" = :Orig" +
                "inal_debug) AND (\"SpeakerIconSize\" = :Original_SpeakerIconSize) AND ((:IsNull_Us" +
                "erName = 1 AND \"UserName\" IS NULL) OR (\"UserName\" = :Original_UserName)) AND ((:" +
                "IsNull_EMServerIP = 1 AND \"EMServerIP\" IS NULL) OR (\"EMServerIP\" = :Original_EMS" +
                "erverIP)) AND ((:IsNull_ServerIP = 1 AND \"ServerIP\" IS NULL) OR (\"ServerIP\" = :O" +
                "riginal_ServerIP)) AND ((:IsNull_ServerPort = 1 AND \"ServerPort\" IS NULL) OR (\"S" +
                "erverPort\" = :Original_ServerPort)) AND ((:IsNull_Reserved1 = 1 AND \"Reserved1\" " +
                "IS NULL) OR (\"Reserved1\" = :Original_Reserved1)) AND ((:IsNull_Reserved2 = 1 AND" +
                " \"Reserved2\" IS NULL) OR (\"Reserved2\" = :Original_Reserved2)) AND ((:IsNull_Rese" +
                "rved3 = 1 AND \"Reserved3\" IS NULL) OR (\"Reserved3\" = :Original_Reserved3)) AND (" +
                "(:IsNull_Reserved4 = 1 AND \"Reserved4\" IS NULL) OR (\"Reserved4\" = :Original_Rese" +
                "rved4)) AND ((:IsNull_Reserved5 = 1 AND \"Reserved5\" IS NULL) OR (\"Reserved5\" = :" +
                "Original_Reserved5)) AND ((:IsNull_Reserved6 = 1 AND \"Reserved6\" IS NULL) OR (\"R" +
                "eserved6\" = :Original_Reserved6)) AND ((:IsNull_Reserved7 = 1 AND \"Reserved7\" IS" +
                " NULL) OR (\"Reserved7\" = :Original_Reserved7)) AND ((:IsNull_Reserved8 = 1 AND \"" +
                "Reserved8\" IS NULL) OR (\"Reserved8\" = :Original_Reserved8)) AND ((:IsNull_Reserv" +
                "ed9 = 1 AND \"Reserved9\" IS NULL) OR (\"Reserved9\" = :Original_Reserved9)) AND ((:" +
                "IsNull_Reserved10 = 1 AND \"Reserved10\" IS NULL) OR (\"Reserved10\" = :Original_Res" +
                "erved10)) AND ((:IsNull_Reserved11 = 1 AND \"Reserved11\" IS NULL) OR (\"Reserved11" +
                "\" = :Original_Reserved11)) AND ((:IsNull_GPIOPort = 1 AND \"GPIOPort\" IS NULL) OR" +
                " (\"GPIOPort\" = :Original_GPIOPort)) AND ((:IsNull_Rport = 1 AND \"Rport\" IS NULL)" +
                " OR (\"Rport\" = :Original_Rport)) AND ((:IsNull_Reserved14 = 1 AND \"Reserved14\" I" +
                "S NULL) OR (\"Reserved14\" = :Original_Reserved14)) AND ((:IsNull_Reserved15 = 1 A" +
                "ND \"Reserved15\" IS NULL) OR (\"Reserved15\" = :Original_Reserved15)) AND ((:IsNull" +
                "_Reserved16 = 1 AND \"Reserved16\" IS NULL) OR (\"Reserved16\" = :Original_Reserved1" +
                "6)) AND (\"Jigsangbalhwa\" = :Original_Jigsangbalhwa) AND (\"SpeakerTimer\" = :Origi" +
                "nal_SpeakerTimer) AND (\"inputvolume\" = :Original_inputvolume) AND (\"outputvolume" +
                "\" = :Original_outputvolume) AND (\"disp\" = :Original_disp) AND (\"Multi_Ch\" = :Ori" +
                "ginal_Multi_Ch) AND (\"SoundDeviceNum\" = :Original_SoundDeviceNum) AND ((:IsNull_" +
                "SoundDeviceName = 1 AND \"SoundDeviceName\" IS NULL) OR (\"SoundDeviceName\" = :Orig" +
                "inal_SoundDeviceName)) AND (\"Reserved17\" = :Original_Reserved17) AND (\"scaleleng" +
                "th\" = :Original_scalelength) AND (\"length\" = :Original_length) AND (\"scale\" = :O" +
                "riginal_scale) AND (\"noise1\" = :Original_noise1) AND (\"noise2\" = :Original_noise" +
                "2) AND (\"dsp_vol\" = :Original_dsp_vol) AND (\"dsp_vol_em\" = :Original_dsp_vol_em)" +
                " AND ((:IsNull_sms_server = 1 AND \"sms_server\" IS NULL) OR (\"sms_server\" = :Orig" +
                "inal_sms_server)) AND ((:IsNull_sms_id = 1 AND \"sms_id\" IS NULL) OR (\"sms_id\" = " +
                ":Original_sms_id)) AND ((:IsNull_sms_pw = 1 AND \"sms_pw\" IS NULL) OR (\"sms_pw\" =" +
                " :Original_sms_pw)) AND ((:IsNull_sms_rcvno = 1 AND \"sms_rcvno\" IS NULL) OR (\"sm" +
                "s_rcvno\" = :Original_sms_rcvno)) AND (\"Pport\" = :Original_Pport))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "TileWidth";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "TileWidth";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapX";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapY";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Zoom";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Zoom";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "debug";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "debug";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerIconSize";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerIconSize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EMServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved3";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved4";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved5";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved6";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved7";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved8";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved9";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved10";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved11";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GPIOPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Rport";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved14";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved14";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved15";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Jigsangbalhwa";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Jigsangbalhwa";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerTimer";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerTimer";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "inputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "inputvolume";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "outputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "outputvolume";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "disp";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "disp";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Multi_Ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Multi_Ch";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceNum";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceNum";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved17";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Reserved17";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scalelength";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scalelength";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "length";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "length";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scale";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scale";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_server";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_pw";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_rcvno";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Pport";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Pport";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_TileWidth";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "TileWidth";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MapX";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MapY";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Zoom";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Zoom";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_debug";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "debug";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerIconSize";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerIconSize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_UserName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_EMServerIP";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_EMServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ServerIP";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_ServerPort";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_ServerPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved1";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved2";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved3";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved3";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved4";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved4";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved5";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved5";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved6";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved6";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved7";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved7";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved8";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved8";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved9";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved9";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved10";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved10";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved11";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved11";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_GPIOPort";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_GPIOPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Rport";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Rport";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved14";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved14";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved14";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved14";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved15";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved15";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_Reserved16";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Jigsangbalhwa";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Jigsangbalhwa";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SpeakerTimer";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerTimer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_inputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "inputvolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_outputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "outputvolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_disp";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "disp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Multi_Ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Multi_Ch";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SoundDeviceNum";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceNum";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SoundDeviceName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SoundDeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Reserved17";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Reserved17";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_scalelength";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scalelength";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_length";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "length";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_scale";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_noise1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_noise2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_server";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_server";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_pw";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_pw";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_sms_rcvno";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_sms_rcvno";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_Pport";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Pport";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT SimplePAId, TileWidth, MapX, MapY, Zoom, debug, SpeakerIconSize, UserName, EMServerIP, ServerIP, ServerPort, Reserved1, Reserved2, Reserved3, Reserved4, Reserved5, Reserved6, Reserved7, Reserved8, Reserved9, Reserved10, Reserved11, GPIOPort, Rport, Reserved14, Reserved15, Reserved16, Jigsangbalhwa, SpeakerTimer, inputvolume, outputvolume, disp, Multi_Ch, SoundDeviceNum, SoundDeviceName, Reserved17, scalelength, length, ""scale"", noise1, noise2, dsp_vol, dsp_vol_em, sms_server, sms_id, sms_pw, sms_rcvno, Pport FROM ""main"".Simplepa";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SimplepaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SimplepaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SimplepaDataTable dataTable = new DataSet1.SimplepaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SimplepaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Simplepa");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_SimplePAId, 
                    long Original_TileWidth, 
                    long Original_MapX, 
                    long Original_MapY, 
                    double Original_Zoom, 
                    long Original_debug, 
                    long Original_SpeakerIconSize, 
                    string Original_UserName, 
                    string Original_EMServerIP, 
                    string Original_ServerIP, 
                    string Original_ServerPort, 
                    string Original_Reserved1, 
                    string Original_Reserved2, 
                    string Original_Reserved3, 
                    string Original_Reserved4, 
                    string Original_Reserved5, 
                    string Original_Reserved6, 
                    string Original_Reserved7, 
                    string Original_Reserved8, 
                    string Original_Reserved9, 
                    string Original_Reserved10, 
                    string Original_Reserved11, 
                    string Original_GPIOPort, 
                    string Original_Rport, 
                    string Original_Reserved14, 
                    string Original_Reserved15, 
                    string Original_Reserved16, 
                    long Original_Jigsangbalhwa, 
                    long Original_SpeakerTimer, 
                    double Original_inputvolume, 
                    double Original_outputvolume, 
                    long Original_disp, 
                    long Original_Multi_Ch, 
                    long Original_SoundDeviceNum, 
                    string Original_SoundDeviceName, 
                    long Original_Reserved17, 
                    double Original_scalelength, 
                    double Original_length, 
                    double Original_scale, 
                    long Original_noise1, 
                    long Original_noise2, 
                    long Original_dsp_vol, 
                    long Original_dsp_vol_em, 
                    string Original_sms_server, 
                    string Original_sms_id, 
                    string Original_sms_pw, 
                    string Original_sms_rcvno, 
                    long Original_Pport) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SimplePAId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_TileWidth));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_MapX));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_MapY));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_Zoom));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_debug));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_SpeakerIconSize));
            if ((Original_UserName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_UserName));
            }
            if ((Original_EMServerIP == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_EMServerIP));
            }
            if ((Original_ServerIP == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ServerIP));
            }
            if ((Original_ServerPort == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ServerPort));
            }
            if ((Original_Reserved1 == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Reserved1));
            }
            if ((Original_Reserved2 == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Reserved2));
            }
            if ((Original_Reserved3 == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Reserved3));
            }
            if ((Original_Reserved4 == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Reserved4));
            }
            if ((Original_Reserved5 == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_Reserved5));
            }
            if ((Original_Reserved6 == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_Reserved6));
            }
            if ((Original_Reserved7 == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_Reserved7));
            }
            if ((Original_Reserved8 == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_Reserved8));
            }
            if ((Original_Reserved9 == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_Reserved9));
            }
            if ((Original_Reserved10 == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_Reserved10));
            }
            if ((Original_Reserved11 == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_Reserved11));
            }
            if ((Original_GPIOPort == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_GPIOPort));
            }
            if ((Original_Rport == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_Rport));
            }
            if ((Original_Reserved14 == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_Reserved14));
            }
            if ((Original_Reserved15 == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_Reserved15));
            }
            if ((Original_Reserved16 == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_Reserved16));
            }
            this.Adapter.DeleteCommand.Parameters[47].Value = ((long)(Original_Jigsangbalhwa));
            this.Adapter.DeleteCommand.Parameters[48].Value = ((long)(Original_SpeakerTimer));
            this.Adapter.DeleteCommand.Parameters[49].Value = ((double)(Original_inputvolume));
            this.Adapter.DeleteCommand.Parameters[50].Value = ((double)(Original_outputvolume));
            this.Adapter.DeleteCommand.Parameters[51].Value = ((long)(Original_disp));
            this.Adapter.DeleteCommand.Parameters[52].Value = ((long)(Original_Multi_Ch));
            this.Adapter.DeleteCommand.Parameters[53].Value = ((long)(Original_SoundDeviceNum));
            if ((Original_SoundDeviceName == null)) {
                this.Adapter.DeleteCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[55].Value = ((string)(Original_SoundDeviceName));
            }
            this.Adapter.DeleteCommand.Parameters[56].Value = ((long)(Original_Reserved17));
            this.Adapter.DeleteCommand.Parameters[57].Value = ((double)(Original_scalelength));
            this.Adapter.DeleteCommand.Parameters[58].Value = ((double)(Original_length));
            this.Adapter.DeleteCommand.Parameters[59].Value = ((double)(Original_scale));
            this.Adapter.DeleteCommand.Parameters[60].Value = ((long)(Original_noise1));
            this.Adapter.DeleteCommand.Parameters[61].Value = ((long)(Original_noise2));
            this.Adapter.DeleteCommand.Parameters[62].Value = ((long)(Original_dsp_vol));
            this.Adapter.DeleteCommand.Parameters[63].Value = ((long)(Original_dsp_vol_em));
            if ((Original_sms_server == null)) {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[65].Value = ((string)(Original_sms_server));
            }
            if ((Original_sms_id == null)) {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[67].Value = ((string)(Original_sms_id));
            }
            if ((Original_sms_pw == null)) {
                this.Adapter.DeleteCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[69].Value = ((string)(Original_sms_pw));
            }
            if ((Original_sms_rcvno == null)) {
                this.Adapter.DeleteCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[71].Value = ((string)(Original_sms_rcvno));
            }
            this.Adapter.DeleteCommand.Parameters[72].Value = ((long)(Original_Pport));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long SimplePAId, 
                    long TileWidth, 
                    long MapX, 
                    long MapY, 
                    double Zoom, 
                    long debug, 
                    long SpeakerIconSize, 
                    string UserName, 
                    string EMServerIP, 
                    string ServerIP, 
                    string ServerPort, 
                    string Reserved1, 
                    string Reserved2, 
                    string Reserved3, 
                    string Reserved4, 
                    string Reserved5, 
                    string Reserved6, 
                    string Reserved7, 
                    string Reserved8, 
                    string Reserved9, 
                    string Reserved10, 
                    string Reserved11, 
                    string GPIOPort, 
                    string Rport, 
                    string Reserved14, 
                    string Reserved15, 
                    string Reserved16, 
                    long Jigsangbalhwa, 
                    long SpeakerTimer, 
                    double inputvolume, 
                    double outputvolume, 
                    long disp, 
                    long Multi_Ch, 
                    long SoundDeviceNum, 
                    string SoundDeviceName, 
                    long Reserved17, 
                    double scalelength, 
                    double length, 
                    double scale, 
                    long noise1, 
                    long noise2, 
                    long dsp_vol, 
                    long dsp_vol_em, 
                    string sms_server, 
                    string sms_id, 
                    string sms_pw, 
                    string sms_rcvno, 
                    long Pport) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(SimplePAId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(TileWidth));
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(MapX));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(MapY));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Zoom));
            this.Adapter.InsertCommand.Parameters[5].Value = ((long)(debug));
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(SpeakerIconSize));
            if ((UserName == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(UserName));
            }
            if ((EMServerIP == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(EMServerIP));
            }
            if ((ServerIP == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ServerIP));
            }
            if ((ServerPort == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ServerPort));
            }
            if ((Reserved1 == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Reserved1));
            }
            if ((Reserved2 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Reserved2));
            }
            if ((Reserved3 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Reserved3));
            }
            if ((Reserved4 == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Reserved4));
            }
            if ((Reserved5 == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Reserved5));
            }
            if ((Reserved6 == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Reserved6));
            }
            if ((Reserved7 == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Reserved7));
            }
            if ((Reserved8 == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Reserved8));
            }
            if ((Reserved9 == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Reserved9));
            }
            if ((Reserved10 == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Reserved10));
            }
            if ((Reserved11 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Reserved11));
            }
            if ((GPIOPort == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(GPIOPort));
            }
            if ((Rport == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Rport));
            }
            if ((Reserved14 == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(Reserved14));
            }
            if ((Reserved15 == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(Reserved15));
            }
            if ((Reserved16 == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(Reserved16));
            }
            this.Adapter.InsertCommand.Parameters[27].Value = ((long)(Jigsangbalhwa));
            this.Adapter.InsertCommand.Parameters[28].Value = ((long)(SpeakerTimer));
            this.Adapter.InsertCommand.Parameters[29].Value = ((double)(inputvolume));
            this.Adapter.InsertCommand.Parameters[30].Value = ((double)(outputvolume));
            this.Adapter.InsertCommand.Parameters[31].Value = ((long)(disp));
            this.Adapter.InsertCommand.Parameters[32].Value = ((long)(Multi_Ch));
            this.Adapter.InsertCommand.Parameters[33].Value = ((long)(SoundDeviceNum));
            if ((SoundDeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(SoundDeviceName));
            }
            this.Adapter.InsertCommand.Parameters[35].Value = ((long)(Reserved17));
            this.Adapter.InsertCommand.Parameters[36].Value = ((double)(scalelength));
            this.Adapter.InsertCommand.Parameters[37].Value = ((double)(length));
            this.Adapter.InsertCommand.Parameters[38].Value = ((double)(scale));
            this.Adapter.InsertCommand.Parameters[39].Value = ((long)(noise1));
            this.Adapter.InsertCommand.Parameters[40].Value = ((long)(noise2));
            this.Adapter.InsertCommand.Parameters[41].Value = ((long)(dsp_vol));
            this.Adapter.InsertCommand.Parameters[42].Value = ((long)(dsp_vol_em));
            if ((sms_server == null)) {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(sms_server));
            }
            if ((sms_id == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(sms_id));
            }
            if ((sms_pw == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(sms_pw));
            }
            if ((sms_rcvno == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(sms_rcvno));
            }
            this.Adapter.InsertCommand.Parameters[47].Value = ((long)(Pport));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long SimplePAId, 
                    long TileWidth, 
                    long MapX, 
                    long MapY, 
                    double Zoom, 
                    long debug, 
                    long SpeakerIconSize, 
                    string UserName, 
                    string EMServerIP, 
                    string ServerIP, 
                    string ServerPort, 
                    string Reserved1, 
                    string Reserved2, 
                    string Reserved3, 
                    string Reserved4, 
                    string Reserved5, 
                    string Reserved6, 
                    string Reserved7, 
                    string Reserved8, 
                    string Reserved9, 
                    string Reserved10, 
                    string Reserved11, 
                    string GPIOPort, 
                    string Rport, 
                    string Reserved14, 
                    string Reserved15, 
                    string Reserved16, 
                    long Jigsangbalhwa, 
                    long SpeakerTimer, 
                    double inputvolume, 
                    double outputvolume, 
                    long disp, 
                    long Multi_Ch, 
                    long SoundDeviceNum, 
                    string SoundDeviceName, 
                    long Reserved17, 
                    double scalelength, 
                    double length, 
                    double scale, 
                    long noise1, 
                    long noise2, 
                    long dsp_vol, 
                    long dsp_vol_em, 
                    string sms_server, 
                    string sms_id, 
                    string sms_pw, 
                    string sms_rcvno, 
                    long Pport, 
                    long Original_SimplePAId, 
                    long Original_TileWidth, 
                    long Original_MapX, 
                    long Original_MapY, 
                    double Original_Zoom, 
                    long Original_debug, 
                    long Original_SpeakerIconSize, 
                    string Original_UserName, 
                    string Original_EMServerIP, 
                    string Original_ServerIP, 
                    string Original_ServerPort, 
                    string Original_Reserved1, 
                    string Original_Reserved2, 
                    string Original_Reserved3, 
                    string Original_Reserved4, 
                    string Original_Reserved5, 
                    string Original_Reserved6, 
                    string Original_Reserved7, 
                    string Original_Reserved8, 
                    string Original_Reserved9, 
                    string Original_Reserved10, 
                    string Original_Reserved11, 
                    string Original_GPIOPort, 
                    string Original_Rport, 
                    string Original_Reserved14, 
                    string Original_Reserved15, 
                    string Original_Reserved16, 
                    long Original_Jigsangbalhwa, 
                    long Original_SpeakerTimer, 
                    double Original_inputvolume, 
                    double Original_outputvolume, 
                    long Original_disp, 
                    long Original_Multi_Ch, 
                    long Original_SoundDeviceNum, 
                    string Original_SoundDeviceName, 
                    long Original_Reserved17, 
                    double Original_scalelength, 
                    double Original_length, 
                    double Original_scale, 
                    long Original_noise1, 
                    long Original_noise2, 
                    long Original_dsp_vol, 
                    long Original_dsp_vol_em, 
                    string Original_sms_server, 
                    string Original_sms_id, 
                    string Original_sms_pw, 
                    string Original_sms_rcvno, 
                    long Original_Pport) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(SimplePAId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(TileWidth));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(MapX));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(MapY));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Zoom));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(debug));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(SpeakerIconSize));
            if ((UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(UserName));
            }
            if ((EMServerIP == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(EMServerIP));
            }
            if ((ServerIP == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ServerIP));
            }
            if ((ServerPort == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ServerPort));
            }
            if ((Reserved1 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Reserved1));
            }
            if ((Reserved2 == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Reserved2));
            }
            if ((Reserved3 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Reserved3));
            }
            if ((Reserved4 == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Reserved4));
            }
            if ((Reserved5 == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Reserved5));
            }
            if ((Reserved6 == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Reserved6));
            }
            if ((Reserved7 == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Reserved7));
            }
            if ((Reserved8 == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Reserved8));
            }
            if ((Reserved9 == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Reserved9));
            }
            if ((Reserved10 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Reserved10));
            }
            if ((Reserved11 == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Reserved11));
            }
            if ((GPIOPort == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(GPIOPort));
            }
            if ((Rport == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Rport));
            }
            if ((Reserved14 == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Reserved14));
            }
            if ((Reserved15 == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Reserved15));
            }
            if ((Reserved16 == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Reserved16));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(Jigsangbalhwa));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(SpeakerTimer));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(inputvolume));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(outputvolume));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((long)(disp));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((long)(Multi_Ch));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(SoundDeviceNum));
            if ((SoundDeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(SoundDeviceName));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((long)(Reserved17));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((double)(scalelength));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(length));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((double)(scale));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(noise1));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(noise2));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((long)(dsp_vol));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((long)(dsp_vol_em));
            if ((sms_server == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(sms_server));
            }
            if ((sms_id == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(sms_id));
            }
            if ((sms_pw == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(sms_pw));
            }
            if ((sms_rcvno == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(sms_rcvno));
            }
            this.Adapter.UpdateCommand.Parameters[47].Value = ((long)(Pport));
            this.Adapter.UpdateCommand.Parameters[48].Value = ((long)(Original_SimplePAId));
            this.Adapter.UpdateCommand.Parameters[49].Value = ((long)(Original_TileWidth));
            this.Adapter.UpdateCommand.Parameters[50].Value = ((long)(Original_MapX));
            this.Adapter.UpdateCommand.Parameters[51].Value = ((long)(Original_MapY));
            this.Adapter.UpdateCommand.Parameters[52].Value = ((double)(Original_Zoom));
            this.Adapter.UpdateCommand.Parameters[53].Value = ((long)(Original_debug));
            this.Adapter.UpdateCommand.Parameters[54].Value = ((long)(Original_SpeakerIconSize));
            if ((Original_UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_UserName));
            }
            if ((Original_EMServerIP == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_EMServerIP));
            }
            if ((Original_ServerIP == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_ServerIP));
            }
            if ((Original_ServerPort == null)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((string)(Original_ServerPort));
            }
            if ((Original_Reserved1 == null)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((string)(Original_Reserved1));
            }
            if ((Original_Reserved2 == null)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((string)(Original_Reserved2));
            }
            if ((Original_Reserved3 == null)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((string)(Original_Reserved3));
            }
            if ((Original_Reserved4 == null)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((string)(Original_Reserved4));
            }
            if ((Original_Reserved5 == null)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((string)(Original_Reserved5));
            }
            if ((Original_Reserved6 == null)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((string)(Original_Reserved6));
            }
            if ((Original_Reserved7 == null)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((string)(Original_Reserved7));
            }
            if ((Original_Reserved8 == null)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((string)(Original_Reserved8));
            }
            if ((Original_Reserved9 == null)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((string)(Original_Reserved9));
            }
            if ((Original_Reserved10 == null)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((string)(Original_Reserved10));
            }
            if ((Original_Reserved11 == null)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((string)(Original_Reserved11));
            }
            if ((Original_GPIOPort == null)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((string)(Original_GPIOPort));
            }
            if ((Original_Rport == null)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((string)(Original_Rport));
            }
            if ((Original_Reserved14 == null)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(Original_Reserved14));
            }
            if ((Original_Reserved15 == null)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[92].Value = ((string)(Original_Reserved15));
            }
            if ((Original_Reserved16 == null)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((string)(Original_Reserved16));
            }
            this.Adapter.UpdateCommand.Parameters[95].Value = ((long)(Original_Jigsangbalhwa));
            this.Adapter.UpdateCommand.Parameters[96].Value = ((long)(Original_SpeakerTimer));
            this.Adapter.UpdateCommand.Parameters[97].Value = ((double)(Original_inputvolume));
            this.Adapter.UpdateCommand.Parameters[98].Value = ((double)(Original_outputvolume));
            this.Adapter.UpdateCommand.Parameters[99].Value = ((long)(Original_disp));
            this.Adapter.UpdateCommand.Parameters[100].Value = ((long)(Original_Multi_Ch));
            this.Adapter.UpdateCommand.Parameters[101].Value = ((long)(Original_SoundDeviceNum));
            if ((Original_SoundDeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((string)(Original_SoundDeviceName));
            }
            this.Adapter.UpdateCommand.Parameters[104].Value = ((long)(Original_Reserved17));
            this.Adapter.UpdateCommand.Parameters[105].Value = ((double)(Original_scalelength));
            this.Adapter.UpdateCommand.Parameters[106].Value = ((double)(Original_length));
            this.Adapter.UpdateCommand.Parameters[107].Value = ((double)(Original_scale));
            this.Adapter.UpdateCommand.Parameters[108].Value = ((long)(Original_noise1));
            this.Adapter.UpdateCommand.Parameters[109].Value = ((long)(Original_noise2));
            this.Adapter.UpdateCommand.Parameters[110].Value = ((long)(Original_dsp_vol));
            this.Adapter.UpdateCommand.Parameters[111].Value = ((long)(Original_dsp_vol_em));
            if ((Original_sms_server == null)) {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[113].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[113].Value = ((string)(Original_sms_server));
            }
            if ((Original_sms_id == null)) {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[115].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[115].Value = ((string)(Original_sms_id));
            }
            if ((Original_sms_pw == null)) {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[117].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[117].Value = ((string)(Original_sms_pw));
            }
            if ((Original_sms_rcvno == null)) {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[119].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[119].Value = ((string)(Original_sms_rcvno));
            }
            this.Adapter.UpdateCommand.Parameters[120].Value = ((long)(Original_Pport));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long TileWidth, 
                    long MapX, 
                    long MapY, 
                    double Zoom, 
                    long debug, 
                    long SpeakerIconSize, 
                    string UserName, 
                    string EMServerIP, 
                    string ServerIP, 
                    string ServerPort, 
                    string Reserved1, 
                    string Reserved2, 
                    string Reserved3, 
                    string Reserved4, 
                    string Reserved5, 
                    string Reserved6, 
                    string Reserved7, 
                    string Reserved8, 
                    string Reserved9, 
                    string Reserved10, 
                    string Reserved11, 
                    string GPIOPort, 
                    string Rport, 
                    string Reserved14, 
                    string Reserved15, 
                    string Reserved16, 
                    long Jigsangbalhwa, 
                    long SpeakerTimer, 
                    double inputvolume, 
                    double outputvolume, 
                    long disp, 
                    long Multi_Ch, 
                    long SoundDeviceNum, 
                    string SoundDeviceName, 
                    long Reserved17, 
                    double scalelength, 
                    double length, 
                    double scale, 
                    long noise1, 
                    long noise2, 
                    long dsp_vol, 
                    long dsp_vol_em, 
                    string sms_server, 
                    string sms_id, 
                    string sms_pw, 
                    string sms_rcvno, 
                    long Pport, 
                    long Original_SimplePAId, 
                    long Original_TileWidth, 
                    long Original_MapX, 
                    long Original_MapY, 
                    double Original_Zoom, 
                    long Original_debug, 
                    long Original_SpeakerIconSize, 
                    string Original_UserName, 
                    string Original_EMServerIP, 
                    string Original_ServerIP, 
                    string Original_ServerPort, 
                    string Original_Reserved1, 
                    string Original_Reserved2, 
                    string Original_Reserved3, 
                    string Original_Reserved4, 
                    string Original_Reserved5, 
                    string Original_Reserved6, 
                    string Original_Reserved7, 
                    string Original_Reserved8, 
                    string Original_Reserved9, 
                    string Original_Reserved10, 
                    string Original_Reserved11, 
                    string Original_GPIOPort, 
                    string Original_Rport, 
                    string Original_Reserved14, 
                    string Original_Reserved15, 
                    string Original_Reserved16, 
                    long Original_Jigsangbalhwa, 
                    long Original_SpeakerTimer, 
                    double Original_inputvolume, 
                    double Original_outputvolume, 
                    long Original_disp, 
                    long Original_Multi_Ch, 
                    long Original_SoundDeviceNum, 
                    string Original_SoundDeviceName, 
                    long Original_Reserved17, 
                    double Original_scalelength, 
                    double Original_length, 
                    double Original_scale, 
                    long Original_noise1, 
                    long Original_noise2, 
                    long Original_dsp_vol, 
                    long Original_dsp_vol_em, 
                    string Original_sms_server, 
                    string Original_sms_id, 
                    string Original_sms_pw, 
                    string Original_sms_rcvno, 
                    long Original_Pport) {
            return this.Update(Original_SimplePAId, TileWidth, MapX, MapY, Zoom, debug, SpeakerIconSize, UserName, EMServerIP, ServerIP, ServerPort, Reserved1, Reserved2, Reserved3, Reserved4, Reserved5, Reserved6, Reserved7, Reserved8, Reserved9, Reserved10, Reserved11, GPIOPort, Rport, Reserved14, Reserved15, Reserved16, Jigsangbalhwa, SpeakerTimer, inputvolume, outputvolume, disp, Multi_Ch, SoundDeviceNum, SoundDeviceName, Reserved17, scalelength, length, scale, noise1, noise2, dsp_vol, dsp_vol_em, sms_server, sms_id, sms_pw, sms_rcvno, Pport, Original_SimplePAId, Original_TileWidth, Original_MapX, Original_MapY, Original_Zoom, Original_debug, Original_SpeakerIconSize, Original_UserName, Original_EMServerIP, Original_ServerIP, Original_ServerPort, Original_Reserved1, Original_Reserved2, Original_Reserved3, Original_Reserved4, Original_Reserved5, Original_Reserved6, Original_Reserved7, Original_Reserved8, Original_Reserved9, Original_Reserved10, Original_Reserved11, Original_GPIOPort, Original_Rport, Original_Reserved14, Original_Reserved15, Original_Reserved16, Original_Jigsangbalhwa, Original_SpeakerTimer, Original_inputvolume, Original_outputvolume, Original_disp, Original_Multi_Ch, Original_SoundDeviceNum, Original_SoundDeviceName, Original_Reserved17, Original_scalelength, Original_length, Original_scale, Original_noise1, Original_noise2, Original_dsp_vol, Original_dsp_vol_em, Original_sms_server, Original_sms_id, Original_sms_pw, Original_sms_rcvno, Original_Pport);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTreesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UserTreesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserTrees";
            tableMapping.ColumnMappings.Add("UserTreeId", "UserTreeId");
            tableMapping.ColumnMappings.Add("user_group", "user_group");
            tableMapping.ColumnMappings.Add("user_name", "user_name");
            tableMapping.ColumnMappings.Add("login_id", "login_id");
            tableMapping.ColumnMappings.Add("login_password", "login_password");
            tableMapping.ColumnMappings.Add("login_password2", "login_password2");
            tableMapping.ColumnMappings.Add("mobile", "mobile");
            tableMapping.ColumnMappings.Add("SimplePAId", "SimplePAId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""UserTrees"" WHERE ((""UserTreeId"" = :Original_UserTreeId) AND ((:IsNull_user_group = 1 AND ""user_group"" IS NULL) OR (""user_group"" = :Original_user_group)) AND ((:IsNull_user_name = 1 AND ""user_name"" IS NULL) OR (""user_name"" = :Original_user_name)) AND ((:IsNull_login_id = 1 AND ""login_id"" IS NULL) OR (""login_id"" = :Original_login_id)) AND ((:IsNull_login_password = 1 AND ""login_password"" IS NULL) OR (""login_password"" = :Original_login_password)) AND ((:IsNull_login_password2 = 1 AND ""login_password2"" IS NULL) OR (""login_password2"" = :Original_login_password2)) AND ((:IsNull_mobile = 1 AND ""mobile"" IS NULL) OR (""mobile"" = :Original_mobile)) AND ((:IsNull_SimplePAId = 1 AND ""SimplePAId"" IS NULL) OR (""SimplePAId"" = :Original_SimplePAId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_user_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_user_group";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_user_name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_login_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_login_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_login_password";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_login_password";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_login_password2";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_login_password2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_mobile";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_mobile";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SimplePAId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""UserTrees"" (""UserTreeId"", ""user_group"", ""user_name"", ""login_id"", ""login_password"", ""login_password2"", ""mobile"", ""SimplePAId"") VALUES (:UserTreeId, :user_group, :user_name, :login_id, :login_password, :login_password2, :mobile, :SimplePAId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_group";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "mobile";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""UserTrees"" SET ""UserTreeId"" = :UserTreeId, ""user_group"" = :user_group, ""user_name"" = :user_name, ""login_id"" = :login_id, ""login_password"" = :login_password, ""login_password2"" = :login_password2, ""mobile"" = :mobile, ""SimplePAId"" = :SimplePAId WHERE ((""UserTreeId"" = :Original_UserTreeId) AND ((:IsNull_user_group = 1 AND ""user_group"" IS NULL) OR (""user_group"" = :Original_user_group)) AND ((:IsNull_user_name = 1 AND ""user_name"" IS NULL) OR (""user_name"" = :Original_user_name)) AND ((:IsNull_login_id = 1 AND ""login_id"" IS NULL) OR (""login_id"" = :Original_login_id)) AND ((:IsNull_login_password = 1 AND ""login_password"" IS NULL) OR (""login_password"" = :Original_login_password)) AND ((:IsNull_login_password2 = 1 AND ""login_password2"" IS NULL) OR (""login_password2"" = :Original_login_password2)) AND ((:IsNull_mobile = 1 AND ""mobile"" IS NULL) OR (""mobile"" = :Original_mobile)) AND ((:IsNull_SimplePAId = 1 AND ""SimplePAId"" IS NULL) OR (""SimplePAId"" = :Original_SimplePAId)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_group";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "mobile";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_user_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_user_group";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_user_name";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_login_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_login_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_login_password";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_login_password";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_login_password2";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_login_password2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_mobile";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_mobile";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "IsNull_SimplePAId";
            param.DbType = global::System.Data.DbType.Int32;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = "Data Source=\"E:\\0 신사업\\demo\\webPA\\newrep\\0 wisej\\o use\\CodeProject\\Wisej.CodeProje" +
                "ct\\simplepaw.db\"";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserTreeId, user_group, user_name, login_id, login_password, login_passwor" +
                "d2, mobile, SimplePAId FROM \"main\".UserTrees";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.UserTreesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.UserTreesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.UserTreesDataTable dataTable = new DataSet1.UserTreesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.UserTreesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "UserTrees");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_UserTreeId, string Original_user_group, string Original_user_name, string Original_login_id, string Original_login_password, string Original_login_password2, string Original_mobile, global::System.Nullable<long> Original_SimplePAId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_UserTreeId));
            if ((Original_user_group == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_user_group));
            }
            if ((Original_user_name == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_user_name));
            }
            if ((Original_login_id == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_login_id));
            }
            if ((Original_login_password == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_login_password));
            }
            if ((Original_login_password2 == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_login_password2));
            }
            if ((Original_mobile == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_mobile));
            }
            if ((Original_SimplePAId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_SimplePAId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long UserTreeId, string user_group, string user_name, string login_id, string login_password, string login_password2, string mobile, global::System.Nullable<long> SimplePAId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(UserTreeId));
            if ((user_group == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(user_group));
            }
            if ((user_name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(user_name));
            }
            if ((login_id == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(login_id));
            }
            if ((login_password == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(login_password));
            }
            if ((login_password2 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(login_password2));
            }
            if ((mobile == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(mobile));
            }
            if ((SimplePAId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(SimplePAId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long UserTreeId, 
                    string user_group, 
                    string user_name, 
                    string login_id, 
                    string login_password, 
                    string login_password2, 
                    string mobile, 
                    global::System.Nullable<long> SimplePAId, 
                    long Original_UserTreeId, 
                    string Original_user_group, 
                    string Original_user_name, 
                    string Original_login_id, 
                    string Original_login_password, 
                    string Original_login_password2, 
                    string Original_mobile, 
                    global::System.Nullable<long> Original_SimplePAId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(UserTreeId));
            if ((user_group == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(user_group));
            }
            if ((user_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(user_name));
            }
            if ((login_id == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(login_id));
            }
            if ((login_password == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(login_password));
            }
            if ((login_password2 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(login_password2));
            }
            if ((mobile == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(mobile));
            }
            if ((SimplePAId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(SimplePAId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_UserTreeId));
            if ((Original_user_group == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_user_group));
            }
            if ((Original_user_name == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_user_name));
            }
            if ((Original_login_id == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_login_id));
            }
            if ((Original_login_password == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_login_password));
            }
            if ((Original_login_password2 == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_login_password2));
            }
            if ((Original_mobile == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_mobile));
            }
            if ((Original_SimplePAId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(Original_SimplePAId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string user_group, string user_name, string login_id, string login_password, string login_password2, string mobile, global::System.Nullable<long> SimplePAId, long Original_UserTreeId, string Original_user_group, string Original_user_name, string Original_login_id, string Original_login_password, string Original_login_password2, string Original_mobile, global::System.Nullable<long> Original_SimplePAId) {
            return this.Update(Original_UserTreeId, user_group, user_name, login_id, login_password, login_password2, mobile, SimplePAId, Original_UserTreeId, Original_user_group, Original_user_name, Original_login_id, Original_login_password, Original_login_password2, Original_mobile, Original_SimplePAId);
        }
    }
}

#pragma warning restore 1591