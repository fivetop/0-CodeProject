//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Wisej.CodeProject {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private AssetGroupsDataTable tableAssetGroups;
        
        private AssetsDataTable tableAssets;
        
        private EventvmDataTable tableEventvm;
        
        private HolidaysDataTable tableHolidays;
        
        private InfoTreesDataTable tableInfoTrees;
        
        private MusicsDataTable tableMusics;
        
        private SimpleMultisDataTable tableSimpleMultis;
        
        private SimplepaDataTable tableSimplepa;
        
        private UserTreesDataTable tableUserTrees;
        
        private BSTreeDataTable tableBSTree;
        
        private DeviceDataTable tableDevice;
        
        private FloorbasesDataTable tableFloorbases;
        
        private FloormapsDataTable tableFloormaps;
        
        private BSroomDataTable tableBSroom;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AssetGroups"] != null)) {
                    base.Tables.Add(new AssetGroupsDataTable(ds.Tables["AssetGroups"]));
                }
                if ((ds.Tables["Assets"] != null)) {
                    base.Tables.Add(new AssetsDataTable(ds.Tables["Assets"]));
                }
                if ((ds.Tables["Eventvm"] != null)) {
                    base.Tables.Add(new EventvmDataTable(ds.Tables["Eventvm"]));
                }
                if ((ds.Tables["Holidays"] != null)) {
                    base.Tables.Add(new HolidaysDataTable(ds.Tables["Holidays"]));
                }
                if ((ds.Tables["InfoTrees"] != null)) {
                    base.Tables.Add(new InfoTreesDataTable(ds.Tables["InfoTrees"]));
                }
                if ((ds.Tables["Musics"] != null)) {
                    base.Tables.Add(new MusicsDataTable(ds.Tables["Musics"]));
                }
                if ((ds.Tables["SimpleMultis"] != null)) {
                    base.Tables.Add(new SimpleMultisDataTable(ds.Tables["SimpleMultis"]));
                }
                if ((ds.Tables["Simplepa"] != null)) {
                    base.Tables.Add(new SimplepaDataTable(ds.Tables["Simplepa"]));
                }
                if ((ds.Tables["UserTrees"] != null)) {
                    base.Tables.Add(new UserTreesDataTable(ds.Tables["UserTrees"]));
                }
                if ((ds.Tables["BSTree"] != null)) {
                    base.Tables.Add(new BSTreeDataTable(ds.Tables["BSTree"]));
                }
                if ((ds.Tables["Device"] != null)) {
                    base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
                }
                if ((ds.Tables["Floorbases"] != null)) {
                    base.Tables.Add(new FloorbasesDataTable(ds.Tables["Floorbases"]));
                }
                if ((ds.Tables["Floormaps"] != null)) {
                    base.Tables.Add(new FloormapsDataTable(ds.Tables["Floormaps"]));
                }
                if ((ds.Tables["BSroom"] != null)) {
                    base.Tables.Add(new BSroomDataTable(ds.Tables["BSroom"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetGroupsDataTable AssetGroups {
            get {
                return this.tableAssetGroups;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetsDataTable Assets {
            get {
                return this.tableAssets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventvmDataTable Eventvm {
            get {
                return this.tableEventvm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HolidaysDataTable Holidays {
            get {
                return this.tableHolidays;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InfoTreesDataTable InfoTrees {
            get {
                return this.tableInfoTrees;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MusicsDataTable Musics {
            get {
                return this.tableMusics;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SimpleMultisDataTable SimpleMultis {
            get {
                return this.tableSimpleMultis;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SimplepaDataTable Simplepa {
            get {
                return this.tableSimplepa;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserTreesDataTable UserTrees {
            get {
                return this.tableUserTrees;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BSTreeDataTable BSTree {
            get {
                return this.tableBSTree;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeviceDataTable Device {
            get {
                return this.tableDevice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FloorbasesDataTable Floorbases {
            get {
                return this.tableFloorbases;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FloormapsDataTable Floormaps {
            get {
                return this.tableFloormaps;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BSroomDataTable BSroom {
            get {
                return this.tableBSroom;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AssetGroups"] != null)) {
                    base.Tables.Add(new AssetGroupsDataTable(ds.Tables["AssetGroups"]));
                }
                if ((ds.Tables["Assets"] != null)) {
                    base.Tables.Add(new AssetsDataTable(ds.Tables["Assets"]));
                }
                if ((ds.Tables["Eventvm"] != null)) {
                    base.Tables.Add(new EventvmDataTable(ds.Tables["Eventvm"]));
                }
                if ((ds.Tables["Holidays"] != null)) {
                    base.Tables.Add(new HolidaysDataTable(ds.Tables["Holidays"]));
                }
                if ((ds.Tables["InfoTrees"] != null)) {
                    base.Tables.Add(new InfoTreesDataTable(ds.Tables["InfoTrees"]));
                }
                if ((ds.Tables["Musics"] != null)) {
                    base.Tables.Add(new MusicsDataTable(ds.Tables["Musics"]));
                }
                if ((ds.Tables["SimpleMultis"] != null)) {
                    base.Tables.Add(new SimpleMultisDataTable(ds.Tables["SimpleMultis"]));
                }
                if ((ds.Tables["Simplepa"] != null)) {
                    base.Tables.Add(new SimplepaDataTable(ds.Tables["Simplepa"]));
                }
                if ((ds.Tables["UserTrees"] != null)) {
                    base.Tables.Add(new UserTreesDataTable(ds.Tables["UserTrees"]));
                }
                if ((ds.Tables["BSTree"] != null)) {
                    base.Tables.Add(new BSTreeDataTable(ds.Tables["BSTree"]));
                }
                if ((ds.Tables["Device"] != null)) {
                    base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
                }
                if ((ds.Tables["Floorbases"] != null)) {
                    base.Tables.Add(new FloorbasesDataTable(ds.Tables["Floorbases"]));
                }
                if ((ds.Tables["Floormaps"] != null)) {
                    base.Tables.Add(new FloormapsDataTable(ds.Tables["Floormaps"]));
                }
                if ((ds.Tables["BSroom"] != null)) {
                    base.Tables.Add(new BSroomDataTable(ds.Tables["BSroom"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableAssetGroups = ((AssetGroupsDataTable)(base.Tables["AssetGroups"]));
            if ((initTable == true)) {
                if ((this.tableAssetGroups != null)) {
                    this.tableAssetGroups.InitVars();
                }
            }
            this.tableAssets = ((AssetsDataTable)(base.Tables["Assets"]));
            if ((initTable == true)) {
                if ((this.tableAssets != null)) {
                    this.tableAssets.InitVars();
                }
            }
            this.tableEventvm = ((EventvmDataTable)(base.Tables["Eventvm"]));
            if ((initTable == true)) {
                if ((this.tableEventvm != null)) {
                    this.tableEventvm.InitVars();
                }
            }
            this.tableHolidays = ((HolidaysDataTable)(base.Tables["Holidays"]));
            if ((initTable == true)) {
                if ((this.tableHolidays != null)) {
                    this.tableHolidays.InitVars();
                }
            }
            this.tableInfoTrees = ((InfoTreesDataTable)(base.Tables["InfoTrees"]));
            if ((initTable == true)) {
                if ((this.tableInfoTrees != null)) {
                    this.tableInfoTrees.InitVars();
                }
            }
            this.tableMusics = ((MusicsDataTable)(base.Tables["Musics"]));
            if ((initTable == true)) {
                if ((this.tableMusics != null)) {
                    this.tableMusics.InitVars();
                }
            }
            this.tableSimpleMultis = ((SimpleMultisDataTable)(base.Tables["SimpleMultis"]));
            if ((initTable == true)) {
                if ((this.tableSimpleMultis != null)) {
                    this.tableSimpleMultis.InitVars();
                }
            }
            this.tableSimplepa = ((SimplepaDataTable)(base.Tables["Simplepa"]));
            if ((initTable == true)) {
                if ((this.tableSimplepa != null)) {
                    this.tableSimplepa.InitVars();
                }
            }
            this.tableUserTrees = ((UserTreesDataTable)(base.Tables["UserTrees"]));
            if ((initTable == true)) {
                if ((this.tableUserTrees != null)) {
                    this.tableUserTrees.InitVars();
                }
            }
            this.tableBSTree = ((BSTreeDataTable)(base.Tables["BSTree"]));
            if ((initTable == true)) {
                if ((this.tableBSTree != null)) {
                    this.tableBSTree.InitVars();
                }
            }
            this.tableDevice = ((DeviceDataTable)(base.Tables["Device"]));
            if ((initTable == true)) {
                if ((this.tableDevice != null)) {
                    this.tableDevice.InitVars();
                }
            }
            this.tableFloorbases = ((FloorbasesDataTable)(base.Tables["Floorbases"]));
            if ((initTable == true)) {
                if ((this.tableFloorbases != null)) {
                    this.tableFloorbases.InitVars();
                }
            }
            this.tableFloormaps = ((FloormapsDataTable)(base.Tables["Floormaps"]));
            if ((initTable == true)) {
                if ((this.tableFloormaps != null)) {
                    this.tableFloormaps.InitVars();
                }
            }
            this.tableBSroom = ((BSroomDataTable)(base.Tables["BSroom"]));
            if ((initTable == true)) {
                if ((this.tableBSroom != null)) {
                    this.tableBSroom.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAssetGroups = new AssetGroupsDataTable();
            base.Tables.Add(this.tableAssetGroups);
            this.tableAssets = new AssetsDataTable();
            base.Tables.Add(this.tableAssets);
            this.tableEventvm = new EventvmDataTable();
            base.Tables.Add(this.tableEventvm);
            this.tableHolidays = new HolidaysDataTable();
            base.Tables.Add(this.tableHolidays);
            this.tableInfoTrees = new InfoTreesDataTable();
            base.Tables.Add(this.tableInfoTrees);
            this.tableMusics = new MusicsDataTable();
            base.Tables.Add(this.tableMusics);
            this.tableSimpleMultis = new SimpleMultisDataTable();
            base.Tables.Add(this.tableSimpleMultis);
            this.tableSimplepa = new SimplepaDataTable();
            base.Tables.Add(this.tableSimplepa);
            this.tableUserTrees = new UserTreesDataTable();
            base.Tables.Add(this.tableUserTrees);
            this.tableBSTree = new BSTreeDataTable();
            base.Tables.Add(this.tableBSTree);
            this.tableDevice = new DeviceDataTable();
            base.Tables.Add(this.tableDevice);
            this.tableFloorbases = new FloorbasesDataTable();
            base.Tables.Add(this.tableFloorbases);
            this.tableFloormaps = new FloormapsDataTable();
            base.Tables.Add(this.tableFloormaps);
            this.tableBSroom = new BSroomDataTable();
            base.Tables.Add(this.tableBSroom);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeAssetGroups() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeAssets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeEventvm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeHolidays() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeInfoTrees() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeMusics() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeSimpleMultis() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeSimplepa() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeUserTrees() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeBSTree() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeDevice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeFloorbases() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeFloormaps() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeBSroom() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void AssetGroupsRowChangeEventHandler(object sender, AssetGroupsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void AssetsRowChangeEventHandler(object sender, AssetsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void EventvmRowChangeEventHandler(object sender, EventvmRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void HolidaysRowChangeEventHandler(object sender, HolidaysRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void InfoTreesRowChangeEventHandler(object sender, InfoTreesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void MusicsRowChangeEventHandler(object sender, MusicsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void SimpleMultisRowChangeEventHandler(object sender, SimpleMultisRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void SimplepaRowChangeEventHandler(object sender, SimplepaRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void UserTreesRowChangeEventHandler(object sender, UserTreesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void BSTreeRowChangeEventHandler(object sender, BSTreeRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void DeviceRowChangeEventHandler(object sender, DeviceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void FloorbasesRowChangeEventHandler(object sender, FloorbasesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void FloormapsRowChangeEventHandler(object sender, FloormapsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void BSroomRowChangeEventHandler(object sender, BSroomRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetGroupsDataTable : global::System.Data.TypedTableBase<AssetGroupsRow> {
            
            private global::System.Data.DataColumn columnAssetGroupId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAssetId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsDataTable() {
                this.TableName = "AssetGroups";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetGroupsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected AssetGroupsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetGroupIdColumn {
                get {
                    return this.columnAssetGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetIdColumn {
                get {
                    return this.columnAssetId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow this[int index] {
                get {
                    return ((AssetGroupsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetGroupsRowChangeEventHandler AssetGroupsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddAssetGroupsRow(AssetGroupsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow AddAssetGroupsRow(string Name, long AssetId) {
                AssetGroupsRow rowAssetGroupsRow = ((AssetGroupsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        AssetId};
                rowAssetGroupsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetGroupsRow);
                return rowAssetGroupsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow FindByAssetGroupId(long AssetGroupId) {
                return ((AssetGroupsRow)(this.Rows.Find(new object[] {
                            AssetGroupId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AssetGroupsDataTable cln = ((AssetGroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetGroupsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnAssetGroupId = base.Columns["AssetGroupId"];
                this.columnName = base.Columns["Name"];
                this.columnAssetId = base.Columns["AssetId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnAssetGroupId = new global::System.Data.DataColumn("AssetGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetGroupId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAssetId = new global::System.Data.DataColumn("AssetId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetGroupId}, true));
                this.columnAssetGroupId.AutoIncrement = true;
                this.columnAssetGroupId.AutoIncrementSeed = 1;
                this.columnAssetGroupId.AllowDBNull = false;
                this.columnAssetGroupId.Unique = true;
                this.columnAssetId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow NewAssetGroupsRow() {
                return ((AssetGroupsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetGroupsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AssetGroupsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetGroupsRowChanged != null)) {
                    this.AssetGroupsRowChanged(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetGroupsRowChanging != null)) {
                    this.AssetGroupsRowChanging(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetGroupsRowDeleted != null)) {
                    this.AssetGroupsRowDeleted(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetGroupsRowDeleting != null)) {
                    this.AssetGroupsRowDeleting(this, new AssetGroupsRowChangeEvent(((AssetGroupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveAssetGroupsRow(AssetGroupsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetGroupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetsDataTable : global::System.Data.TypedTableBase<AssetsRow> {
            
            private global::System.Data.DataColumn columnAssetId;
            
            private global::System.Data.DataColumn columnip;
            
            private global::System.Data.DataColumn columnGroupName;
            
            private global::System.Data.DataColumn columnZoneName;
            
            private global::System.Data.DataColumn columnSpeakerName;
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columnfloor;
            
            private global::System.Data.DataColumn columnDeviceName;
            
            private global::System.Data.DataColumn columnstate;
            
            private global::System.Data.DataColumn columnstate_old;
            
            private global::System.Data.DataColumn columnchk;
            
            private global::System.Data.DataColumn columnseq;
            
            private global::System.Data.DataColumn columnch;
            
            private global::System.Data.DataColumn columnem1;
            
            private global::System.Data.DataColumn columnem2;
            
            private global::System.Data.DataColumn columnem3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsDataTable() {
                this.TableName = "Assets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected AssetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetIdColumn {
                get {
                    return this.columnAssetId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ipColumn {
                get {
                    return this.columnip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GroupNameColumn {
                get {
                    return this.columnGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ZoneNameColumn {
                get {
                    return this.columnZoneName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpeakerNameColumn {
                get {
                    return this.columnSpeakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn state_oldColumn {
                get {
                    return this.columnstate_old;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chkColumn {
                get {
                    return this.columnchk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn seqColumn {
                get {
                    return this.columnseq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chColumn {
                get {
                    return this.columnch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn em1Column {
                get {
                    return this.columnem1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn em2Column {
                get {
                    return this.columnem2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn em3Column {
                get {
                    return this.columnem3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow this[int index] {
                get {
                    return ((AssetsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AssetsRowChangeEventHandler AssetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddAssetsRow(AssetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow AddAssetsRow(string ip, string GroupName, string ZoneName, string SpeakerName, string path, string floor, string DeviceName, string state, string state_old, long chk, long seq, long ch, long em1, long em2, long em3) {
                AssetsRow rowAssetsRow = ((AssetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ip,
                        GroupName,
                        ZoneName,
                        SpeakerName,
                        path,
                        floor,
                        DeviceName,
                        state,
                        state_old,
                        chk,
                        seq,
                        ch,
                        em1,
                        em2,
                        em3};
                rowAssetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetsRow);
                return rowAssetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow FindByAssetId(long AssetId) {
                return ((AssetsRow)(this.Rows.Find(new object[] {
                            AssetId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AssetsDataTable cln = ((AssetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnAssetId = base.Columns["AssetId"];
                this.columnip = base.Columns["ip"];
                this.columnGroupName = base.Columns["GroupName"];
                this.columnZoneName = base.Columns["ZoneName"];
                this.columnSpeakerName = base.Columns["SpeakerName"];
                this.columnpath = base.Columns["path"];
                this.columnfloor = base.Columns["floor"];
                this.columnDeviceName = base.Columns["DeviceName"];
                this.columnstate = base.Columns["state"];
                this.columnstate_old = base.Columns["state_old"];
                this.columnchk = base.Columns["chk"];
                this.columnseq = base.Columns["seq"];
                this.columnch = base.Columns["ch"];
                this.columnem1 = base.Columns["em1"];
                this.columnem2 = base.Columns["em2"];
                this.columnem3 = base.Columns["em3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnAssetId = new global::System.Data.DataColumn("AssetId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetId);
                this.columnip = new global::System.Data.DataColumn("ip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip);
                this.columnGroupName = new global::System.Data.DataColumn("GroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupName);
                this.columnZoneName = new global::System.Data.DataColumn("ZoneName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneName);
                this.columnSpeakerName = new global::System.Data.DataColumn("SpeakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeakerName);
                this.columnpath = new global::System.Data.DataColumn("path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnfloor = new global::System.Data.DataColumn("floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columnDeviceName = new global::System.Data.DataColumn("DeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.columnstate = new global::System.Data.DataColumn("state", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnstate_old = new global::System.Data.DataColumn("state_old", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate_old);
                this.columnchk = new global::System.Data.DataColumn("chk", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchk);
                this.columnseq = new global::System.Data.DataColumn("seq", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseq);
                this.columnch = new global::System.Data.DataColumn("ch", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnch);
                this.columnem1 = new global::System.Data.DataColumn("em1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnem1);
                this.columnem2 = new global::System.Data.DataColumn("em2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnem2);
                this.columnem3 = new global::System.Data.DataColumn("em3", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnem3);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetId}, true));
                this.columnAssetId.AutoIncrement = true;
                this.columnAssetId.AutoIncrementSeed = 1;
                this.columnAssetId.AllowDBNull = false;
                this.columnAssetId.Unique = true;
                this.columnem1.DefaultValue = ((long)(0));
                this.columnem2.DefaultValue = ((long)(0));
                this.columnem3.DefaultValue = ((long)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow NewAssetsRow() {
                return ((AssetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AssetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetsRowChanged != null)) {
                    this.AssetsRowChanged(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetsRowChanging != null)) {
                    this.AssetsRowChanging(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetsRowDeleted != null)) {
                    this.AssetsRowDeleted(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetsRowDeleting != null)) {
                    this.AssetsRowDeleting(this, new AssetsRowChangeEvent(((AssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveAssetsRow(AssetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventvmDataTable : global::System.Data.TypedTableBase<EventvmRow> {
            
            private global::System.Data.DataColumn columnEventVMId;
            
            private global::System.Data.DataColumn columnwrite_time;
            
            private global::System.Data.DataColumn columnevent_text;
            
            private global::System.Data.DataColumn columnip;
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columnDeviceName;
            
            private global::System.Data.DataColumn columnstate;
            
            private global::System.Data.DataColumn columnalarm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmDataTable() {
                this.TableName = "Eventvm";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal EventvmDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected EventvmDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn EventVMIdColumn {
                get {
                    return this.columnEventVMId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn write_timeColumn {
                get {
                    return this.columnwrite_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn event_textColumn {
                get {
                    return this.columnevent_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ipColumn {
                get {
                    return this.columnip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn alarmColumn {
                get {
                    return this.columnalarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow this[int index] {
                get {
                    return ((EventvmRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event EventvmRowChangeEventHandler EventvmRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddEventvmRow(EventvmRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow AddEventvmRow(System.DateTime write_time, string event_text, string ip, string path, string DeviceName, string state, long alarm) {
                EventvmRow rowEventvmRow = ((EventvmRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        write_time,
                        event_text,
                        ip,
                        path,
                        DeviceName,
                        state,
                        alarm};
                rowEventvmRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventvmRow);
                return rowEventvmRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow FindByEventVMId(long EventVMId) {
                return ((EventvmRow)(this.Rows.Find(new object[] {
                            EventVMId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                EventvmDataTable cln = ((EventvmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventvmDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnEventVMId = base.Columns["EventVMId"];
                this.columnwrite_time = base.Columns["write_time"];
                this.columnevent_text = base.Columns["event_text"];
                this.columnip = base.Columns["ip"];
                this.columnpath = base.Columns["path"];
                this.columnDeviceName = base.Columns["DeviceName"];
                this.columnstate = base.Columns["state"];
                this.columnalarm = base.Columns["alarm"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnEventVMId = new global::System.Data.DataColumn("EventVMId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventVMId);
                this.columnwrite_time = new global::System.Data.DataColumn("write_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwrite_time);
                this.columnevent_text = new global::System.Data.DataColumn("event_text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnevent_text);
                this.columnip = new global::System.Data.DataColumn("ip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip);
                this.columnpath = new global::System.Data.DataColumn("path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnDeviceName = new global::System.Data.DataColumn("DeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.columnstate = new global::System.Data.DataColumn("state", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnalarm = new global::System.Data.DataColumn("alarm", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalarm);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventVMId}, true));
                this.columnEventVMId.AutoIncrement = true;
                this.columnEventVMId.AutoIncrementSeed = 1;
                this.columnEventVMId.AllowDBNull = false;
                this.columnEventVMId.Unique = true;
                this.columnwrite_time.AllowDBNull = false;
                this.columnalarm.DefaultValue = ((long)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow NewEventvmRow() {
                return ((EventvmRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventvmRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(EventvmRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventvmRowChanged != null)) {
                    this.EventvmRowChanged(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventvmRowChanging != null)) {
                    this.EventvmRowChanging(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventvmRowDeleted != null)) {
                    this.EventvmRowDeleted(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventvmRowDeleting != null)) {
                    this.EventvmRowDeleting(this, new EventvmRowChangeEvent(((EventvmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveEventvmRow(EventvmRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventvmDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HolidaysDataTable : global::System.Data.TypedTableBase<HolidaysRow> {
            
            private global::System.Data.DataColumn columnHolidayId;
            
            private global::System.Data.DataColumn columnhDate;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysDataTable() {
                this.TableName = "Holidays";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal HolidaysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected HolidaysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn HolidayIdColumn {
                get {
                    return this.columnHolidayId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn hDateColumn {
                get {
                    return this.columnhDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow this[int index] {
                get {
                    return ((HolidaysRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event HolidaysRowChangeEventHandler HolidaysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddHolidaysRow(HolidaysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow AddHolidaysRow(System.DateTime hDate, string Description) {
                HolidaysRow rowHolidaysRow = ((HolidaysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        hDate,
                        Description};
                rowHolidaysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHolidaysRow);
                return rowHolidaysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow FindByHolidayId(long HolidayId) {
                return ((HolidaysRow)(this.Rows.Find(new object[] {
                            HolidayId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                HolidaysDataTable cln = ((HolidaysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HolidaysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnHolidayId = base.Columns["HolidayId"];
                this.columnhDate = base.Columns["hDate"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnHolidayId = new global::System.Data.DataColumn("HolidayId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHolidayId);
                this.columnhDate = new global::System.Data.DataColumn("hDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhDate);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHolidayId}, true));
                this.columnHolidayId.AutoIncrement = true;
                this.columnHolidayId.AutoIncrementSeed = 1;
                this.columnHolidayId.AllowDBNull = false;
                this.columnHolidayId.Unique = true;
                this.columnhDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow NewHolidaysRow() {
                return ((HolidaysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HolidaysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(HolidaysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HolidaysRowChanged != null)) {
                    this.HolidaysRowChanged(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HolidaysRowChanging != null)) {
                    this.HolidaysRowChanging(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HolidaysRowDeleted != null)) {
                    this.HolidaysRowDeleted(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HolidaysRowDeleting != null)) {
                    this.HolidaysRowDeleting(this, new HolidaysRowChangeEvent(((HolidaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveHolidaysRow(HolidaysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HolidaysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InfoTreesDataTable : global::System.Data.TypedTableBase<InfoTreesRow> {
            
            private global::System.Data.DataColumn columnInfoTreeId;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columngstreeAssetGroupId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesDataTable() {
                this.TableName = "InfoTrees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal InfoTreesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected InfoTreesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn InfoTreeIdColumn {
                get {
                    return this.columnInfoTreeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn gstreeAssetGroupIdColumn {
                get {
                    return this.columngstreeAssetGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow this[int index] {
                get {
                    return ((InfoTreesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event InfoTreesRowChangeEventHandler InfoTreesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddInfoTreesRow(InfoTreesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow AddInfoTreesRow(string Id, string Subject, string Name, long gstreeAssetGroupId) {
                InfoTreesRow rowInfoTreesRow = ((InfoTreesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Id,
                        Subject,
                        Name,
                        gstreeAssetGroupId};
                rowInfoTreesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInfoTreesRow);
                return rowInfoTreesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow FindByInfoTreeId(long InfoTreeId) {
                return ((InfoTreesRow)(this.Rows.Find(new object[] {
                            InfoTreeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                InfoTreesDataTable cln = ((InfoTreesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InfoTreesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnInfoTreeId = base.Columns["InfoTreeId"];
                this.columnId = base.Columns["Id"];
                this.columnSubject = base.Columns["Subject"];
                this.columnName = base.Columns["Name"];
                this.columngstreeAssetGroupId = base.Columns["gstreeAssetGroupId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnInfoTreeId = new global::System.Data.DataColumn("InfoTreeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfoTreeId);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columngstreeAssetGroupId = new global::System.Data.DataColumn("gstreeAssetGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngstreeAssetGroupId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInfoTreeId}, true));
                this.columnInfoTreeId.AutoIncrement = true;
                this.columnInfoTreeId.AutoIncrementSeed = 1;
                this.columnInfoTreeId.AllowDBNull = false;
                this.columnInfoTreeId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow NewInfoTreesRow() {
                return ((InfoTreesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InfoTreesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(InfoTreesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InfoTreesRowChanged != null)) {
                    this.InfoTreesRowChanged(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InfoTreesRowChanging != null)) {
                    this.InfoTreesRowChanging(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InfoTreesRowDeleted != null)) {
                    this.InfoTreesRowDeleted(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InfoTreesRowDeleting != null)) {
                    this.InfoTreesRowDeleting(this, new InfoTreesRowChangeEvent(((InfoTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveInfoTreesRow(InfoTreesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InfoTreesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MusicsDataTable : global::System.Data.TypedTableBase<MusicsRow> {
            
            private global::System.Data.DataColumn columnMusicId;
            
            private global::System.Data.DataColumn columnFileName;
            
            private global::System.Data.DataColumn columnFileContent;
            
            private global::System.Data.DataColumn columndeletable;
            
            private global::System.Data.DataColumn columnduration;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsDataTable() {
                this.TableName = "Musics";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MusicsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected MusicsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MusicIdColumn {
                get {
                    return this.columnMusicId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FileContentColumn {
                get {
                    return this.columnFileContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn deletableColumn {
                get {
                    return this.columndeletable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow this[int index] {
                get {
                    return ((MusicsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MusicsRowChangeEventHandler MusicsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddMusicsRow(MusicsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow AddMusicsRow(string FileName, string FileContent, string deletable, string duration) {
                MusicsRow rowMusicsRow = ((MusicsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FileName,
                        FileContent,
                        deletable,
                        duration};
                rowMusicsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMusicsRow);
                return rowMusicsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow FindByMusicId(long MusicId) {
                return ((MusicsRow)(this.Rows.Find(new object[] {
                            MusicId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                MusicsDataTable cln = ((MusicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MusicsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnMusicId = base.Columns["MusicId"];
                this.columnFileName = base.Columns["FileName"];
                this.columnFileContent = base.Columns["FileContent"];
                this.columndeletable = base.Columns["deletable"];
                this.columnduration = base.Columns["duration"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnMusicId = new global::System.Data.DataColumn("MusicId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMusicId);
                this.columnFileName = new global::System.Data.DataColumn("FileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnFileContent = new global::System.Data.DataColumn("FileContent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileContent);
                this.columndeletable = new global::System.Data.DataColumn("deletable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeletable);
                this.columnduration = new global::System.Data.DataColumn("duration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnduration);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMusicId}, true));
                this.columnMusicId.AutoIncrement = true;
                this.columnMusicId.AutoIncrementSeed = 1;
                this.columnMusicId.AllowDBNull = false;
                this.columnMusicId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow NewMusicsRow() {
                return ((MusicsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MusicsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(MusicsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MusicsRowChanged != null)) {
                    this.MusicsRowChanged(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MusicsRowChanging != null)) {
                    this.MusicsRowChanging(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MusicsRowDeleted != null)) {
                    this.MusicsRowDeleted(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MusicsRowDeleting != null)) {
                    this.MusicsRowDeleting(this, new MusicsRowChangeEvent(((MusicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveMusicsRow(MusicsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MusicsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SimpleMultisDataTable : global::System.Data.TypedTableBase<SimpleMultisRow> {
            
            private global::System.Data.DataColumn columnSimpleMultiId;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnidno;
            
            private global::System.Data.DataColumn columnchno;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columngstreeAssetGroupId;
            
            private global::System.Data.DataColumn columnstm;
            
            private global::System.Data.DataColumn columnetm;
            
            private global::System.Data.DataColumn columnduration;
            
            private global::System.Data.DataColumn columnweek;
            
            private global::System.Data.DataColumn columnday1;
            
            private global::System.Data.DataColumn columnday2;
            
            private global::System.Data.DataColumn columnday3;
            
            private global::System.Data.DataColumn columnday4;
            
            private global::System.Data.DataColumn columnday5;
            
            private global::System.Data.DataColumn columnday6;
            
            private global::System.Data.DataColumn columnday7;
            
            private global::System.Data.DataColumn columntss;
            
            private global::System.Data.DataColumn columntse;
            
            private global::System.Data.DataColumn columnColor16;
            
            private global::System.Data.DataColumn columnoverlap;
            
            private global::System.Data.DataColumn columnweekday;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisDataTable() {
                this.TableName = "SimpleMultis";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimpleMultisDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected SimpleMultisDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SimpleMultiIdColumn {
                get {
                    return this.columnSimpleMultiId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idnoColumn {
                get {
                    return this.columnidno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chnoColumn {
                get {
                    return this.columnchno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn gstreeAssetGroupIdColumn {
                get {
                    return this.columngstreeAssetGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stmColumn {
                get {
                    return this.columnstm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn etmColumn {
                get {
                    return this.columnetm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn weekColumn {
                get {
                    return this.columnweek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day1Column {
                get {
                    return this.columnday1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day2Column {
                get {
                    return this.columnday2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day3Column {
                get {
                    return this.columnday3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day4Column {
                get {
                    return this.columnday4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day5Column {
                get {
                    return this.columnday5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day6Column {
                get {
                    return this.columnday6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn day7Column {
                get {
                    return this.columnday7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn tssColumn {
                get {
                    return this.columntss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn tseColumn {
                get {
                    return this.columntse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Color16Column {
                get {
                    return this.columnColor16;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn overlapColumn {
                get {
                    return this.columnoverlap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn weekdayColumn {
                get {
                    return this.columnweekday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow this[int index] {
                get {
                    return ((SimpleMultisRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimpleMultisRowChangeEventHandler SimpleMultisRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddSimpleMultisRow(SimpleMultisRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow AddSimpleMultisRow(
                        string Id, 
                        long idno, 
                        long chno, 
                        string Subject, 
                        string Name, 
                        long gstreeAssetGroupId, 
                        string stm, 
                        string etm, 
                        string duration, 
                        long week, 
                        long day1, 
                        long day2, 
                        long day3, 
                        long day4, 
                        long day5, 
                        long day6, 
                        long day7, 
                        string tss, 
                        string tse, 
                        string Color16, 
                        long overlap, 
                        long weekday) {
                SimpleMultisRow rowSimpleMultisRow = ((SimpleMultisRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Id,
                        idno,
                        chno,
                        Subject,
                        Name,
                        gstreeAssetGroupId,
                        stm,
                        etm,
                        duration,
                        week,
                        day1,
                        day2,
                        day3,
                        day4,
                        day5,
                        day6,
                        day7,
                        tss,
                        tse,
                        Color16,
                        overlap,
                        weekday};
                rowSimpleMultisRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSimpleMultisRow);
                return rowSimpleMultisRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow FindBySimpleMultiId(long SimpleMultiId) {
                return ((SimpleMultisRow)(this.Rows.Find(new object[] {
                            SimpleMultiId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SimpleMultisDataTable cln = ((SimpleMultisDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SimpleMultisDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnSimpleMultiId = base.Columns["SimpleMultiId"];
                this.columnId = base.Columns["Id"];
                this.columnidno = base.Columns["idno"];
                this.columnchno = base.Columns["chno"];
                this.columnSubject = base.Columns["Subject"];
                this.columnName = base.Columns["Name"];
                this.columngstreeAssetGroupId = base.Columns["gstreeAssetGroupId"];
                this.columnstm = base.Columns["stm"];
                this.columnetm = base.Columns["etm"];
                this.columnduration = base.Columns["duration"];
                this.columnweek = base.Columns["week"];
                this.columnday1 = base.Columns["day1"];
                this.columnday2 = base.Columns["day2"];
                this.columnday3 = base.Columns["day3"];
                this.columnday4 = base.Columns["day4"];
                this.columnday5 = base.Columns["day5"];
                this.columnday6 = base.Columns["day6"];
                this.columnday7 = base.Columns["day7"];
                this.columntss = base.Columns["tss"];
                this.columntse = base.Columns["tse"];
                this.columnColor16 = base.Columns["Color16"];
                this.columnoverlap = base.Columns["overlap"];
                this.columnweekday = base.Columns["weekday"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnSimpleMultiId = new global::System.Data.DataColumn("SimpleMultiId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimpleMultiId);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnidno = new global::System.Data.DataColumn("idno", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidno);
                this.columnchno = new global::System.Data.DataColumn("chno", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchno);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columngstreeAssetGroupId = new global::System.Data.DataColumn("gstreeAssetGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngstreeAssetGroupId);
                this.columnstm = new global::System.Data.DataColumn("stm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstm);
                this.columnetm = new global::System.Data.DataColumn("etm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnetm);
                this.columnduration = new global::System.Data.DataColumn("duration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnduration);
                this.columnweek = new global::System.Data.DataColumn("week", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnweek);
                this.columnday1 = new global::System.Data.DataColumn("day1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday1);
                this.columnday2 = new global::System.Data.DataColumn("day2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday2);
                this.columnday3 = new global::System.Data.DataColumn("day3", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday3);
                this.columnday4 = new global::System.Data.DataColumn("day4", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday4);
                this.columnday5 = new global::System.Data.DataColumn("day5", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday5);
                this.columnday6 = new global::System.Data.DataColumn("day6", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday6);
                this.columnday7 = new global::System.Data.DataColumn("day7", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday7);
                this.columntss = new global::System.Data.DataColumn("tss", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntss);
                this.columntse = new global::System.Data.DataColumn("tse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntse);
                this.columnColor16 = new global::System.Data.DataColumn("Color16", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor16);
                this.columnoverlap = new global::System.Data.DataColumn("overlap", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoverlap);
                this.columnweekday = new global::System.Data.DataColumn("weekday", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnweekday);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSimpleMultiId}, true));
                this.columnSimpleMultiId.AutoIncrement = true;
                this.columnSimpleMultiId.AutoIncrementSeed = 1;
                this.columnSimpleMultiId.AllowDBNull = false;
                this.columnSimpleMultiId.Unique = true;
                this.columnidno.AllowDBNull = false;
                this.columnchno.AllowDBNull = false;
                this.columnstm.AllowDBNull = false;
                this.columnetm.AllowDBNull = false;
                this.columnweek.AllowDBNull = false;
                this.columnday1.AllowDBNull = false;
                this.columnday2.AllowDBNull = false;
                this.columnday3.AllowDBNull = false;
                this.columnday4.AllowDBNull = false;
                this.columnday5.AllowDBNull = false;
                this.columnday6.AllowDBNull = false;
                this.columnday7.AllowDBNull = false;
                this.columntss.AllowDBNull = false;
                this.columntse.AllowDBNull = false;
                this.columnoverlap.AllowDBNull = false;
                this.columnweekday.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow NewSimpleMultisRow() {
                return ((SimpleMultisRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SimpleMultisRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SimpleMultisRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SimpleMultisRowChanged != null)) {
                    this.SimpleMultisRowChanged(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SimpleMultisRowChanging != null)) {
                    this.SimpleMultisRowChanging(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SimpleMultisRowDeleted != null)) {
                    this.SimpleMultisRowDeleted(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SimpleMultisRowDeleting != null)) {
                    this.SimpleMultisRowDeleting(this, new SimpleMultisRowChangeEvent(((SimpleMultisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveSimpleMultisRow(SimpleMultisRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SimpleMultisDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SimplepaDataTable : global::System.Data.TypedTableBase<SimplepaRow> {
            
            private global::System.Data.DataColumn columnSimplePAId;
            
            private global::System.Data.DataColumn columnTileWidth;
            
            private global::System.Data.DataColumn columnMapX;
            
            private global::System.Data.DataColumn columnMapY;
            
            private global::System.Data.DataColumn columnZoom;
            
            private global::System.Data.DataColumn columndebug;
            
            private global::System.Data.DataColumn columnSpeakerIconSize;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnEMServerIP;
            
            private global::System.Data.DataColumn columnServerIP;
            
            private global::System.Data.DataColumn columnServerPort;
            
            private global::System.Data.DataColumn columnReserved1;
            
            private global::System.Data.DataColumn columnReserved2;
            
            private global::System.Data.DataColumn columnReserved3;
            
            private global::System.Data.DataColumn columnReserved4;
            
            private global::System.Data.DataColumn columnReserved5;
            
            private global::System.Data.DataColumn columnReserved6;
            
            private global::System.Data.DataColumn columnReserved7;
            
            private global::System.Data.DataColumn columnReserved8;
            
            private global::System.Data.DataColumn columnReserved9;
            
            private global::System.Data.DataColumn columnReserved10;
            
            private global::System.Data.DataColumn columnReserved11;
            
            private global::System.Data.DataColumn columnGPIOPort;
            
            private global::System.Data.DataColumn columnRport;
            
            private global::System.Data.DataColumn columnReserved15;
            
            private global::System.Data.DataColumn columnReserved16;
            
            private global::System.Data.DataColumn columnJigsangbalhwa;
            
            private global::System.Data.DataColumn columnSpeakerTimer;
            
            private global::System.Data.DataColumn columninputvolume;
            
            private global::System.Data.DataColumn columnoutputvolume;
            
            private global::System.Data.DataColumn columndisp;
            
            private global::System.Data.DataColumn columnMulti_Ch;
            
            private global::System.Data.DataColumn columnSoundDeviceNum;
            
            private global::System.Data.DataColumn columnSoundDeviceName;
            
            private global::System.Data.DataColumn columnReserved17;
            
            private global::System.Data.DataColumn columnscalelength;
            
            private global::System.Data.DataColumn columnlength;
            
            private global::System.Data.DataColumn columnscale;
            
            private global::System.Data.DataColumn columnnoise1;
            
            private global::System.Data.DataColumn columnnoise2;
            
            private global::System.Data.DataColumn columndsp_vol;
            
            private global::System.Data.DataColumn columndsp_vol_em;
            
            private global::System.Data.DataColumn columnsms_server;
            
            private global::System.Data.DataColumn columnsms_id;
            
            private global::System.Data.DataColumn columnsms_pw;
            
            private global::System.Data.DataColumn columnsms_rcvno;
            
            private global::System.Data.DataColumn columnPport;
            
            private global::System.Data.DataColumn columnEmMusic;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaDataTable() {
                this.TableName = "Simplepa";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimplepaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected SimplepaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SimplePAIdColumn {
                get {
                    return this.columnSimplePAId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TileWidthColumn {
                get {
                    return this.columnTileWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MapXColumn {
                get {
                    return this.columnMapX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MapYColumn {
                get {
                    return this.columnMapY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ZoomColumn {
                get {
                    return this.columnZoom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn debugColumn {
                get {
                    return this.columndebug;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpeakerIconSizeColumn {
                get {
                    return this.columnSpeakerIconSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn EMServerIPColumn {
                get {
                    return this.columnEMServerIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ServerIPColumn {
                get {
                    return this.columnServerIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ServerPortColumn {
                get {
                    return this.columnServerPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved1Column {
                get {
                    return this.columnReserved1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved2Column {
                get {
                    return this.columnReserved2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved3Column {
                get {
                    return this.columnReserved3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved4Column {
                get {
                    return this.columnReserved4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved5Column {
                get {
                    return this.columnReserved5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved6Column {
                get {
                    return this.columnReserved6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved7Column {
                get {
                    return this.columnReserved7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved8Column {
                get {
                    return this.columnReserved8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved9Column {
                get {
                    return this.columnReserved9;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved10Column {
                get {
                    return this.columnReserved10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved11Column {
                get {
                    return this.columnReserved11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GPIOPortColumn {
                get {
                    return this.columnGPIOPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn RportColumn {
                get {
                    return this.columnRport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved15Column {
                get {
                    return this.columnReserved15;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved16Column {
                get {
                    return this.columnReserved16;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn JigsangbalhwaColumn {
                get {
                    return this.columnJigsangbalhwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpeakerTimerColumn {
                get {
                    return this.columnSpeakerTimer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn inputvolumeColumn {
                get {
                    return this.columninputvolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn outputvolumeColumn {
                get {
                    return this.columnoutputvolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dispColumn {
                get {
                    return this.columndisp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Multi_ChColumn {
                get {
                    return this.columnMulti_Ch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SoundDeviceNumColumn {
                get {
                    return this.columnSoundDeviceNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SoundDeviceNameColumn {
                get {
                    return this.columnSoundDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Reserved17Column {
                get {
                    return this.columnReserved17;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn scalelengthColumn {
                get {
                    return this.columnscalelength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn scaleColumn {
                get {
                    return this.columnscale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn noise1Column {
                get {
                    return this.columnnoise1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn noise2Column {
                get {
                    return this.columnnoise2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_volColumn {
                get {
                    return this.columndsp_vol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_vol_emColumn {
                get {
                    return this.columndsp_vol_em;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_serverColumn {
                get {
                    return this.columnsms_server;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_idColumn {
                get {
                    return this.columnsms_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_pwColumn {
                get {
                    return this.columnsms_pw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sms_rcvnoColumn {
                get {
                    return this.columnsms_rcvno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PportColumn {
                get {
                    return this.columnPport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn EmMusicColumn {
                get {
                    return this.columnEmMusic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow this[int index] {
                get {
                    return ((SimplepaRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event SimplepaRowChangeEventHandler SimplepaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddSimplepaRow(SimplepaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow AddSimplepaRow(
                        long SimplePAId, 
                        long TileWidth, 
                        long MapX, 
                        long MapY, 
                        double Zoom, 
                        long debug, 
                        long SpeakerIconSize, 
                        string UserName, 
                        string EMServerIP, 
                        string ServerIP, 
                        string ServerPort, 
                        string Reserved1, 
                        string Reserved2, 
                        string Reserved3, 
                        string Reserved4, 
                        string Reserved5, 
                        string Reserved6, 
                        string Reserved7, 
                        string Reserved8, 
                        string Reserved9, 
                        string Reserved10, 
                        string Reserved11, 
                        string GPIOPort, 
                        string Rport, 
                        string Reserved15, 
                        string Reserved16, 
                        long Jigsangbalhwa, 
                        long SpeakerTimer, 
                        double inputvolume, 
                        double outputvolume, 
                        long disp, 
                        long Multi_Ch, 
                        long SoundDeviceNum, 
                        string SoundDeviceName, 
                        long Reserved17, 
                        double scalelength, 
                        double length, 
                        double scale, 
                        long noise1, 
                        long noise2, 
                        long dsp_vol, 
                        long dsp_vol_em, 
                        string sms_server, 
                        string sms_id, 
                        string sms_pw, 
                        string sms_rcvno, 
                        long Pport, 
                        string EmMusic) {
                SimplepaRow rowSimplepaRow = ((SimplepaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SimplePAId,
                        TileWidth,
                        MapX,
                        MapY,
                        Zoom,
                        debug,
                        SpeakerIconSize,
                        UserName,
                        EMServerIP,
                        ServerIP,
                        ServerPort,
                        Reserved1,
                        Reserved2,
                        Reserved3,
                        Reserved4,
                        Reserved5,
                        Reserved6,
                        Reserved7,
                        Reserved8,
                        Reserved9,
                        Reserved10,
                        Reserved11,
                        GPIOPort,
                        Rport,
                        Reserved15,
                        Reserved16,
                        Jigsangbalhwa,
                        SpeakerTimer,
                        inputvolume,
                        outputvolume,
                        disp,
                        Multi_Ch,
                        SoundDeviceNum,
                        SoundDeviceName,
                        Reserved17,
                        scalelength,
                        length,
                        scale,
                        noise1,
                        noise2,
                        dsp_vol,
                        dsp_vol_em,
                        sms_server,
                        sms_id,
                        sms_pw,
                        sms_rcvno,
                        Pport,
                        EmMusic};
                rowSimplepaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSimplepaRow);
                return rowSimplepaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow FindBySimplePAId(long SimplePAId) {
                return ((SimplepaRow)(this.Rows.Find(new object[] {
                            SimplePAId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SimplepaDataTable cln = ((SimplepaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SimplepaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnSimplePAId = base.Columns["SimplePAId"];
                this.columnTileWidth = base.Columns["TileWidth"];
                this.columnMapX = base.Columns["MapX"];
                this.columnMapY = base.Columns["MapY"];
                this.columnZoom = base.Columns["Zoom"];
                this.columndebug = base.Columns["debug"];
                this.columnSpeakerIconSize = base.Columns["SpeakerIconSize"];
                this.columnUserName = base.Columns["UserName"];
                this.columnEMServerIP = base.Columns["EMServerIP"];
                this.columnServerIP = base.Columns["ServerIP"];
                this.columnServerPort = base.Columns["ServerPort"];
                this.columnReserved1 = base.Columns["Reserved1"];
                this.columnReserved2 = base.Columns["Reserved2"];
                this.columnReserved3 = base.Columns["Reserved3"];
                this.columnReserved4 = base.Columns["Reserved4"];
                this.columnReserved5 = base.Columns["Reserved5"];
                this.columnReserved6 = base.Columns["Reserved6"];
                this.columnReserved7 = base.Columns["Reserved7"];
                this.columnReserved8 = base.Columns["Reserved8"];
                this.columnReserved9 = base.Columns["Reserved9"];
                this.columnReserved10 = base.Columns["Reserved10"];
                this.columnReserved11 = base.Columns["Reserved11"];
                this.columnGPIOPort = base.Columns["GPIOPort"];
                this.columnRport = base.Columns["Rport"];
                this.columnReserved15 = base.Columns["Reserved15"];
                this.columnReserved16 = base.Columns["Reserved16"];
                this.columnJigsangbalhwa = base.Columns["Jigsangbalhwa"];
                this.columnSpeakerTimer = base.Columns["SpeakerTimer"];
                this.columninputvolume = base.Columns["inputvolume"];
                this.columnoutputvolume = base.Columns["outputvolume"];
                this.columndisp = base.Columns["disp"];
                this.columnMulti_Ch = base.Columns["Multi_Ch"];
                this.columnSoundDeviceNum = base.Columns["SoundDeviceNum"];
                this.columnSoundDeviceName = base.Columns["SoundDeviceName"];
                this.columnReserved17 = base.Columns["Reserved17"];
                this.columnscalelength = base.Columns["scalelength"];
                this.columnlength = base.Columns["length"];
                this.columnscale = base.Columns["scale"];
                this.columnnoise1 = base.Columns["noise1"];
                this.columnnoise2 = base.Columns["noise2"];
                this.columndsp_vol = base.Columns["dsp_vol"];
                this.columndsp_vol_em = base.Columns["dsp_vol_em"];
                this.columnsms_server = base.Columns["sms_server"];
                this.columnsms_id = base.Columns["sms_id"];
                this.columnsms_pw = base.Columns["sms_pw"];
                this.columnsms_rcvno = base.Columns["sms_rcvno"];
                this.columnPport = base.Columns["Pport"];
                this.columnEmMusic = base.Columns["EmMusic"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnSimplePAId = new global::System.Data.DataColumn("SimplePAId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimplePAId);
                this.columnTileWidth = new global::System.Data.DataColumn("TileWidth", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTileWidth);
                this.columnMapX = new global::System.Data.DataColumn("MapX", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapX);
                this.columnMapY = new global::System.Data.DataColumn("MapY", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapY);
                this.columnZoom = new global::System.Data.DataColumn("Zoom", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoom);
                this.columndebug = new global::System.Data.DataColumn("debug", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndebug);
                this.columnSpeakerIconSize = new global::System.Data.DataColumn("SpeakerIconSize", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeakerIconSize);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnEMServerIP = new global::System.Data.DataColumn("EMServerIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMServerIP);
                this.columnServerIP = new global::System.Data.DataColumn("ServerIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerIP);
                this.columnServerPort = new global::System.Data.DataColumn("ServerPort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerPort);
                this.columnReserved1 = new global::System.Data.DataColumn("Reserved1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved1);
                this.columnReserved2 = new global::System.Data.DataColumn("Reserved2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved2);
                this.columnReserved3 = new global::System.Data.DataColumn("Reserved3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved3);
                this.columnReserved4 = new global::System.Data.DataColumn("Reserved4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved4);
                this.columnReserved5 = new global::System.Data.DataColumn("Reserved5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved5);
                this.columnReserved6 = new global::System.Data.DataColumn("Reserved6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved6);
                this.columnReserved7 = new global::System.Data.DataColumn("Reserved7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved7);
                this.columnReserved8 = new global::System.Data.DataColumn("Reserved8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved8);
                this.columnReserved9 = new global::System.Data.DataColumn("Reserved9", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved9);
                this.columnReserved10 = new global::System.Data.DataColumn("Reserved10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved10);
                this.columnReserved11 = new global::System.Data.DataColumn("Reserved11", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved11);
                this.columnGPIOPort = new global::System.Data.DataColumn("GPIOPort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPIOPort);
                this.columnRport = new global::System.Data.DataColumn("Rport", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRport);
                this.columnReserved15 = new global::System.Data.DataColumn("Reserved15", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved15);
                this.columnReserved16 = new global::System.Data.DataColumn("Reserved16", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved16);
                this.columnJigsangbalhwa = new global::System.Data.DataColumn("Jigsangbalhwa", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJigsangbalhwa);
                this.columnSpeakerTimer = new global::System.Data.DataColumn("SpeakerTimer", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeakerTimer);
                this.columninputvolume = new global::System.Data.DataColumn("inputvolume", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninputvolume);
                this.columnoutputvolume = new global::System.Data.DataColumn("outputvolume", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoutputvolume);
                this.columndisp = new global::System.Data.DataColumn("disp", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisp);
                this.columnMulti_Ch = new global::System.Data.DataColumn("Multi_Ch", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulti_Ch);
                this.columnSoundDeviceNum = new global::System.Data.DataColumn("SoundDeviceNum", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoundDeviceNum);
                this.columnSoundDeviceName = new global::System.Data.DataColumn("SoundDeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoundDeviceName);
                this.columnReserved17 = new global::System.Data.DataColumn("Reserved17", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved17);
                this.columnscalelength = new global::System.Data.DataColumn("scalelength", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscalelength);
                this.columnlength = new global::System.Data.DataColumn("length", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlength);
                this.columnscale = new global::System.Data.DataColumn("scale", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscale);
                this.columnnoise1 = new global::System.Data.DataColumn("noise1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnoise1);
                this.columnnoise2 = new global::System.Data.DataColumn("noise2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnoise2);
                this.columndsp_vol = new global::System.Data.DataColumn("dsp_vol", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_vol);
                this.columndsp_vol_em = new global::System.Data.DataColumn("dsp_vol_em", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_vol_em);
                this.columnsms_server = new global::System.Data.DataColumn("sms_server", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_server);
                this.columnsms_id = new global::System.Data.DataColumn("sms_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_id);
                this.columnsms_pw = new global::System.Data.DataColumn("sms_pw", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_pw);
                this.columnsms_rcvno = new global::System.Data.DataColumn("sms_rcvno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsms_rcvno);
                this.columnPport = new global::System.Data.DataColumn("Pport", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPport);
                this.columnEmMusic = new global::System.Data.DataColumn("EmMusic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmMusic);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSimplePAId}, true));
                this.columnSimplePAId.AllowDBNull = false;
                this.columnSimplePAId.Unique = true;
                this.columnTileWidth.AllowDBNull = false;
                this.columnMapX.AllowDBNull = false;
                this.columnMapY.AllowDBNull = false;
                this.columnZoom.AllowDBNull = false;
                this.columndebug.AllowDBNull = false;
                this.columnSpeakerIconSize.AllowDBNull = false;
                this.columnJigsangbalhwa.AllowDBNull = false;
                this.columnSpeakerTimer.AllowDBNull = false;
                this.columninputvolume.AllowDBNull = false;
                this.columnoutputvolume.AllowDBNull = false;
                this.columndisp.AllowDBNull = false;
                this.columnMulti_Ch.AllowDBNull = false;
                this.columnSoundDeviceNum.AllowDBNull = false;
                this.columnReserved17.AllowDBNull = false;
                this.columnscalelength.AllowDBNull = false;
                this.columnlength.AllowDBNull = false;
                this.columnscale.AllowDBNull = false;
                this.columnnoise1.AllowDBNull = false;
                this.columnnoise2.AllowDBNull = false;
                this.columndsp_vol.AllowDBNull = false;
                this.columndsp_vol_em.AllowDBNull = false;
                this.columnPport.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow NewSimplepaRow() {
                return ((SimplepaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SimplepaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SimplepaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SimplepaRowChanged != null)) {
                    this.SimplepaRowChanged(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SimplepaRowChanging != null)) {
                    this.SimplepaRowChanging(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SimplepaRowDeleted != null)) {
                    this.SimplepaRowDeleted(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SimplepaRowDeleting != null)) {
                    this.SimplepaRowDeleting(this, new SimplepaRowChangeEvent(((SimplepaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveSimplepaRow(SimplepaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SimplepaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserTreesDataTable : global::System.Data.TypedTableBase<UserTreesRow> {
            
            private global::System.Data.DataColumn columnUserTreeId;
            
            private global::System.Data.DataColumn columnuser_group;
            
            private global::System.Data.DataColumn columnuser_name;
            
            private global::System.Data.DataColumn columnlogin_id;
            
            private global::System.Data.DataColumn columnlogin_password;
            
            private global::System.Data.DataColumn columnlogin_password2;
            
            private global::System.Data.DataColumn columnmobile;
            
            private global::System.Data.DataColumn columnemail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesDataTable() {
                this.TableName = "UserTrees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UserTreesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected UserTreesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn UserTreeIdColumn {
                get {
                    return this.columnUserTreeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn user_groupColumn {
                get {
                    return this.columnuser_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn login_idColumn {
                get {
                    return this.columnlogin_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn login_passwordColumn {
                get {
                    return this.columnlogin_password;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn login_password2Column {
                get {
                    return this.columnlogin_password2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn mobileColumn {
                get {
                    return this.columnmobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow this[int index] {
                get {
                    return ((UserTreesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserTreesRowChangeEventHandler UserTreesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddUserTreesRow(UserTreesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow AddUserTreesRow(string user_group, string user_name, string login_id, string login_password, string login_password2, string mobile, string email) {
                UserTreesRow rowUserTreesRow = ((UserTreesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        user_group,
                        user_name,
                        login_id,
                        login_password,
                        login_password2,
                        mobile,
                        email};
                rowUserTreesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserTreesRow);
                return rowUserTreesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow FindByUserTreeId(long UserTreeId) {
                return ((UserTreesRow)(this.Rows.Find(new object[] {
                            UserTreeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                UserTreesDataTable cln = ((UserTreesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserTreesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnUserTreeId = base.Columns["UserTreeId"];
                this.columnuser_group = base.Columns["user_group"];
                this.columnuser_name = base.Columns["user_name"];
                this.columnlogin_id = base.Columns["login_id"];
                this.columnlogin_password = base.Columns["login_password"];
                this.columnlogin_password2 = base.Columns["login_password2"];
                this.columnmobile = base.Columns["mobile"];
                this.columnemail = base.Columns["email"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnUserTreeId = new global::System.Data.DataColumn("UserTreeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserTreeId);
                this.columnuser_group = new global::System.Data.DataColumn("user_group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_group);
                this.columnuser_name = new global::System.Data.DataColumn("user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_name);
                this.columnlogin_id = new global::System.Data.DataColumn("login_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_id);
                this.columnlogin_password = new global::System.Data.DataColumn("login_password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_password);
                this.columnlogin_password2 = new global::System.Data.DataColumn("login_password2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_password2);
                this.columnmobile = new global::System.Data.DataColumn("mobile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmobile);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserTreeId}, true));
                this.columnUserTreeId.AutoIncrement = true;
                this.columnUserTreeId.AutoIncrementSeed = 1;
                this.columnUserTreeId.AllowDBNull = false;
                this.columnUserTreeId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow NewUserTreesRow() {
                return ((UserTreesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserTreesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(UserTreesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserTreesRowChanged != null)) {
                    this.UserTreesRowChanged(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserTreesRowChanging != null)) {
                    this.UserTreesRowChanging(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserTreesRowDeleted != null)) {
                    this.UserTreesRowDeleted(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserTreesRowDeleting != null)) {
                    this.UserTreesRowDeleting(this, new UserTreesRowChangeEvent(((UserTreesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveUserTreesRow(UserTreesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserTreesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BSTreeDataTable : global::System.Data.TypedTableBase<BSTreeRow> {
            
            private global::System.Data.DataColumn columnBSTreeId;
            
            private global::System.Data.DataColumn columnwtime;
            
            private global::System.Data.DataColumn columnchno;
            
            private global::System.Data.DataColumn columnAssetId;
            
            private global::System.Data.DataColumn columnMusicId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSTreeDataTable() {
                this.TableName = "BSTree";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal BSTreeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected BSTreeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn BSTreeIdColumn {
                get {
                    return this.columnBSTreeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn wtimeColumn {
                get {
                    return this.columnwtime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chnoColumn {
                get {
                    return this.columnchno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AssetIdColumn {
                get {
                    return this.columnAssetId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MusicIdColumn {
                get {
                    return this.columnMusicId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSTreeRow this[int index] {
                get {
                    return ((BSTreeRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSTreeRowChangeEventHandler BSTreeRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSTreeRowChangeEventHandler BSTreeRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSTreeRowChangeEventHandler BSTreeRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSTreeRowChangeEventHandler BSTreeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddBSTreeRow(BSTreeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSTreeRow AddBSTreeRow(System.DateTime wtime, long chno, long AssetId, long MusicId) {
                BSTreeRow rowBSTreeRow = ((BSTreeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        wtime,
                        chno,
                        AssetId,
                        MusicId};
                rowBSTreeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBSTreeRow);
                return rowBSTreeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSTreeRow FindByBSTreeId(long BSTreeId) {
                return ((BSTreeRow)(this.Rows.Find(new object[] {
                            BSTreeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                BSTreeDataTable cln = ((BSTreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BSTreeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnBSTreeId = base.Columns["BSTreeId"];
                this.columnwtime = base.Columns["wtime"];
                this.columnchno = base.Columns["chno"];
                this.columnAssetId = base.Columns["AssetId"];
                this.columnMusicId = base.Columns["MusicId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnBSTreeId = new global::System.Data.DataColumn("BSTreeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBSTreeId);
                this.columnwtime = new global::System.Data.DataColumn("wtime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwtime);
                this.columnchno = new global::System.Data.DataColumn("chno", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchno);
                this.columnAssetId = new global::System.Data.DataColumn("AssetId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetId);
                this.columnMusicId = new global::System.Data.DataColumn("MusicId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMusicId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBSTreeId}, true));
                this.columnBSTreeId.AutoIncrement = true;
                this.columnBSTreeId.AutoIncrementSeed = 1;
                this.columnBSTreeId.AllowDBNull = false;
                this.columnBSTreeId.Unique = true;
                this.columnchno.AllowDBNull = false;
                this.columnAssetId.AllowDBNull = false;
                this.columnMusicId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSTreeRow NewBSTreeRow() {
                return ((BSTreeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BSTreeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(BSTreeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BSTreeRowChanged != null)) {
                    this.BSTreeRowChanged(this, new BSTreeRowChangeEvent(((BSTreeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BSTreeRowChanging != null)) {
                    this.BSTreeRowChanging(this, new BSTreeRowChangeEvent(((BSTreeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BSTreeRowDeleted != null)) {
                    this.BSTreeRowDeleted(this, new BSTreeRowChangeEvent(((BSTreeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BSTreeRowDeleting != null)) {
                    this.BSTreeRowDeleting(this, new BSTreeRowChangeEvent(((BSTreeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveBSTreeRow(BSTreeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BSTreeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeviceDataTable : global::System.Data.TypedTableBase<DeviceRow> {
            
            private global::System.Data.DataColumn columnDeviceId;
            
            private global::System.Data.DataColumn columndevice;
            
            private global::System.Data.DataColumn columnip;
            
            private global::System.Data.DataColumn columnip_dspctrl;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnDeviceName;
            
            private global::System.Data.DataColumn columnDanteModelName;
            
            private global::System.Data.DataColumn columndsp_off_ch1;
            
            private global::System.Data.DataColumn columndsp_off_ch2;
            
            private global::System.Data.DataColumn columnchspk;
            
            private global::System.Data.DataColumn columndsp_name;
            
            private global::System.Data.DataColumn columndsp_chno;
            
            private global::System.Data.DataColumn columndsp_vol;
            
            private global::System.Data.DataColumn columndsp_vol_em;
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columnfloor_em;
            
            private global::System.Data.DataColumn columnemData;
            
            private global::System.Data.DataColumn columnchspk1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeviceDataTable() {
                this.TableName = "Device";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeviceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected DeviceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DeviceIdColumn {
                get {
                    return this.columnDeviceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn deviceColumn {
                get {
                    return this.columndevice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ipColumn {
                get {
                    return this.columnip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ip_dspctrlColumn {
                get {
                    return this.columnip_dspctrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DanteModelNameColumn {
                get {
                    return this.columnDanteModelName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_off_ch1Column {
                get {
                    return this.columndsp_off_ch1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_off_ch2Column {
                get {
                    return this.columndsp_off_ch2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chspkColumn {
                get {
                    return this.columnchspk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_nameColumn {
                get {
                    return this.columndsp_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_chnoColumn {
                get {
                    return this.columndsp_chno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_volColumn {
                get {
                    return this.columndsp_vol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn dsp_vol_emColumn {
                get {
                    return this.columndsp_vol_em;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floor_emColumn {
                get {
                    return this.columnfloor_em;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn emDataColumn {
                get {
                    return this.columnemData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn chspk1Column {
                get {
                    return this.columnchspk1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeviceRow this[int index] {
                get {
                    return ((DeviceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeviceRowChangeEventHandler DeviceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeviceRowChangeEventHandler DeviceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeviceRowChangeEventHandler DeviceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeviceRowChangeEventHandler DeviceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddDeviceRow(DeviceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeviceRow AddDeviceRow(
                        long device, 
                        string ip, 
                        string ip_dspctrl, 
                        string name, 
                        string DeviceName, 
                        string DanteModelName, 
                        string dsp_off_ch1, 
                        string dsp_off_ch2, 
                        long chspk, 
                        string dsp_name, 
                        long dsp_chno, 
                        long dsp_vol, 
                        long dsp_vol_em, 
                        string path, 
                        long floor_em, 
                        string emData, 
                        long chspk1) {
                DeviceRow rowDeviceRow = ((DeviceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        device,
                        ip,
                        ip_dspctrl,
                        name,
                        DeviceName,
                        DanteModelName,
                        dsp_off_ch1,
                        dsp_off_ch2,
                        chspk,
                        dsp_name,
                        dsp_chno,
                        dsp_vol,
                        dsp_vol_em,
                        path,
                        floor_em,
                        emData,
                        chspk1};
                rowDeviceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeviceRow);
                return rowDeviceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeviceRow FindByDeviceId(long DeviceId) {
                return ((DeviceRow)(this.Rows.Find(new object[] {
                            DeviceId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                DeviceDataTable cln = ((DeviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DeviceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnDeviceId = base.Columns["DeviceId"];
                this.columndevice = base.Columns["device"];
                this.columnip = base.Columns["ip"];
                this.columnip_dspctrl = base.Columns["ip_dspctrl"];
                this.columnname = base.Columns["name"];
                this.columnDeviceName = base.Columns["DeviceName"];
                this.columnDanteModelName = base.Columns["DanteModelName"];
                this.columndsp_off_ch1 = base.Columns["dsp_off_ch1"];
                this.columndsp_off_ch2 = base.Columns["dsp_off_ch2"];
                this.columnchspk = base.Columns["chspk"];
                this.columndsp_name = base.Columns["dsp_name"];
                this.columndsp_chno = base.Columns["dsp_chno"];
                this.columndsp_vol = base.Columns["dsp_vol"];
                this.columndsp_vol_em = base.Columns["dsp_vol_em"];
                this.columnpath = base.Columns["path"];
                this.columnfloor_em = base.Columns["floor_em"];
                this.columnemData = base.Columns["emData"];
                this.columnchspk1 = base.Columns["chspk1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnDeviceId = new global::System.Data.DataColumn("DeviceId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceId);
                this.columndevice = new global::System.Data.DataColumn("device", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndevice);
                this.columnip = new global::System.Data.DataColumn("ip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip);
                this.columnip_dspctrl = new global::System.Data.DataColumn("ip_dspctrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip_dspctrl);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnDeviceName = new global::System.Data.DataColumn("DeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.columnDanteModelName = new global::System.Data.DataColumn("DanteModelName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDanteModelName);
                this.columndsp_off_ch1 = new global::System.Data.DataColumn("dsp_off_ch1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_off_ch1);
                this.columndsp_off_ch2 = new global::System.Data.DataColumn("dsp_off_ch2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_off_ch2);
                this.columnchspk = new global::System.Data.DataColumn("chspk", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchspk);
                this.columndsp_name = new global::System.Data.DataColumn("dsp_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_name);
                this.columndsp_chno = new global::System.Data.DataColumn("dsp_chno", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_chno);
                this.columndsp_vol = new global::System.Data.DataColumn("dsp_vol", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_vol);
                this.columndsp_vol_em = new global::System.Data.DataColumn("dsp_vol_em", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsp_vol_em);
                this.columnpath = new global::System.Data.DataColumn("path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnfloor_em = new global::System.Data.DataColumn("floor_em", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor_em);
                this.columnemData = new global::System.Data.DataColumn("emData", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemData);
                this.columnchspk1 = new global::System.Data.DataColumn("chspk1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchspk1);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDeviceId}, true));
                this.columnDeviceId.AutoIncrement = true;
                this.columnDeviceId.AutoIncrementSeed = 1;
                this.columnDeviceId.AllowDBNull = false;
                this.columnDeviceId.Unique = true;
                this.columnchspk1.Caption = "chspk";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeviceRow NewDeviceRow() {
                return ((DeviceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DeviceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(DeviceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeviceRowChanged != null)) {
                    this.DeviceRowChanged(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeviceRowChanging != null)) {
                    this.DeviceRowChanging(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeviceRowDeleted != null)) {
                    this.DeviceRowDeleted(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeviceRowDeleting != null)) {
                    this.DeviceRowDeleting(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveDeviceRow(DeviceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeviceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FloorbasesDataTable : global::System.Data.TypedTableBase<FloorbasesRow> {
            
            private global::System.Data.DataColumn columnFloorBaseId;
            
            private global::System.Data.DataColumn columnbuildingname;
            
            private global::System.Data.DataColumn columnfloororder;
            
            private global::System.Data.DataColumn columnfloor;
            
            private global::System.Data.DataColumn columnfilename;
            
            private global::System.Data.DataColumn columnleft;
            
            private global::System.Data.DataColumn columntop;
            
            private global::System.Data.DataColumn columncontent;
            
            private global::System.Data.DataColumn columnassetname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesDataTable() {
                this.TableName = "Floorbases";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloorbasesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected FloorbasesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FloorBaseIdColumn {
                get {
                    return this.columnFloorBaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn buildingnameColumn {
                get {
                    return this.columnbuildingname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floororderColumn {
                get {
                    return this.columnfloororder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn leftColumn {
                get {
                    return this.columnleft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn topColumn {
                get {
                    return this.columntop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn assetnameColumn {
                get {
                    return this.columnassetname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow this[int index] {
                get {
                    return ((FloorbasesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloorbasesRowChangeEventHandler FloorbasesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddFloorbasesRow(FloorbasesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow AddFloorbasesRow(string buildingname, long floororder, string floor, string filename, long left, long top, string content, string assetname) {
                FloorbasesRow rowFloorbasesRow = ((FloorbasesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        buildingname,
                        floororder,
                        floor,
                        filename,
                        left,
                        top,
                        content,
                        assetname};
                rowFloorbasesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFloorbasesRow);
                return rowFloorbasesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow FindByFloorBaseId(long FloorBaseId) {
                return ((FloorbasesRow)(this.Rows.Find(new object[] {
                            FloorBaseId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FloorbasesDataTable cln = ((FloorbasesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FloorbasesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnFloorBaseId = base.Columns["FloorBaseId"];
                this.columnbuildingname = base.Columns["buildingname"];
                this.columnfloororder = base.Columns["floororder"];
                this.columnfloor = base.Columns["floor"];
                this.columnfilename = base.Columns["filename"];
                this.columnleft = base.Columns["left"];
                this.columntop = base.Columns["top"];
                this.columncontent = base.Columns["content"];
                this.columnassetname = base.Columns["assetname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnFloorBaseId = new global::System.Data.DataColumn("FloorBaseId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloorBaseId);
                this.columnbuildingname = new global::System.Data.DataColumn("buildingname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildingname);
                this.columnfloororder = new global::System.Data.DataColumn("floororder", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloororder);
                this.columnfloor = new global::System.Data.DataColumn("floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columnfilename = new global::System.Data.DataColumn("filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilename);
                this.columnleft = new global::System.Data.DataColumn("left", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleft);
                this.columntop = new global::System.Data.DataColumn("top", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntop);
                this.columncontent = new global::System.Data.DataColumn("content", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent);
                this.columnassetname = new global::System.Data.DataColumn("assetname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassetname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFloorBaseId}, true));
                this.columnFloorBaseId.AutoIncrement = true;
                this.columnFloorBaseId.AutoIncrementSeed = 1;
                this.columnFloorBaseId.AllowDBNull = false;
                this.columnFloorBaseId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow NewFloorbasesRow() {
                return ((FloorbasesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FloorbasesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FloorbasesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FloorbasesRowChanged != null)) {
                    this.FloorbasesRowChanged(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FloorbasesRowChanging != null)) {
                    this.FloorbasesRowChanging(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FloorbasesRowDeleted != null)) {
                    this.FloorbasesRowDeleted(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FloorbasesRowDeleting != null)) {
                    this.FloorbasesRowDeleting(this, new FloorbasesRowChangeEvent(((FloorbasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveFloorbasesRow(FloorbasesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FloorbasesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FloormapsDataTable : global::System.Data.TypedTableBase<FloormapsRow> {
            
            private global::System.Data.DataColumn columnFloorMapId;
            
            private global::System.Data.DataColumn columnbuildingname;
            
            private global::System.Data.DataColumn columnfloororder;
            
            private global::System.Data.DataColumn columnfloor;
            
            private global::System.Data.DataColumn columnfilename;
            
            private global::System.Data.DataColumn columnleft;
            
            private global::System.Data.DataColumn columntop;
            
            private global::System.Data.DataColumn columncontent;
            
            private global::System.Data.DataColumn columnassetname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsDataTable() {
                this.TableName = "Floormaps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloormapsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected FloormapsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FloorMapIdColumn {
                get {
                    return this.columnFloorMapId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn buildingnameColumn {
                get {
                    return this.columnbuildingname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floororderColumn {
                get {
                    return this.columnfloororder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn floorColumn {
                get {
                    return this.columnfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn leftColumn {
                get {
                    return this.columnleft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn topColumn {
                get {
                    return this.columntop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn assetnameColumn {
                get {
                    return this.columnassetname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow this[int index] {
                get {
                    return ((FloormapsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FloormapsRowChangeEventHandler FloormapsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddFloormapsRow(FloormapsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow AddFloormapsRow(string buildingname, long floororder, string floor, string filename, long left, long top, string content, string assetname) {
                FloormapsRow rowFloormapsRow = ((FloormapsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        buildingname,
                        floororder,
                        floor,
                        filename,
                        left,
                        top,
                        content,
                        assetname};
                rowFloormapsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFloormapsRow);
                return rowFloormapsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow FindByFloorMapId(long FloorMapId) {
                return ((FloormapsRow)(this.Rows.Find(new object[] {
                            FloorMapId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FloormapsDataTable cln = ((FloormapsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FloormapsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnFloorMapId = base.Columns["FloorMapId"];
                this.columnbuildingname = base.Columns["buildingname"];
                this.columnfloororder = base.Columns["floororder"];
                this.columnfloor = base.Columns["floor"];
                this.columnfilename = base.Columns["filename"];
                this.columnleft = base.Columns["left"];
                this.columntop = base.Columns["top"];
                this.columncontent = base.Columns["content"];
                this.columnassetname = base.Columns["assetname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnFloorMapId = new global::System.Data.DataColumn("FloorMapId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloorMapId);
                this.columnbuildingname = new global::System.Data.DataColumn("buildingname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildingname);
                this.columnfloororder = new global::System.Data.DataColumn("floororder", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloororder);
                this.columnfloor = new global::System.Data.DataColumn("floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor);
                this.columnfilename = new global::System.Data.DataColumn("filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilename);
                this.columnleft = new global::System.Data.DataColumn("left", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleft);
                this.columntop = new global::System.Data.DataColumn("top", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntop);
                this.columncontent = new global::System.Data.DataColumn("content", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent);
                this.columnassetname = new global::System.Data.DataColumn("assetname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassetname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFloorMapId}, true));
                this.columnFloorMapId.AutoIncrement = true;
                this.columnFloorMapId.AutoIncrementSeed = 1;
                this.columnFloorMapId.AllowDBNull = false;
                this.columnFloorMapId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow NewFloormapsRow() {
                return ((FloormapsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FloormapsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FloormapsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FloormapsRowChanged != null)) {
                    this.FloormapsRowChanged(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FloormapsRowChanging != null)) {
                    this.FloormapsRowChanging(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FloormapsRowDeleted != null)) {
                    this.FloormapsRowDeleted(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FloormapsRowDeleting != null)) {
                    this.FloormapsRowDeleting(this, new FloormapsRowChangeEvent(((FloormapsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveFloormapsRow(FloormapsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FloormapsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BSroomDataTable : global::System.Data.TypedTableBase<BSroomRow> {
            
            private global::System.Data.DataColumn columnBSroomid;
            
            private global::System.Data.DataColumn columnuser_name;
            
            private global::System.Data.DataColumn columnstate;
            
            private global::System.Data.DataColumn columnmode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSroomDataTable() {
                this.TableName = "BSroom";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal BSroomDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected BSroomDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn BSroomidColumn {
                get {
                    return this.columnBSroomid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn modeColumn {
                get {
                    return this.columnmode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSroomRow this[int index] {
                get {
                    return ((BSroomRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSroomRowChangeEventHandler BSroomRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSroomRowChangeEventHandler BSroomRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSroomRowChangeEventHandler BSroomRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event BSroomRowChangeEventHandler BSroomRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddBSroomRow(BSroomRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSroomRow AddBSroomRow(long BSroomid, string user_name, long state, long mode) {
                BSroomRow rowBSroomRow = ((BSroomRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BSroomid,
                        user_name,
                        state,
                        mode};
                rowBSroomRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBSroomRow);
                return rowBSroomRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSroomRow FindByBSroomid(long BSroomid) {
                return ((BSroomRow)(this.Rows.Find(new object[] {
                            BSroomid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                BSroomDataTable cln = ((BSroomDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BSroomDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnBSroomid = base.Columns["BSroomid"];
                this.columnuser_name = base.Columns["user_name"];
                this.columnstate = base.Columns["state"];
                this.columnmode = base.Columns["mode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnBSroomid = new global::System.Data.DataColumn("BSroomid", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBSroomid);
                this.columnuser_name = new global::System.Data.DataColumn("user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_name);
                this.columnstate = new global::System.Data.DataColumn("state", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnmode = new global::System.Data.DataColumn("mode", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBSroomid}, true));
                this.columnBSroomid.AllowDBNull = false;
                this.columnBSroomid.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSroomRow NewBSroomRow() {
                return ((BSroomRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BSroomRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(BSroomRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BSroomRowChanged != null)) {
                    this.BSroomRowChanged(this, new BSroomRowChangeEvent(((BSroomRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BSroomRowChanging != null)) {
                    this.BSroomRowChanging(this, new BSroomRowChangeEvent(((BSroomRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BSroomRowDeleted != null)) {
                    this.BSroomRowDeleted(this, new BSroomRowChangeEvent(((BSroomRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BSroomRowDeleting != null)) {
                    this.BSroomRowDeleting(this, new BSroomRowChangeEvent(((BSroomRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveBSroomRow(BSroomRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BSroomDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AssetGroupsRow : global::System.Data.DataRow {
            
            private AssetGroupsDataTable tableAssetGroups;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetGroupsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssetGroups = ((AssetGroupsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetGroupId {
                get {
                    return ((long)(this[this.tableAssetGroups.AssetGroupIdColumn]));
                }
                set {
                    this[this.tableAssetGroups.AssetGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAssetGroups.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'AssetGroups\' 테이블의 \'Name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssetGroups.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetId {
                get {
                    return ((long)(this[this.tableAssetGroups.AssetIdColumn]));
                }
                set {
                    this[this.tableAssetGroups.AssetIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableAssetGroups.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetNameNull() {
                this[this.tableAssetGroups.NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AssetsRow : global::System.Data.DataRow {
            
            private AssetsDataTable tableAssets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AssetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssets = ((AssetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetId {
                get {
                    return ((long)(this[this.tableAssets.AssetIdColumn]));
                }
                set {
                    this[this.tableAssets.AssetIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ip {
                get {
                    try {
                        return ((string)(this[this.tableAssets.ipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'ip\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.ipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GroupName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.GroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'GroupName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.GroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ZoneName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.ZoneNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'ZoneName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.ZoneNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SpeakerName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.SpeakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'SpeakerName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.SpeakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableAssets.pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'path\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string floor {
                get {
                    if (this.IsfloorNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAssets.floorColumn]));
                    }
                }
                set {
                    this[this.tableAssets.floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DeviceName {
                get {
                    try {
                        return ((string)(this[this.tableAssets.DeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'DeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.DeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableAssets.stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state_old {
                get {
                    try {
                        return ((string)(this[this.tableAssets.state_oldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'state_old\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.state_oldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chk {
                get {
                    try {
                        return ((long)(this[this.tableAssets.chkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'chk\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.chkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long seq {
                get {
                    try {
                        return ((long)(this[this.tableAssets.seqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'seq\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.seqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long ch {
                get {
                    try {
                        return ((long)(this[this.tableAssets.chColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'ch\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.chColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long em1 {
                get {
                    try {
                        return ((long)(this[this.tableAssets.em1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'em1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.em1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long em2 {
                get {
                    try {
                        return ((long)(this[this.tableAssets.em2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'em2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.em2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long em3 {
                get {
                    try {
                        return ((long)(this[this.tableAssets.em3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Assets\' 테이블의 \'em3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableAssets.em3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsipNull() {
                return this.IsNull(this.tableAssets.ipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetipNull() {
                this[this.tableAssets.ipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGroupNameNull() {
                return this.IsNull(this.tableAssets.GroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGroupNameNull() {
                this[this.tableAssets.GroupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsZoneNameNull() {
                return this.IsNull(this.tableAssets.ZoneNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetZoneNameNull() {
                this[this.tableAssets.ZoneNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSpeakerNameNull() {
                return this.IsNull(this.tableAssets.SpeakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSpeakerNameNull() {
                this[this.tableAssets.SpeakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspathNull() {
                return this.IsNull(this.tableAssets.pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpathNull() {
                this[this.tableAssets.pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloorNull() {
                return this.IsNull(this.tableAssets.floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloorNull() {
                this[this.tableAssets.floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDeviceNameNull() {
                return this.IsNull(this.tableAssets.DeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDeviceNameNull() {
                this[this.tableAssets.DeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsstateNull() {
                return this.IsNull(this.tableAssets.stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetstateNull() {
                this[this.tableAssets.stateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isstate_oldNull() {
                return this.IsNull(this.tableAssets.state_oldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setstate_oldNull() {
                this[this.tableAssets.state_oldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IschkNull() {
                return this.IsNull(this.tableAssets.chkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetchkNull() {
                this[this.tableAssets.chkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsseqNull() {
                return this.IsNull(this.tableAssets.seqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetseqNull() {
                this[this.tableAssets.seqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IschNull() {
                return this.IsNull(this.tableAssets.chColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetchNull() {
                this[this.tableAssets.chColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isem1Null() {
                return this.IsNull(this.tableAssets.em1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setem1Null() {
                this[this.tableAssets.em1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isem2Null() {
                return this.IsNull(this.tableAssets.em2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setem2Null() {
                this[this.tableAssets.em2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isem3Null() {
                return this.IsNull(this.tableAssets.em3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setem3Null() {
                this[this.tableAssets.em3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EventvmRow : global::System.Data.DataRow {
            
            private EventvmDataTable tableEventvm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal EventvmRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventvm = ((EventvmDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long EventVMId {
                get {
                    return ((long)(this[this.tableEventvm.EventVMIdColumn]));
                }
                set {
                    this[this.tableEventvm.EventVMIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime write_time {
                get {
                    return ((global::System.DateTime)(this[this.tableEventvm.write_timeColumn]));
                }
                set {
                    this[this.tableEventvm.write_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string event_text {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.event_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'event_text\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.event_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ip {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.ipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'ip\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.ipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'path\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DeviceName {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.DeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'DeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.DeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableEventvm.stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long alarm {
                get {
                    try {
                        return ((long)(this[this.tableEventvm.alarmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Eventvm\' 테이블의 \'alarm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableEventvm.alarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isevent_textNull() {
                return this.IsNull(this.tableEventvm.event_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setevent_textNull() {
                this[this.tableEventvm.event_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsipNull() {
                return this.IsNull(this.tableEventvm.ipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetipNull() {
                this[this.tableEventvm.ipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspathNull() {
                return this.IsNull(this.tableEventvm.pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpathNull() {
                this[this.tableEventvm.pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDeviceNameNull() {
                return this.IsNull(this.tableEventvm.DeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDeviceNameNull() {
                this[this.tableEventvm.DeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsstateNull() {
                return this.IsNull(this.tableEventvm.stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetstateNull() {
                this[this.tableEventvm.stateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsalarmNull() {
                return this.IsNull(this.tableEventvm.alarmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetalarmNull() {
                this[this.tableEventvm.alarmColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class HolidaysRow : global::System.Data.DataRow {
            
            private HolidaysDataTable tableHolidays;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal HolidaysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHolidays = ((HolidaysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long HolidayId {
                get {
                    return ((long)(this[this.tableHolidays.HolidayIdColumn]));
                }
                set {
                    this[this.tableHolidays.HolidayIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime hDate {
                get {
                    return ((global::System.DateTime)(this[this.tableHolidays.hDateColumn]));
                }
                set {
                    this[this.tableHolidays.hDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableHolidays.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Holidays\' 테이블의 \'Description\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHolidays.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableHolidays.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tableHolidays.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class InfoTreesRow : global::System.Data.DataRow {
            
            private InfoTreesDataTable tableInfoTrees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal InfoTreesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInfoTrees = ((InfoTreesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long InfoTreeId {
                get {
                    return ((long)(this[this.tableInfoTrees.InfoTreeIdColumn]));
                }
                set {
                    this[this.tableInfoTrees.InfoTreeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableInfoTrees.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'Id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableInfoTrees.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'Subject\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableInfoTrees.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'Name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long gstreeAssetGroupId {
                get {
                    try {
                        return ((long)(this[this.tableInfoTrees.gstreeAssetGroupIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'InfoTrees\' 테이블의 \'gstreeAssetGroupId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableInfoTrees.gstreeAssetGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableInfoTrees.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIdNull() {
                this[this.tableInfoTrees.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableInfoTrees.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSubjectNull() {
                this[this.tableInfoTrees.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableInfoTrees.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetNameNull() {
                this[this.tableInfoTrees.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsgstreeAssetGroupIdNull() {
                return this.IsNull(this.tableInfoTrees.gstreeAssetGroupIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetgstreeAssetGroupIdNull() {
                this[this.tableInfoTrees.gstreeAssetGroupIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class MusicsRow : global::System.Data.DataRow {
            
            private MusicsDataTable tableMusics;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MusicsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMusics = ((MusicsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long MusicId {
                get {
                    return ((long)(this[this.tableMusics.MusicIdColumn]));
                }
                set {
                    this[this.tableMusics.MusicIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableMusics.FileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'FileName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.FileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string FileContent {
                get {
                    try {
                        return ((string)(this[this.tableMusics.FileContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'FileContent\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.FileContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string deletable {
                get {
                    try {
                        return ((string)(this[this.tableMusics.deletableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'deletable\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.deletableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string duration {
                get {
                    try {
                        return ((string)(this[this.tableMusics.durationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Musics\' 테이블의 \'duration\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMusics.durationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableMusics.FileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetFileNameNull() {
                this[this.tableMusics.FileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsFileContentNull() {
                return this.IsNull(this.tableMusics.FileContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetFileContentNull() {
                this[this.tableMusics.FileContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdeletableNull() {
                return this.IsNull(this.tableMusics.deletableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdeletableNull() {
                this[this.tableMusics.deletableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdurationNull() {
                return this.IsNull(this.tableMusics.durationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdurationNull() {
                this[this.tableMusics.durationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SimpleMultisRow : global::System.Data.DataRow {
            
            private SimpleMultisDataTable tableSimpleMultis;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimpleMultisRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSimpleMultis = ((SimpleMultisDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SimpleMultiId {
                get {
                    return ((long)(this[this.tableSimpleMultis.SimpleMultiIdColumn]));
                }
                set {
                    this[this.tableSimpleMultis.SimpleMultiIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long idno {
                get {
                    return ((long)(this[this.tableSimpleMultis.idnoColumn]));
                }
                set {
                    this[this.tableSimpleMultis.idnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chno {
                get {
                    return ((long)(this[this.tableSimpleMultis.chnoColumn]));
                }
                set {
                    this[this.tableSimpleMultis.chnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Subject\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long gstreeAssetGroupId {
                get {
                    try {
                        return ((long)(this[this.tableSimpleMultis.gstreeAssetGroupIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'gstreeAssetGroupId\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.gstreeAssetGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string stm {
                get {
                    return ((string)(this[this.tableSimpleMultis.stmColumn]));
                }
                set {
                    this[this.tableSimpleMultis.stmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string etm {
                get {
                    return ((string)(this[this.tableSimpleMultis.etmColumn]));
                }
                set {
                    this[this.tableSimpleMultis.etmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string duration {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.durationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'duration\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.durationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long week {
                get {
                    return ((long)(this[this.tableSimpleMultis.weekColumn]));
                }
                set {
                    this[this.tableSimpleMultis.weekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day1 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day1Column]));
                }
                set {
                    this[this.tableSimpleMultis.day1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day2 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day2Column]));
                }
                set {
                    this[this.tableSimpleMultis.day2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day3 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day3Column]));
                }
                set {
                    this[this.tableSimpleMultis.day3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day4 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day4Column]));
                }
                set {
                    this[this.tableSimpleMultis.day4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day5 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day5Column]));
                }
                set {
                    this[this.tableSimpleMultis.day5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day6 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day6Column]));
                }
                set {
                    this[this.tableSimpleMultis.day6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long day7 {
                get {
                    return ((long)(this[this.tableSimpleMultis.day7Column]));
                }
                set {
                    this[this.tableSimpleMultis.day7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string tss {
                get {
                    return ((string)(this[this.tableSimpleMultis.tssColumn]));
                }
                set {
                    this[this.tableSimpleMultis.tssColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string tse {
                get {
                    return ((string)(this[this.tableSimpleMultis.tseColumn]));
                }
                set {
                    this[this.tableSimpleMultis.tseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Color16 {
                get {
                    try {
                        return ((string)(this[this.tableSimpleMultis.Color16Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'SimpleMultis\' 테이블의 \'Color16\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimpleMultis.Color16Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long overlap {
                get {
                    return ((long)(this[this.tableSimpleMultis.overlapColumn]));
                }
                set {
                    this[this.tableSimpleMultis.overlapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long weekday {
                get {
                    return ((long)(this[this.tableSimpleMultis.weekdayColumn]));
                }
                set {
                    this[this.tableSimpleMultis.weekdayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableSimpleMultis.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIdNull() {
                this[this.tableSimpleMultis.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableSimpleMultis.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSubjectNull() {
                this[this.tableSimpleMultis.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableSimpleMultis.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetNameNull() {
                this[this.tableSimpleMultis.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsgstreeAssetGroupIdNull() {
                return this.IsNull(this.tableSimpleMultis.gstreeAssetGroupIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetgstreeAssetGroupIdNull() {
                this[this.tableSimpleMultis.gstreeAssetGroupIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdurationNull() {
                return this.IsNull(this.tableSimpleMultis.durationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdurationNull() {
                this[this.tableSimpleMultis.durationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsColor16Null() {
                return this.IsNull(this.tableSimpleMultis.Color16Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetColor16Null() {
                this[this.tableSimpleMultis.Color16Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SimplepaRow : global::System.Data.DataRow {
            
            private SimplepaDataTable tableSimplepa;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SimplepaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSimplepa = ((SimplepaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SimplePAId {
                get {
                    return ((long)(this[this.tableSimplepa.SimplePAIdColumn]));
                }
                set {
                    this[this.tableSimplepa.SimplePAIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long TileWidth {
                get {
                    return ((long)(this[this.tableSimplepa.TileWidthColumn]));
                }
                set {
                    this[this.tableSimplepa.TileWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long MapX {
                get {
                    return ((long)(this[this.tableSimplepa.MapXColumn]));
                }
                set {
                    this[this.tableSimplepa.MapXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long MapY {
                get {
                    return ((long)(this[this.tableSimplepa.MapYColumn]));
                }
                set {
                    this[this.tableSimplepa.MapYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double Zoom {
                get {
                    return ((double)(this[this.tableSimplepa.ZoomColumn]));
                }
                set {
                    this[this.tableSimplepa.ZoomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long debug {
                get {
                    return ((long)(this[this.tableSimplepa.debugColumn]));
                }
                set {
                    this[this.tableSimplepa.debugColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SpeakerIconSize {
                get {
                    return ((long)(this[this.tableSimplepa.SpeakerIconSizeColumn]));
                }
                set {
                    this[this.tableSimplepa.SpeakerIconSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'UserName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string EMServerIP {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.EMServerIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'EMServerIP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.EMServerIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ServerIP {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.ServerIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'ServerIP\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.ServerIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ServerPort {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.ServerPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'ServerPort\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.ServerPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved1 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved2 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved3 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved4 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved4\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved5 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved5\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved6 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved6\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved7 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved7\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved8 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved8\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved9 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved9Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved9\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved9Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved10 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved10\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved11 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved11\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GPIOPort {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.GPIOPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'GPIOPort\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.GPIOPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Rport {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.RportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Rport\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.RportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved15 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved15Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved15\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved15Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Reserved16 {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.Reserved16Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'Reserved16\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.Reserved16Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Jigsangbalhwa {
                get {
                    return ((long)(this[this.tableSimplepa.JigsangbalhwaColumn]));
                }
                set {
                    this[this.tableSimplepa.JigsangbalhwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SpeakerTimer {
                get {
                    return ((long)(this[this.tableSimplepa.SpeakerTimerColumn]));
                }
                set {
                    this[this.tableSimplepa.SpeakerTimerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double inputvolume {
                get {
                    return ((double)(this[this.tableSimplepa.inputvolumeColumn]));
                }
                set {
                    this[this.tableSimplepa.inputvolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double outputvolume {
                get {
                    return ((double)(this[this.tableSimplepa.outputvolumeColumn]));
                }
                set {
                    this[this.tableSimplepa.outputvolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long disp {
                get {
                    return ((long)(this[this.tableSimplepa.dispColumn]));
                }
                set {
                    this[this.tableSimplepa.dispColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Multi_Ch {
                get {
                    return ((long)(this[this.tableSimplepa.Multi_ChColumn]));
                }
                set {
                    this[this.tableSimplepa.Multi_ChColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long SoundDeviceNum {
                get {
                    return ((long)(this[this.tableSimplepa.SoundDeviceNumColumn]));
                }
                set {
                    this[this.tableSimplepa.SoundDeviceNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SoundDeviceName {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.SoundDeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'SoundDeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.SoundDeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Reserved17 {
                get {
                    return ((long)(this[this.tableSimplepa.Reserved17Column]));
                }
                set {
                    this[this.tableSimplepa.Reserved17Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double scalelength {
                get {
                    return ((double)(this[this.tableSimplepa.scalelengthColumn]));
                }
                set {
                    this[this.tableSimplepa.scalelengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double length {
                get {
                    return ((double)(this[this.tableSimplepa.lengthColumn]));
                }
                set {
                    this[this.tableSimplepa.lengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double scale {
                get {
                    return ((double)(this[this.tableSimplepa.scaleColumn]));
                }
                set {
                    this[this.tableSimplepa.scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long noise1 {
                get {
                    return ((long)(this[this.tableSimplepa.noise1Column]));
                }
                set {
                    this[this.tableSimplepa.noise1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long noise2 {
                get {
                    return ((long)(this[this.tableSimplepa.noise2Column]));
                }
                set {
                    this[this.tableSimplepa.noise2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long dsp_vol {
                get {
                    return ((long)(this[this.tableSimplepa.dsp_volColumn]));
                }
                set {
                    this[this.tableSimplepa.dsp_volColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long dsp_vol_em {
                get {
                    return ((long)(this[this.tableSimplepa.dsp_vol_emColumn]));
                }
                set {
                    this[this.tableSimplepa.dsp_vol_emColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_server {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_serverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_server\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_serverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_id {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_pw {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_pwColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_pw\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_pwColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sms_rcvno {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.sms_rcvnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'sms_rcvno\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.sms_rcvnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long Pport {
                get {
                    return ((long)(this[this.tableSimplepa.PportColumn]));
                }
                set {
                    this[this.tableSimplepa.PportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string EmMusic {
                get {
                    try {
                        return ((string)(this[this.tableSimplepa.EmMusicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Simplepa\' 테이블의 \'EmMusic\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableSimplepa.EmMusicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableSimplepa.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUserNameNull() {
                this[this.tableSimplepa.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsEMServerIPNull() {
                return this.IsNull(this.tableSimplepa.EMServerIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetEMServerIPNull() {
                this[this.tableSimplepa.EMServerIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsServerIPNull() {
                return this.IsNull(this.tableSimplepa.ServerIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetServerIPNull() {
                this[this.tableSimplepa.ServerIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsServerPortNull() {
                return this.IsNull(this.tableSimplepa.ServerPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetServerPortNull() {
                this[this.tableSimplepa.ServerPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved1Null() {
                return this.IsNull(this.tableSimplepa.Reserved1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved1Null() {
                this[this.tableSimplepa.Reserved1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved2Null() {
                return this.IsNull(this.tableSimplepa.Reserved2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved2Null() {
                this[this.tableSimplepa.Reserved2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved3Null() {
                return this.IsNull(this.tableSimplepa.Reserved3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved3Null() {
                this[this.tableSimplepa.Reserved3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved4Null() {
                return this.IsNull(this.tableSimplepa.Reserved4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved4Null() {
                this[this.tableSimplepa.Reserved4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved5Null() {
                return this.IsNull(this.tableSimplepa.Reserved5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved5Null() {
                this[this.tableSimplepa.Reserved5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved6Null() {
                return this.IsNull(this.tableSimplepa.Reserved6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved6Null() {
                this[this.tableSimplepa.Reserved6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved7Null() {
                return this.IsNull(this.tableSimplepa.Reserved7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved7Null() {
                this[this.tableSimplepa.Reserved7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved8Null() {
                return this.IsNull(this.tableSimplepa.Reserved8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved8Null() {
                this[this.tableSimplepa.Reserved8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved9Null() {
                return this.IsNull(this.tableSimplepa.Reserved9Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved9Null() {
                this[this.tableSimplepa.Reserved9Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved10Null() {
                return this.IsNull(this.tableSimplepa.Reserved10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved10Null() {
                this[this.tableSimplepa.Reserved10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved11Null() {
                return this.IsNull(this.tableSimplepa.Reserved11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved11Null() {
                this[this.tableSimplepa.Reserved11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGPIOPortNull() {
                return this.IsNull(this.tableSimplepa.GPIOPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGPIOPortNull() {
                this[this.tableSimplepa.GPIOPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRportNull() {
                return this.IsNull(this.tableSimplepa.RportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRportNull() {
                this[this.tableSimplepa.RportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved15Null() {
                return this.IsNull(this.tableSimplepa.Reserved15Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved15Null() {
                this[this.tableSimplepa.Reserved15Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsReserved16Null() {
                return this.IsNull(this.tableSimplepa.Reserved16Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetReserved16Null() {
                this[this.tableSimplepa.Reserved16Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSoundDeviceNameNull() {
                return this.IsNull(this.tableSimplepa.SoundDeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSoundDeviceNameNull() {
                this[this.tableSimplepa.SoundDeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_serverNull() {
                return this.IsNull(this.tableSimplepa.sms_serverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_serverNull() {
                this[this.tableSimplepa.sms_serverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_idNull() {
                return this.IsNull(this.tableSimplepa.sms_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_idNull() {
                this[this.tableSimplepa.sms_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_pwNull() {
                return this.IsNull(this.tableSimplepa.sms_pwColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_pwNull() {
                this[this.tableSimplepa.sms_pwColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issms_rcvnoNull() {
                return this.IsNull(this.tableSimplepa.sms_rcvnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsms_rcvnoNull() {
                this[this.tableSimplepa.sms_rcvnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsEmMusicNull() {
                return this.IsNull(this.tableSimplepa.EmMusicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetEmMusicNull() {
                this[this.tableSimplepa.EmMusicColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UserTreesRow : global::System.Data.DataRow {
            
            private UserTreesDataTable tableUserTrees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UserTreesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserTrees = ((UserTreesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long UserTreeId {
                get {
                    return ((long)(this[this.tableUserTrees.UserTreeIdColumn]));
                }
                set {
                    this[this.tableUserTrees.UserTreeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string user_group {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.user_groupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'user_group\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.user_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string user_name {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.user_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'user_name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string login_id {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.login_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'login_id\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.login_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string login_password {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.login_passwordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'login_password\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.login_passwordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string login_password2 {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.login_password2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'login_password2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.login_password2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string mobile {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.mobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'mobile\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.mobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableUserTrees.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'UserTrees\' 테이블의 \'email\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableUserTrees.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuser_groupNull() {
                return this.IsNull(this.tableUserTrees.user_groupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuser_groupNull() {
                this[this.tableUserTrees.user_groupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuser_nameNull() {
                return this.IsNull(this.tableUserTrees.user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuser_nameNull() {
                this[this.tableUserTrees.user_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islogin_idNull() {
                return this.IsNull(this.tableUserTrees.login_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlogin_idNull() {
                this[this.tableUserTrees.login_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islogin_passwordNull() {
                return this.IsNull(this.tableUserTrees.login_passwordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlogin_passwordNull() {
                this[this.tableUserTrees.login_passwordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islogin_password2Null() {
                return this.IsNull(this.tableUserTrees.login_password2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlogin_password2Null() {
                this[this.tableUserTrees.login_password2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsmobileNull() {
                return this.IsNull(this.tableUserTrees.mobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetmobileNull() {
                this[this.tableUserTrees.mobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsemailNull() {
                return this.IsNull(this.tableUserTrees.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetemailNull() {
                this[this.tableUserTrees.emailColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class BSTreeRow : global::System.Data.DataRow {
            
            private BSTreeDataTable tableBSTree;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal BSTreeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBSTree = ((BSTreeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long BSTreeId {
                get {
                    return ((long)(this[this.tableBSTree.BSTreeIdColumn]));
                }
                set {
                    this[this.tableBSTree.BSTreeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime wtime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBSTree.wtimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'BSTree\' 테이블의 \'wtime\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableBSTree.wtimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chno {
                get {
                    return ((long)(this[this.tableBSTree.chnoColumn]));
                }
                set {
                    this[this.tableBSTree.chnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long AssetId {
                get {
                    return ((long)(this[this.tableBSTree.AssetIdColumn]));
                }
                set {
                    this[this.tableBSTree.AssetIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long MusicId {
                get {
                    return ((long)(this[this.tableBSTree.MusicIdColumn]));
                }
                set {
                    this[this.tableBSTree.MusicIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IswtimeNull() {
                return this.IsNull(this.tableBSTree.wtimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetwtimeNull() {
                this[this.tableBSTree.wtimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DeviceRow : global::System.Data.DataRow {
            
            private DeviceDataTable tableDevice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeviceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevice = ((DeviceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long DeviceId {
                get {
                    return ((long)(this[this.tableDevice.DeviceIdColumn]));
                }
                set {
                    this[this.tableDevice.DeviceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long device {
                get {
                    try {
                        return ((long)(this[this.tableDevice.deviceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'device\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.deviceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ip {
                get {
                    try {
                        return ((string)(this[this.tableDevice.ipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'ip\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.ipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ip_dspctrl {
                get {
                    try {
                        return ((string)(this[this.tableDevice.ip_dspctrlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'ip_dspctrl\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.ip_dspctrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableDevice.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DeviceName {
                get {
                    try {
                        return ((string)(this[this.tableDevice.DeviceNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'DeviceName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.DeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DanteModelName {
                get {
                    try {
                        return ((string)(this[this.tableDevice.DanteModelNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'DanteModelName\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.DanteModelNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string dsp_off_ch1 {
                get {
                    try {
                        return ((string)(this[this.tableDevice.dsp_off_ch1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'dsp_off_ch1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.dsp_off_ch1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string dsp_off_ch2 {
                get {
                    try {
                        return ((string)(this[this.tableDevice.dsp_off_ch2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'dsp_off_ch2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.dsp_off_ch2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chspk {
                get {
                    try {
                        return ((long)(this[this.tableDevice.chspkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'chspk\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.chspkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string dsp_name {
                get {
                    try {
                        return ((string)(this[this.tableDevice.dsp_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'dsp_name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.dsp_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long dsp_chno {
                get {
                    try {
                        return ((long)(this[this.tableDevice.dsp_chnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'dsp_chno\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.dsp_chnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long dsp_vol {
                get {
                    try {
                        return ((long)(this[this.tableDevice.dsp_volColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'dsp_vol\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.dsp_volColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long dsp_vol_em {
                get {
                    try {
                        return ((long)(this[this.tableDevice.dsp_vol_emColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'dsp_vol_em\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.dsp_vol_emColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableDevice.pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'path\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long floor_em {
                get {
                    try {
                        return ((long)(this[this.tableDevice.floor_emColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'floor_em\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.floor_emColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string emData {
                get {
                    try {
                        return ((string)(this[this.tableDevice.emDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'emData\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.emDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long chspk1 {
                get {
                    try {
                        return ((long)(this[this.tableDevice.chspk1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Device\' 테이블의 \'chspk1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableDevice.chspk1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdeviceNull() {
                return this.IsNull(this.tableDevice.deviceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdeviceNull() {
                this[this.tableDevice.deviceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsipNull() {
                return this.IsNull(this.tableDevice.ipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetipNull() {
                this[this.tableDevice.ipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isip_dspctrlNull() {
                return this.IsNull(this.tableDevice.ip_dspctrlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setip_dspctrlNull() {
                this[this.tableDevice.ip_dspctrlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsnameNull() {
                return this.IsNull(this.tableDevice.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetnameNull() {
                this[this.tableDevice.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDeviceNameNull() {
                return this.IsNull(this.tableDevice.DeviceNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDeviceNameNull() {
                this[this.tableDevice.DeviceNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDanteModelNameNull() {
                return this.IsNull(this.tableDevice.DanteModelNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDanteModelNameNull() {
                this[this.tableDevice.DanteModelNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdsp_off_ch1Null() {
                return this.IsNull(this.tableDevice.dsp_off_ch1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdsp_off_ch1Null() {
                this[this.tableDevice.dsp_off_ch1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdsp_off_ch2Null() {
                return this.IsNull(this.tableDevice.dsp_off_ch2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdsp_off_ch2Null() {
                this[this.tableDevice.dsp_off_ch2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IschspkNull() {
                return this.IsNull(this.tableDevice.chspkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetchspkNull() {
                this[this.tableDevice.chspkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdsp_nameNull() {
                return this.IsNull(this.tableDevice.dsp_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdsp_nameNull() {
                this[this.tableDevice.dsp_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdsp_chnoNull() {
                return this.IsNull(this.tableDevice.dsp_chnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdsp_chnoNull() {
                this[this.tableDevice.dsp_chnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdsp_volNull() {
                return this.IsNull(this.tableDevice.dsp_volColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdsp_volNull() {
                this[this.tableDevice.dsp_volColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdsp_vol_emNull() {
                return this.IsNull(this.tableDevice.dsp_vol_emColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdsp_vol_emNull() {
                this[this.tableDevice.dsp_vol_emColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspathNull() {
                return this.IsNull(this.tableDevice.pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpathNull() {
                this[this.tableDevice.pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isfloor_emNull() {
                return this.IsNull(this.tableDevice.floor_emColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setfloor_emNull() {
                this[this.tableDevice.floor_emColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsemDataNull() {
                return this.IsNull(this.tableDevice.emDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetemDataNull() {
                this[this.tableDevice.emDataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ischspk1Null() {
                return this.IsNull(this.tableDevice.chspk1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setchspk1Null() {
                this[this.tableDevice.chspk1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FloorbasesRow : global::System.Data.DataRow {
            
            private FloorbasesDataTable tableFloorbases;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloorbasesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFloorbases = ((FloorbasesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long FloorBaseId {
                get {
                    return ((long)(this[this.tableFloorbases.FloorBaseIdColumn]));
                }
                set {
                    this[this.tableFloorbases.FloorBaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string buildingname {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.buildingnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'buildingname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.buildingnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long floororder {
                get {
                    try {
                        return ((long)(this[this.tableFloorbases.floororderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'floororder\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.floororderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string filename {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.filenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'filename\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.filenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long left {
                get {
                    try {
                        return ((long)(this[this.tableFloorbases.leftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'left\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.leftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long top {
                get {
                    try {
                        return ((long)(this[this.tableFloorbases.topColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'top\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.topColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.contentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'content\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.contentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string assetname {
                get {
                    try {
                        return ((string)(this[this.tableFloorbases.assetnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floorbases\' 테이블의 \'assetname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloorbases.assetnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbuildingnameNull() {
                return this.IsNull(this.tableFloorbases.buildingnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbuildingnameNull() {
                this[this.tableFloorbases.buildingnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloororderNull() {
                return this.IsNull(this.tableFloorbases.floororderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloororderNull() {
                this[this.tableFloorbases.floororderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloorNull() {
                return this.IsNull(this.tableFloorbases.floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloorNull() {
                this[this.tableFloorbases.floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfilenameNull() {
                return this.IsNull(this.tableFloorbases.filenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfilenameNull() {
                this[this.tableFloorbases.filenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsleftNull() {
                return this.IsNull(this.tableFloorbases.leftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetleftNull() {
                this[this.tableFloorbases.leftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IstopNull() {
                return this.IsNull(this.tableFloorbases.topColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SettopNull() {
                this[this.tableFloorbases.topColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IscontentNull() {
                return this.IsNull(this.tableFloorbases.contentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetcontentNull() {
                this[this.tableFloorbases.contentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsassetnameNull() {
                return this.IsNull(this.tableFloorbases.assetnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetassetnameNull() {
                this[this.tableFloorbases.assetnameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FloormapsRow : global::System.Data.DataRow {
            
            private FloormapsDataTable tableFloormaps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FloormapsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFloormaps = ((FloormapsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long FloorMapId {
                get {
                    return ((long)(this[this.tableFloormaps.FloorMapIdColumn]));
                }
                set {
                    this[this.tableFloormaps.FloorMapIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string buildingname {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.buildingnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'buildingname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.buildingnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long floororder {
                get {
                    try {
                        return ((long)(this[this.tableFloormaps.floororderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'floororder\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.floororderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string floor {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'floor\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string filename {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.filenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'filename\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.filenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long left {
                get {
                    try {
                        return ((long)(this[this.tableFloormaps.leftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'left\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.leftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long top {
                get {
                    try {
                        return ((long)(this[this.tableFloormaps.topColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'top\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.topColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.contentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'content\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.contentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string assetname {
                get {
                    try {
                        return ((string)(this[this.tableFloormaps.assetnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'Floormaps\' 테이블의 \'assetname\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableFloormaps.assetnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbuildingnameNull() {
                return this.IsNull(this.tableFloormaps.buildingnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbuildingnameNull() {
                this[this.tableFloormaps.buildingnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloororderNull() {
                return this.IsNull(this.tableFloormaps.floororderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloororderNull() {
                this[this.tableFloormaps.floororderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfloorNull() {
                return this.IsNull(this.tableFloormaps.floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfloorNull() {
                this[this.tableFloormaps.floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfilenameNull() {
                return this.IsNull(this.tableFloormaps.filenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfilenameNull() {
                this[this.tableFloormaps.filenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsleftNull() {
                return this.IsNull(this.tableFloormaps.leftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetleftNull() {
                this[this.tableFloormaps.leftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IstopNull() {
                return this.IsNull(this.tableFloormaps.topColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SettopNull() {
                this[this.tableFloormaps.topColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IscontentNull() {
                return this.IsNull(this.tableFloormaps.contentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetcontentNull() {
                this[this.tableFloormaps.contentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsassetnameNull() {
                return this.IsNull(this.tableFloormaps.assetnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetassetnameNull() {
                this[this.tableFloormaps.assetnameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class BSroomRow : global::System.Data.DataRow {
            
            private BSroomDataTable tableBSroom;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal BSroomRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBSroom = ((BSroomDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long BSroomid {
                get {
                    return ((long)(this[this.tableBSroom.BSroomidColumn]));
                }
                set {
                    this[this.tableBSroom.BSroomidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string user_name {
                get {
                    try {
                        return ((string)(this[this.tableBSroom.user_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'BSroom\' 테이블의 \'user_name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableBSroom.user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long state {
                get {
                    try {
                        return ((long)(this[this.tableBSroom.stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'BSroom\' 테이블의 \'state\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableBSroom.stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long mode {
                get {
                    try {
                        return ((long)(this[this.tableBSroom.modeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'BSroom\' 테이블의 \'mode\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableBSroom.modeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuser_nameNull() {
                return this.IsNull(this.tableBSroom.user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuser_nameNull() {
                this[this.tableBSroom.user_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsstateNull() {
                return this.IsNull(this.tableBSroom.stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetstateNull() {
                this[this.tableBSroom.stateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsmodeNull() {
                return this.IsNull(this.tableBSroom.modeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetmodeNull() {
                this[this.tableBSroom.modeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class AssetGroupsRowChangeEvent : global::System.EventArgs {
            
            private AssetGroupsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRowChangeEvent(AssetGroupsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetGroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class AssetsRowChangeEvent : global::System.EventArgs {
            
            private AssetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRowChangeEvent(AssetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AssetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class EventvmRowChangeEvent : global::System.EventArgs {
            
            private EventvmRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRowChangeEvent(EventvmRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public EventvmRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class HolidaysRowChangeEvent : global::System.EventArgs {
            
            private HolidaysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRowChangeEvent(HolidaysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public HolidaysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class InfoTreesRowChangeEvent : global::System.EventArgs {
            
            private InfoTreesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRowChangeEvent(InfoTreesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public InfoTreesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class MusicsRowChangeEvent : global::System.EventArgs {
            
            private MusicsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRowChangeEvent(MusicsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MusicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class SimpleMultisRowChangeEvent : global::System.EventArgs {
            
            private SimpleMultisRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRowChangeEvent(SimpleMultisRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimpleMultisRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class SimplepaRowChangeEvent : global::System.EventArgs {
            
            private SimplepaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRowChangeEvent(SimplepaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public SimplepaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class UserTreesRowChangeEvent : global::System.EventArgs {
            
            private UserTreesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRowChangeEvent(UserTreesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserTreesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class BSTreeRowChangeEvent : global::System.EventArgs {
            
            private BSTreeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSTreeRowChangeEvent(BSTreeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSTreeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class DeviceRowChangeEvent : global::System.EventArgs {
            
            private DeviceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeviceRowChangeEvent(DeviceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class FloorbasesRowChangeEvent : global::System.EventArgs {
            
            private FloorbasesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRowChangeEvent(FloorbasesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloorbasesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class FloormapsRowChangeEvent : global::System.EventArgs {
            
            private FloormapsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRowChangeEvent(FloormapsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FloormapsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class BSroomRowChangeEvent : global::System.EventArgs {
            
            private BSroomRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSroomRowChangeEvent(BSroomRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public BSroomRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Wisej.CodeProject.DataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AssetGroupsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public AssetGroupsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AssetGroups";
            tableMapping.ColumnMappings.Add("AssetGroupId", "AssetGroupId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AssetId", "AssetId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"AssetGroups\" WHERE ((\"AssetGroupId\" = :Original_AssetGroupId)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"AssetGroups\" (\"AssetGroupId\", \"Name\", \"AssetId\") VALUES (:Ass" +
                "etGroupId, :Name, :AssetId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"AssetGroups\" SET \"AssetGroupId\" = :AssetGroupId, \"Name\" = :Name, \"" +
                "AssetId\" = :AssetId WHERE ((\"AssetGroupId\" = :Original_AssetGroupId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[4];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  AssetGroupId, Name, AssetId\r\nFROM     AssetGroups";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM AssetGroups\r\nWHERE  (AssetGroupId = :Original_AssetGroupId)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "AssetGroupId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._commandCollection[1].Parameters.Add(param);
            this._commandCollection[2] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT  AssetGroupId\r\nFROM     AssetGroups\r\nWHERE  (Name = :Name)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._commandCollection[2].Parameters.Add(param);
            this._commandCollection[3] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO \"main\".\"AssetGroups\" (\"Name\") VALUES (:Name)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._commandCollection[3].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AssetGroupsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AssetGroupsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AssetGroupsDataTable dataTable = new DataSet1.AssetGroupsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AssetGroupsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "AssetGroups");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_AssetGroupId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_AssetGroupId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long AssetGroupId, string Name, long AssetId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(AssetGroupId));
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(AssetId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long AssetGroupId, string Name, long AssetId, long Original_AssetGroupId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(AssetGroupId));
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(AssetId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_AssetGroupId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, long AssetId, long Original_AssetGroupId) {
            return this.Update(Original_AssetGroupId, Name, AssetId, Original_AssetGroupId);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(long Original_AssetGroupId) {
            global::Devart.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((long)(Original_AssetGroupId));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object Find(string Name) {
            global::Devart.Data.SQLite.SQLiteCommand command = this.CommandCollection[2];
            if ((Name == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(Name));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string Name) {
            global::Devart.Data.SQLite.SQLiteCommand command = this.CommandCollection[3];
            if ((Name == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(Name));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AssetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public AssetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Assets";
            tableMapping.ColumnMappings.Add("AssetId", "AssetId");
            tableMapping.ColumnMappings.Add("ip", "ip");
            tableMapping.ColumnMappings.Add("GroupName", "GroupName");
            tableMapping.ColumnMappings.Add("ZoneName", "ZoneName");
            tableMapping.ColumnMappings.Add("SpeakerName", "SpeakerName");
            tableMapping.ColumnMappings.Add("path", "path");
            tableMapping.ColumnMappings.Add("floor", "floor");
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName");
            tableMapping.ColumnMappings.Add("state", "state");
            tableMapping.ColumnMappings.Add("state_old", "state_old");
            tableMapping.ColumnMappings.Add("chk", "chk");
            tableMapping.ColumnMappings.Add("seq", "seq");
            tableMapping.ColumnMappings.Add("ch", "ch");
            tableMapping.ColumnMappings.Add("em1", "em1");
            tableMapping.ColumnMappings.Add("em2", "em2");
            tableMapping.ColumnMappings.Add("em3", "em3");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Assets\" WHERE ((\"AssetId\" = :Original_AssetId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""Assets"" (""AssetId"", ""ip"", ""GroupName"", ""ZoneName"", ""SpeakerName"", ""path"", ""floor"", ""DeviceName"", ""state"", ""state_old"", ""chk"", ""seq"", ""ch"", ""em1"", ""em2"", ""em3"") VALUES (:AssetId, :ip, :GroupName, :ZoneName, :SpeakerName, :path, :floor, :DeviceName, :state, :state_old, :chk, :seq, :ch, :em1, :em2, :em3)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "ch";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "em1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "em1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "em2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "em2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "em3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "em3";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Assets"" SET ""AssetId"" = :AssetId, ""ip"" = :ip, ""GroupName"" = :GroupName, ""ZoneName"" = :ZoneName, ""SpeakerName"" = :SpeakerName, ""path"" = :path, ""floor"" = :floor, ""DeviceName"" = :DeviceName, ""state"" = :state, ""state_old"" = :state_old, ""chk"" = :chk, ""seq"" = :seq, ""ch"" = :ch, ""em1"" = :em1, ""em2"" = :em2, ""em3"" = :em3 WHERE ((""AssetId"" = :Original_AssetId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GroupName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GroupName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ZoneName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ZoneName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state_old";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state_old";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chk";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "seq";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "seq";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "ch";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "em1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "em1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "em2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "em2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "em3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "em3";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  AssetId, ip, GroupName, ZoneName, SpeakerName, path, floor, DeviceName, s" +
                "tate, state_old, chk, seq, ch, em1, em2, em3\r\nFROM     Assets";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AssetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AssetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AssetsDataTable dataTable = new DataSet1.AssetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AssetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Assets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_AssetId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_AssetId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long AssetId, 
                    string ip, 
                    string GroupName, 
                    string ZoneName, 
                    string SpeakerName, 
                    string path, 
                    string floor, 
                    string DeviceName, 
                    string state, 
                    string state_old, 
                    global::System.Nullable<long> chk, 
                    global::System.Nullable<long> seq, 
                    global::System.Nullable<long> ch, 
                    global::System.Nullable<long> em1, 
                    global::System.Nullable<long> em2, 
                    global::System.Nullable<long> em3) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(AssetId));
            if ((ip == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ip));
            }
            if ((GroupName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(GroupName));
            }
            if ((ZoneName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ZoneName));
            }
            if ((SpeakerName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SpeakerName));
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(path));
            }
            if ((floor == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(floor));
            }
            if ((DeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(state));
            }
            if ((state_old == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(state_old));
            }
            if ((chk.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(chk.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((seq.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((long)(seq.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ch.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(ch.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((em1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((long)(em1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((em2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((long)(em2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((em3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((long)(em3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long AssetId, 
                    string ip, 
                    string GroupName, 
                    string ZoneName, 
                    string SpeakerName, 
                    string path, 
                    string floor, 
                    string DeviceName, 
                    string state, 
                    string state_old, 
                    global::System.Nullable<long> chk, 
                    global::System.Nullable<long> seq, 
                    global::System.Nullable<long> ch, 
                    global::System.Nullable<long> em1, 
                    global::System.Nullable<long> em2, 
                    global::System.Nullable<long> em3, 
                    long Original_AssetId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(AssetId));
            if ((ip == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ip));
            }
            if ((GroupName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(GroupName));
            }
            if ((ZoneName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ZoneName));
            }
            if ((SpeakerName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SpeakerName));
            }
            if ((path == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(path));
            }
            if ((floor == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(floor));
            }
            if ((DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(state));
            }
            if ((state_old == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(state_old));
            }
            if ((chk.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(chk.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((seq.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(seq.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ch.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(ch.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((em1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(em1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((em2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(em2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((em3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(em3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_AssetId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ip, 
                    string GroupName, 
                    string ZoneName, 
                    string SpeakerName, 
                    string path, 
                    string floor, 
                    string DeviceName, 
                    string state, 
                    string state_old, 
                    global::System.Nullable<long> chk, 
                    global::System.Nullable<long> seq, 
                    global::System.Nullable<long> ch, 
                    global::System.Nullable<long> em1, 
                    global::System.Nullable<long> em2, 
                    global::System.Nullable<long> em3, 
                    long Original_AssetId) {
            return this.Update(Original_AssetId, ip, GroupName, ZoneName, SpeakerName, path, floor, DeviceName, state, state_old, chk, seq, ch, em1, em2, em3, Original_AssetId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EventvmTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public EventvmTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Eventvm";
            tableMapping.ColumnMappings.Add("EventVMId", "EventVMId");
            tableMapping.ColumnMappings.Add("write_time", "write_time");
            tableMapping.ColumnMappings.Add("event_text", "event_text");
            tableMapping.ColumnMappings.Add("ip", "ip");
            tableMapping.ColumnMappings.Add("path", "path");
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName");
            tableMapping.ColumnMappings.Add("state", "state");
            tableMapping.ColumnMappings.Add("alarm", "alarm");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Eventvm\" WHERE ((\"EventVMId\" = :Original_EventVMId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Eventvm\" (\"EventVMId\", \"write_time\", \"event_text\", \"ip\", \"pat" +
                "h\", \"DeviceName\", \"state\", \"alarm\") VALUES (:EventVMId, :write_time, :event_text" +
                ", :ip, :path, :DeviceName, :state, :alarm)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "write_time";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "write_time";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "event_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "alarm";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "alarm";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"Eventvm\" SET \"EventVMId\" = :EventVMId, \"write_time\" = :write_time," +
                " \"event_text\" = :event_text, \"ip\" = :ip, \"path\" = :path, \"DeviceName\" = :DeviceN" +
                "ame, \"state\" = :state, \"alarm\" = :alarm WHERE ((\"EventVMId\" = :Original_EventVMI" +
                "d))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "write_time";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "write_time";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "event_text";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "event_text";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "alarm";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "alarm";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_EventVMId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "EventVMId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  EventVMId, write_time, event_text, ip, path, DeviceName, state, alarm\r\nFR" +
                "OM     Eventvm";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.EventvmDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.EventvmDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.EventvmDataTable dataTable = new DataSet1.EventvmDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.EventvmDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Eventvm");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_EventVMId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_EventVMId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long EventVMId, System.DateTime write_time, string event_text, string ip, string path, string DeviceName, string state, global::System.Nullable<long> alarm) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(EventVMId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(write_time));
            if ((event_text == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(event_text));
            }
            if ((ip == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ip));
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(path));
            }
            if ((DeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(state));
            }
            if ((alarm.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(alarm.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long EventVMId, System.DateTime write_time, string event_text, string ip, string path, string DeviceName, string state, global::System.Nullable<long> alarm, long Original_EventVMId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(EventVMId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(write_time));
            if ((event_text == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(event_text));
            }
            if ((ip == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ip));
            }
            if ((path == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(path));
            }
            if ((DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(DeviceName));
            }
            if ((state == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(state));
            }
            if ((alarm.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(alarm.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_EventVMId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime write_time, string event_text, string ip, string path, string DeviceName, string state, global::System.Nullable<long> alarm, long Original_EventVMId) {
            return this.Update(Original_EventVMId, write_time, event_text, ip, path, DeviceName, state, alarm, Original_EventVMId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HolidaysTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public HolidaysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Holidays";
            tableMapping.ColumnMappings.Add("HolidayId", "HolidayId");
            tableMapping.ColumnMappings.Add("hDate", "hDate");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Holidays\" WHERE ((\"HolidayId\" = :Original_HolidayId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Holidays\" (\"HolidayId\", \"hDate\", \"Description\") VALUES (:Holi" +
                "dayId, :hDate, :Description)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "hDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "hDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Description";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"Holidays\" SET \"HolidayId\" = :HolidayId, \"hDate\" = :hDate, \"Descrip" +
                "tion\" = :Description WHERE ((\"HolidayId\" = :Original_HolidayId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "hDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "hDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Description";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_HolidayId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "HolidayId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT HolidayId, hDate, Description FROM Holidays";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.HolidaysDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.HolidaysDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.HolidaysDataTable dataTable = new DataSet1.HolidaysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.HolidaysDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Holidays");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_HolidayId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_HolidayId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long HolidayId, System.DateTime hDate, string Description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(HolidayId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(hDate));
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long HolidayId, System.DateTime hDate, string Description, long Original_HolidayId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(HolidayId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(hDate));
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_HolidayId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime hDate, string Description, long Original_HolidayId) {
            return this.Update(Original_HolidayId, hDate, Description, Original_HolidayId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InfoTreesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public InfoTreesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InfoTrees";
            tableMapping.ColumnMappings.Add("InfoTreeId", "InfoTreeId");
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("gstreeAssetGroupId", "gstreeAssetGroupId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"InfoTrees\" WHERE ((\"InfoTreeId\" = :Original_InfoTreeId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"InfoTrees\" (\"InfoTreeId\", \"Id\", \"Subject\", \"Name\", \"gstreeAss" +
                "etGroupId\") VALUES (:InfoTreeId, :Id, :Subject, :Name, :gstreeAssetGroupId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"InfoTrees\" SET \"InfoTreeId\" = :InfoTreeId, \"Id\" = :Id, \"Subject\" =" +
                " :Subject, \"Name\" = :Name, \"gstreeAssetGroupId\" = :gstreeAssetGroupId WHERE ((\"I" +
                "nfoTreeId\" = :Original_InfoTreeId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_InfoTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "InfoTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT InfoTreeId, Id, Subject, Name, gstreeAssetGroupId FROM \"main\".InfoTrees";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.InfoTreesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.InfoTreesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.InfoTreesDataTable dataTable = new DataSet1.InfoTreesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.InfoTreesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "InfoTrees");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_InfoTreeId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_InfoTreeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long InfoTreeId, string Id, string Subject, string Name, global::System.Nullable<long> gstreeAssetGroupId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(InfoTreeId));
            if ((Id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((Subject == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long InfoTreeId, string Id, string Subject, string Name, global::System.Nullable<long> gstreeAssetGroupId, long Original_InfoTreeId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(InfoTreeId));
            if ((Id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Id));
            }
            if ((Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_InfoTreeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Id, string Subject, string Name, global::System.Nullable<long> gstreeAssetGroupId, long Original_InfoTreeId) {
            return this.Update(Original_InfoTreeId, Id, Subject, Name, gstreeAssetGroupId, Original_InfoTreeId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MusicsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public MusicsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Musics";
            tableMapping.ColumnMappings.Add("MusicId", "MusicId");
            tableMapping.ColumnMappings.Add("FileName", "FileName");
            tableMapping.ColumnMappings.Add("FileContent", "FileContent");
            tableMapping.ColumnMappings.Add("deletable", "deletable");
            tableMapping.ColumnMappings.Add("duration", "duration");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Musics\" WHERE ((\"MusicId\" = :Original_MusicId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Musics\" (\"MusicId\", \"FileName\", \"FileContent\", \"deletable\", \"" +
                "duration\") VALUES (:MusicId, :FileName, :FileContent, :deletable, :duration)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileContent";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "deletable";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"Musics\" SET \"MusicId\" = :MusicId, \"FileName\" = :FileName, \"FileCon" +
                "tent\" = :FileContent, \"deletable\" = :deletable, \"duration\" = :duration WHERE ((\"" +
                "MusicId\" = :Original_MusicId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FileContent";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "FileContent";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "deletable";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "deletable";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MusicId, FileName, FileContent, deletable, duration FROM Musics";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.MusicsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.MusicsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.MusicsDataTable dataTable = new DataSet1.MusicsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.MusicsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Musics");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_MusicId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_MusicId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long MusicId, string FileName, string FileContent, string deletable, string duration) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(MusicId));
            if ((FileName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FileName));
            }
            if ((FileContent == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FileContent));
            }
            if ((deletable == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(deletable));
            }
            if ((duration == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(duration));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long MusicId, string FileName, string FileContent, string deletable, string duration, long Original_MusicId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(MusicId));
            if ((FileName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FileName));
            }
            if ((FileContent == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FileContent));
            }
            if ((deletable == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(deletable));
            }
            if ((duration == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(duration));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_MusicId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string FileName, string FileContent, string deletable, string duration, long Original_MusicId) {
            return this.Update(Original_MusicId, FileName, FileContent, deletable, duration, Original_MusicId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SimpleMultisTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public SimpleMultisTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SimpleMultis";
            tableMapping.ColumnMappings.Add("SimpleMultiId", "SimpleMultiId");
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("idno", "idno");
            tableMapping.ColumnMappings.Add("chno", "chno");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("gstreeAssetGroupId", "gstreeAssetGroupId");
            tableMapping.ColumnMappings.Add("stm", "stm");
            tableMapping.ColumnMappings.Add("etm", "etm");
            tableMapping.ColumnMappings.Add("duration", "duration");
            tableMapping.ColumnMappings.Add("week", "week");
            tableMapping.ColumnMappings.Add("day1", "day1");
            tableMapping.ColumnMappings.Add("day2", "day2");
            tableMapping.ColumnMappings.Add("day3", "day3");
            tableMapping.ColumnMappings.Add("day4", "day4");
            tableMapping.ColumnMappings.Add("day5", "day5");
            tableMapping.ColumnMappings.Add("day6", "day6");
            tableMapping.ColumnMappings.Add("day7", "day7");
            tableMapping.ColumnMappings.Add("tss", "tss");
            tableMapping.ColumnMappings.Add("tse", "tse");
            tableMapping.ColumnMappings.Add("Color16", "Color16");
            tableMapping.ColumnMappings.Add("overlap", "overlap");
            tableMapping.ColumnMappings.Add("weekday", "weekday");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"SimpleMultis\" WHERE ((\"SimpleMultiId\" = :Original_SimpleMulti" +
                "Id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""SimpleMultis"" (""SimpleMultiId"", ""Id"", ""idno"", ""chno"", ""Subject"", ""Name"", ""gstreeAssetGroupId"", ""stm"", ""etm"", ""duration"", ""week"", ""day1"", ""day2"", ""day3"", ""day4"", ""day5"", ""day6"", ""day7"", ""tss"", ""tse"", ""Color16"", ""overlap"", ""weekday"") VALUES (:SimpleMultiId, :Id, :idno, :chno, :Subject, :Name, :gstreeAssetGroupId, :stm, :etm, :duration, :week, :day1, :day2, :day3, :day4, :day5, :day6, :day7, :tss, :tse, :Color16, :overlap, :weekday)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "idno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "idno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "stm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "stm";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "etm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "etm";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "week";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "week";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day3";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day4";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day4";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day5";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day5";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day6";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day6";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day7";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day7";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tss";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tss";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tse";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tse";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Color16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "overlap";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "overlap";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "weekday";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "weekday";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""SimpleMultis"" SET ""SimpleMultiId"" = :SimpleMultiId, ""Id"" = :Id, ""idno"" = :idno, ""chno"" = :chno, ""Subject"" = :Subject, ""Name"" = :Name, ""gstreeAssetGroupId"" = :gstreeAssetGroupId, ""stm"" = :stm, ""etm"" = :etm, ""duration"" = :duration, ""week"" = :week, ""day1"" = :day1, ""day2"" = :day2, ""day3"" = :day3, ""day4"" = :day4, ""day5"" = :day5, ""day6"" = :day6, ""day7"" = :day7, ""tss"" = :tss, ""tse"" = :tse, ""Color16"" = :Color16, ""overlap"" = :overlap, ""weekday"" = :weekday WHERE ((""SimpleMultiId"" = :Original_SimpleMultiId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "idno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "idno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Subject";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Subject";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "gstreeAssetGroupId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "gstreeAssetGroupId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "stm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "stm";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "etm";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "etm";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "duration";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "duration";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "week";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "week";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day3";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day3";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day4";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day4";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day5";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day5";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day6";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day6";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "day7";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "day7";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tss";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tss";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "tse";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "tse";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Color16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Color16";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "overlap";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "overlap";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "weekday";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "weekday";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimpleMultiId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimpleMultiId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SimpleMultiId, Id, idno, chno, Subject, Name, gstreeAssetGroupId, stm, etm" +
                ", duration, week, day1, day2, day3, day4, day5, day6, day7, tss, tse, Color16, o" +
                "verlap, weekday FROM \"main\".SimpleMultis";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SimpleMultisDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SimpleMultisDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SimpleMultisDataTable dataTable = new DataSet1.SimpleMultisDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SimpleMultisDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "SimpleMultis");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_SimpleMultiId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SimpleMultiId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long SimpleMultiId, 
                    string Id, 
                    long idno, 
                    long chno, 
                    string Subject, 
                    string Name, 
                    global::System.Nullable<long> gstreeAssetGroupId, 
                    string stm, 
                    string etm, 
                    string duration, 
                    long week, 
                    long day1, 
                    long day2, 
                    long day3, 
                    long day4, 
                    long day5, 
                    long day6, 
                    long day7, 
                    string tss, 
                    string tse, 
                    string Color16, 
                    long overlap, 
                    long weekday) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(SimpleMultiId));
            if ((Id == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Id));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(idno));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(chno));
            if ((Subject == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((stm == null)) {
                throw new global::System.ArgumentNullException("stm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(stm));
            }
            if ((etm == null)) {
                throw new global::System.ArgumentNullException("etm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(etm));
            }
            if ((duration == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(duration));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((long)(week));
            this.Adapter.InsertCommand.Parameters[11].Value = ((long)(day1));
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(day2));
            this.Adapter.InsertCommand.Parameters[13].Value = ((long)(day3));
            this.Adapter.InsertCommand.Parameters[14].Value = ((long)(day4));
            this.Adapter.InsertCommand.Parameters[15].Value = ((long)(day5));
            this.Adapter.InsertCommand.Parameters[16].Value = ((long)(day6));
            this.Adapter.InsertCommand.Parameters[17].Value = ((long)(day7));
            if ((tss == null)) {
                throw new global::System.ArgumentNullException("tss");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(tss));
            }
            if ((tse == null)) {
                throw new global::System.ArgumentNullException("tse");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(tse));
            }
            if ((Color16 == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Color16));
            }
            this.Adapter.InsertCommand.Parameters[21].Value = ((long)(overlap));
            this.Adapter.InsertCommand.Parameters[22].Value = ((long)(weekday));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long SimpleMultiId, 
                    string Id, 
                    long idno, 
                    long chno, 
                    string Subject, 
                    string Name, 
                    global::System.Nullable<long> gstreeAssetGroupId, 
                    string stm, 
                    string etm, 
                    string duration, 
                    long week, 
                    long day1, 
                    long day2, 
                    long day3, 
                    long day4, 
                    long day5, 
                    long day6, 
                    long day7, 
                    string tss, 
                    string tse, 
                    string Color16, 
                    long overlap, 
                    long weekday, 
                    long Original_SimpleMultiId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(SimpleMultiId));
            if ((Id == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Id));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(idno));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(chno));
            if ((Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Subject));
            }
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Name));
            }
            if ((gstreeAssetGroupId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(gstreeAssetGroupId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((stm == null)) {
                throw new global::System.ArgumentNullException("stm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(stm));
            }
            if ((etm == null)) {
                throw new global::System.ArgumentNullException("etm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(etm));
            }
            if ((duration == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(duration));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(week));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(day1));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(day2));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(day3));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(day4));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(day5));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(day6));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(day7));
            if ((tss == null)) {
                throw new global::System.ArgumentNullException("tss");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(tss));
            }
            if ((tse == null)) {
                throw new global::System.ArgumentNullException("tse");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(tse));
            }
            if ((Color16 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Color16));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(overlap));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(weekday));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_SimpleMultiId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Id, 
                    long idno, 
                    long chno, 
                    string Subject, 
                    string Name, 
                    global::System.Nullable<long> gstreeAssetGroupId, 
                    string stm, 
                    string etm, 
                    string duration, 
                    long week, 
                    long day1, 
                    long day2, 
                    long day3, 
                    long day4, 
                    long day5, 
                    long day6, 
                    long day7, 
                    string tss, 
                    string tse, 
                    string Color16, 
                    long overlap, 
                    long weekday, 
                    long Original_SimpleMultiId) {
            return this.Update(Original_SimpleMultiId, Id, idno, chno, Subject, Name, gstreeAssetGroupId, stm, etm, duration, week, day1, day2, day3, day4, day5, day6, day7, tss, tse, Color16, overlap, weekday, Original_SimpleMultiId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SimplepaTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public SimplepaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Simplepa";
            tableMapping.ColumnMappings.Add("SimplePAId", "SimplePAId");
            tableMapping.ColumnMappings.Add("TileWidth", "TileWidth");
            tableMapping.ColumnMappings.Add("MapX", "MapX");
            tableMapping.ColumnMappings.Add("MapY", "MapY");
            tableMapping.ColumnMappings.Add("Zoom", "Zoom");
            tableMapping.ColumnMappings.Add("debug", "debug");
            tableMapping.ColumnMappings.Add("SpeakerIconSize", "SpeakerIconSize");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("EMServerIP", "EMServerIP");
            tableMapping.ColumnMappings.Add("ServerIP", "ServerIP");
            tableMapping.ColumnMappings.Add("ServerPort", "ServerPort");
            tableMapping.ColumnMappings.Add("Reserved1", "Reserved1");
            tableMapping.ColumnMappings.Add("Reserved2", "Reserved2");
            tableMapping.ColumnMappings.Add("Reserved3", "Reserved3");
            tableMapping.ColumnMappings.Add("Reserved4", "Reserved4");
            tableMapping.ColumnMappings.Add("Reserved5", "Reserved5");
            tableMapping.ColumnMappings.Add("Reserved6", "Reserved6");
            tableMapping.ColumnMappings.Add("Reserved7", "Reserved7");
            tableMapping.ColumnMappings.Add("Reserved8", "Reserved8");
            tableMapping.ColumnMappings.Add("Reserved9", "Reserved9");
            tableMapping.ColumnMappings.Add("Reserved10", "Reserved10");
            tableMapping.ColumnMappings.Add("Reserved11", "Reserved11");
            tableMapping.ColumnMappings.Add("GPIOPort", "GPIOPort");
            tableMapping.ColumnMappings.Add("Rport", "Rport");
            tableMapping.ColumnMappings.Add("Reserved15", "Reserved15");
            tableMapping.ColumnMappings.Add("Reserved16", "Reserved16");
            tableMapping.ColumnMappings.Add("Jigsangbalhwa", "Jigsangbalhwa");
            tableMapping.ColumnMappings.Add("SpeakerTimer", "SpeakerTimer");
            tableMapping.ColumnMappings.Add("inputvolume", "inputvolume");
            tableMapping.ColumnMappings.Add("outputvolume", "outputvolume");
            tableMapping.ColumnMappings.Add("disp", "disp");
            tableMapping.ColumnMappings.Add("Multi_Ch", "Multi_Ch");
            tableMapping.ColumnMappings.Add("SoundDeviceNum", "SoundDeviceNum");
            tableMapping.ColumnMappings.Add("SoundDeviceName", "SoundDeviceName");
            tableMapping.ColumnMappings.Add("Reserved17", "Reserved17");
            tableMapping.ColumnMappings.Add("scalelength", "scalelength");
            tableMapping.ColumnMappings.Add("length", "length");
            tableMapping.ColumnMappings.Add("scale", "scale");
            tableMapping.ColumnMappings.Add("noise1", "noise1");
            tableMapping.ColumnMappings.Add("noise2", "noise2");
            tableMapping.ColumnMappings.Add("dsp_vol", "dsp_vol");
            tableMapping.ColumnMappings.Add("dsp_vol_em", "dsp_vol_em");
            tableMapping.ColumnMappings.Add("sms_server", "sms_server");
            tableMapping.ColumnMappings.Add("sms_id", "sms_id");
            tableMapping.ColumnMappings.Add("sms_pw", "sms_pw");
            tableMapping.ColumnMappings.Add("sms_rcvno", "sms_rcvno");
            tableMapping.ColumnMappings.Add("Pport", "Pport");
            tableMapping.ColumnMappings.Add("EmMusic", "EmMusic");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Simplepa\" WHERE ((\"SimplePAId\" = :Original_SimplePAId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""Simplepa"" (""SimplePAId"", ""TileWidth"", ""MapX"", ""MapY"", ""Zoom"", ""debug"", ""SpeakerIconSize"", ""UserName"", ""EMServerIP"", ""ServerIP"", ""ServerPort"", ""Reserved1"", ""Reserved2"", ""Reserved3"", ""Reserved4"", ""Reserved5"", ""Reserved6"", ""Reserved7"", ""Reserved8"", ""Reserved9"", ""Reserved10"", ""Reserved11"", ""GPIOPort"", ""Rport"", ""Reserved15"", ""Reserved16"", ""Jigsangbalhwa"", ""SpeakerTimer"", ""inputvolume"", ""outputvolume"", ""disp"", ""Multi_Ch"", ""SoundDeviceNum"", ""SoundDeviceName"", ""Reserved17"", ""scalelength"", ""length"", ""scale"", ""noise1"", ""noise2"", ""dsp_vol"", ""dsp_vol_em"", ""sms_server"", ""sms_id"", ""sms_pw"", ""sms_rcvno"", ""Pport"", ""EmMusic"") VALUES (:SimplePAId, :TileWidth, :MapX, :MapY, :Zoom, :debug, :SpeakerIconSize, :UserName, :EMServerIP, :ServerIP, :ServerPort, :Reserved1, :Reserved2, :Reserved3, :Reserved4, :Reserved5, :Reserved6, :Reserved7, :Reserved8, :Reserved9, :Reserved10, :Reserved11, :GPIOPort, :Rport, :Reserved15, :Reserved16, :Jigsangbalhwa, :SpeakerTimer, :inputvolume, :outputvolume, :disp, :Multi_Ch, :SoundDeviceNum, :SoundDeviceName, :Reserved17, :scalelength, :length, :scale, :noise1, :noise2, :dsp_vol, :dsp_vol_em, :sms_server, :sms_id, :sms_pw, :sms_rcvno, :Pport, :EmMusic)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "TileWidth";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "TileWidth";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapX";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapY";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Zoom";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Zoom";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "debug";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "debug";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerIconSize";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerIconSize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EMServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved3";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved4";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved5";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved6";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved7";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved8";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved9";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved10";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved11";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GPIOPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Rport";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved15";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Jigsangbalhwa";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Jigsangbalhwa";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerTimer";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerTimer";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "inputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "inputvolume";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "outputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "outputvolume";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "disp";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "disp";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Multi_Ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Multi_Ch";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceNum";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceNum";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved17";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Reserved17";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scalelength";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scalelength";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "length";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "length";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scale";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scale";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_server";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_pw";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_rcvno";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Pport";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Pport";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EmMusic";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EmMusic";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Simplepa"" SET ""SimplePAId"" = :SimplePAId, ""TileWidth"" = :TileWidth, ""MapX"" = :MapX, ""MapY"" = :MapY, ""Zoom"" = :Zoom, ""debug"" = :debug, ""SpeakerIconSize"" = :SpeakerIconSize, ""UserName"" = :UserName, ""EMServerIP"" = :EMServerIP, ""ServerIP"" = :ServerIP, ""ServerPort"" = :ServerPort, ""Reserved1"" = :Reserved1, ""Reserved2"" = :Reserved2, ""Reserved3"" = :Reserved3, ""Reserved4"" = :Reserved4, ""Reserved5"" = :Reserved5, ""Reserved6"" = :Reserved6, ""Reserved7"" = :Reserved7, ""Reserved8"" = :Reserved8, ""Reserved9"" = :Reserved9, ""Reserved10"" = :Reserved10, ""Reserved11"" = :Reserved11, ""GPIOPort"" = :GPIOPort, ""Rport"" = :Rport, ""Reserved15"" = :Reserved15, ""Reserved16"" = :Reserved16, ""Jigsangbalhwa"" = :Jigsangbalhwa, ""SpeakerTimer"" = :SpeakerTimer, ""inputvolume"" = :inputvolume, ""outputvolume"" = :outputvolume, ""disp"" = :disp, ""Multi_Ch"" = :Multi_Ch, ""SoundDeviceNum"" = :SoundDeviceNum, ""SoundDeviceName"" = :SoundDeviceName, ""Reserved17"" = :Reserved17, ""scalelength"" = :scalelength, ""length"" = :length, ""scale"" = :scale, ""noise1"" = :noise1, ""noise2"" = :noise2, ""dsp_vol"" = :dsp_vol, ""dsp_vol_em"" = :dsp_vol_em, ""sms_server"" = :sms_server, ""sms_id"" = :sms_id, ""sms_pw"" = :sms_pw, ""sms_rcvno"" = :sms_rcvno, ""Pport"" = :Pport, ""EmMusic"" = :EmMusic WHERE ((""SimplePAId"" = :Original_SimplePAId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "TileWidth";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "TileWidth";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapX";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MapY";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MapY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Zoom";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Zoom";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "debug";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "debug";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerIconSize";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerIconSize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "UserName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EMServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EMServerIP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerIP";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerIP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ServerPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ServerPort";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved3";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved3";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved4";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved4";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved5";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved5";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved6";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved6";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved7";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved7";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved8";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved8";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved9";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved9";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved10";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved10";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved11";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved11";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "GPIOPort";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "GPIOPort";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Rport";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Rport";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved15";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved15";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved16";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "Reserved16";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Jigsangbalhwa";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Jigsangbalhwa";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SpeakerTimer";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SpeakerTimer";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "inputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "inputvolume";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "outputvolume";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "outputvolume";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "disp";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "disp";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Multi_Ch";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Multi_Ch";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceNum";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceNum";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "SoundDeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "SoundDeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Reserved17";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Reserved17";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scalelength";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scalelength";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "length";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "length";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "scale";
            param.DbType = global::System.Data.DbType.Double;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Double;
            param.IsNullable = true;
            param.SourceColumn = "scale";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise1";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "noise2";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "noise2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_server";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_server";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_pw";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_pw";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "sms_rcvno";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "sms_rcvno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Pport";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "Pport";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "EmMusic";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "EmMusic";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_SimplePAId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "SimplePAId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT  SimplePAId, TileWidth, MapX, MapY, Zoom, debug, SpeakerIconSize, UserName, EMServerIP, ServerIP, ServerPort, Reserved1, Reserved2, Reserved3, Reserved4, Reserved5, Reserved6, 
               Reserved7, Reserved8, Reserved9, Reserved10, Reserved11, GPIOPort, Rport, Reserved15, Reserved16, Jigsangbalhwa, SpeakerTimer, inputvolume, outputvolume, disp, Multi_Ch, 
               SoundDeviceNum, SoundDeviceName, Reserved17, scalelength, length, ""scale"", noise1, noise2, dsp_vol, dsp_vol_em, sms_server, sms_id, sms_pw, sms_rcvno, Pport, EmMusic
FROM     Simplepa";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SimplepaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SimplepaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SimplepaDataTable dataTable = new DataSet1.SimplepaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SimplepaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Simplepa");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_SimplePAId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SimplePAId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long SimplePAId, 
                    long TileWidth, 
                    long MapX, 
                    long MapY, 
                    double Zoom, 
                    long debug, 
                    long SpeakerIconSize, 
                    string UserName, 
                    string EMServerIP, 
                    string ServerIP, 
                    string ServerPort, 
                    string Reserved1, 
                    string Reserved2, 
                    string Reserved3, 
                    string Reserved4, 
                    string Reserved5, 
                    string Reserved6, 
                    string Reserved7, 
                    string Reserved8, 
                    string Reserved9, 
                    string Reserved10, 
                    string Reserved11, 
                    string GPIOPort, 
                    string Rport, 
                    string Reserved15, 
                    string Reserved16, 
                    long Jigsangbalhwa, 
                    long SpeakerTimer, 
                    double inputvolume, 
                    double outputvolume, 
                    long disp, 
                    long Multi_Ch, 
                    long SoundDeviceNum, 
                    string SoundDeviceName, 
                    long Reserved17, 
                    double scalelength, 
                    double length, 
                    double scale, 
                    long noise1, 
                    long noise2, 
                    long dsp_vol, 
                    long dsp_vol_em, 
                    string sms_server, 
                    string sms_id, 
                    string sms_pw, 
                    string sms_rcvno, 
                    long Pport, 
                    string EmMusic) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(SimplePAId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(TileWidth));
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(MapX));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(MapY));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Zoom));
            this.Adapter.InsertCommand.Parameters[5].Value = ((long)(debug));
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(SpeakerIconSize));
            if ((UserName == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(UserName));
            }
            if ((EMServerIP == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(EMServerIP));
            }
            if ((ServerIP == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ServerIP));
            }
            if ((ServerPort == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ServerPort));
            }
            if ((Reserved1 == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Reserved1));
            }
            if ((Reserved2 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Reserved2));
            }
            if ((Reserved3 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Reserved3));
            }
            if ((Reserved4 == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Reserved4));
            }
            if ((Reserved5 == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Reserved5));
            }
            if ((Reserved6 == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Reserved6));
            }
            if ((Reserved7 == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Reserved7));
            }
            if ((Reserved8 == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Reserved8));
            }
            if ((Reserved9 == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Reserved9));
            }
            if ((Reserved10 == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Reserved10));
            }
            if ((Reserved11 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Reserved11));
            }
            if ((GPIOPort == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(GPIOPort));
            }
            if ((Rport == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Rport));
            }
            if ((Reserved15 == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(Reserved15));
            }
            if ((Reserved16 == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(Reserved16));
            }
            this.Adapter.InsertCommand.Parameters[26].Value = ((long)(Jigsangbalhwa));
            this.Adapter.InsertCommand.Parameters[27].Value = ((long)(SpeakerTimer));
            this.Adapter.InsertCommand.Parameters[28].Value = ((double)(inputvolume));
            this.Adapter.InsertCommand.Parameters[29].Value = ((double)(outputvolume));
            this.Adapter.InsertCommand.Parameters[30].Value = ((long)(disp));
            this.Adapter.InsertCommand.Parameters[31].Value = ((long)(Multi_Ch));
            this.Adapter.InsertCommand.Parameters[32].Value = ((long)(SoundDeviceNum));
            if ((SoundDeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(SoundDeviceName));
            }
            this.Adapter.InsertCommand.Parameters[34].Value = ((long)(Reserved17));
            this.Adapter.InsertCommand.Parameters[35].Value = ((double)(scalelength));
            this.Adapter.InsertCommand.Parameters[36].Value = ((double)(length));
            this.Adapter.InsertCommand.Parameters[37].Value = ((double)(scale));
            this.Adapter.InsertCommand.Parameters[38].Value = ((long)(noise1));
            this.Adapter.InsertCommand.Parameters[39].Value = ((long)(noise2));
            this.Adapter.InsertCommand.Parameters[40].Value = ((long)(dsp_vol));
            this.Adapter.InsertCommand.Parameters[41].Value = ((long)(dsp_vol_em));
            if ((sms_server == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(sms_server));
            }
            if ((sms_id == null)) {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(sms_id));
            }
            if ((sms_pw == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(sms_pw));
            }
            if ((sms_rcvno == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(sms_rcvno));
            }
            this.Adapter.InsertCommand.Parameters[46].Value = ((long)(Pport));
            if ((EmMusic == null)) {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(EmMusic));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long SimplePAId, 
                    long TileWidth, 
                    long MapX, 
                    long MapY, 
                    double Zoom, 
                    long debug, 
                    long SpeakerIconSize, 
                    string UserName, 
                    string EMServerIP, 
                    string ServerIP, 
                    string ServerPort, 
                    string Reserved1, 
                    string Reserved2, 
                    string Reserved3, 
                    string Reserved4, 
                    string Reserved5, 
                    string Reserved6, 
                    string Reserved7, 
                    string Reserved8, 
                    string Reserved9, 
                    string Reserved10, 
                    string Reserved11, 
                    string GPIOPort, 
                    string Rport, 
                    string Reserved15, 
                    string Reserved16, 
                    long Jigsangbalhwa, 
                    long SpeakerTimer, 
                    double inputvolume, 
                    double outputvolume, 
                    long disp, 
                    long Multi_Ch, 
                    long SoundDeviceNum, 
                    string SoundDeviceName, 
                    long Reserved17, 
                    double scalelength, 
                    double length, 
                    double scale, 
                    long noise1, 
                    long noise2, 
                    long dsp_vol, 
                    long dsp_vol_em, 
                    string sms_server, 
                    string sms_id, 
                    string sms_pw, 
                    string sms_rcvno, 
                    long Pport, 
                    string EmMusic, 
                    long Original_SimplePAId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(SimplePAId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(TileWidth));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(MapX));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(MapY));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Zoom));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(debug));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(SpeakerIconSize));
            if ((UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(UserName));
            }
            if ((EMServerIP == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(EMServerIP));
            }
            if ((ServerIP == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ServerIP));
            }
            if ((ServerPort == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ServerPort));
            }
            if ((Reserved1 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Reserved1));
            }
            if ((Reserved2 == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Reserved2));
            }
            if ((Reserved3 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Reserved3));
            }
            if ((Reserved4 == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Reserved4));
            }
            if ((Reserved5 == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Reserved5));
            }
            if ((Reserved6 == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Reserved6));
            }
            if ((Reserved7 == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Reserved7));
            }
            if ((Reserved8 == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Reserved8));
            }
            if ((Reserved9 == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Reserved9));
            }
            if ((Reserved10 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Reserved10));
            }
            if ((Reserved11 == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Reserved11));
            }
            if ((GPIOPort == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(GPIOPort));
            }
            if ((Rport == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Rport));
            }
            if ((Reserved15 == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Reserved15));
            }
            if ((Reserved16 == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Reserved16));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(Jigsangbalhwa));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(SpeakerTimer));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((double)(inputvolume));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(outputvolume));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(disp));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((long)(Multi_Ch));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((long)(SoundDeviceNum));
            if ((SoundDeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(SoundDeviceName));
            }
            this.Adapter.UpdateCommand.Parameters[34].Value = ((long)(Reserved17));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((double)(scalelength));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((double)(length));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(scale));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(noise1));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(noise2));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(dsp_vol));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((long)(dsp_vol_em));
            if ((sms_server == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(sms_server));
            }
            if ((sms_id == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(sms_id));
            }
            if ((sms_pw == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(sms_pw));
            }
            if ((sms_rcvno == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(sms_rcvno));
            }
            this.Adapter.UpdateCommand.Parameters[46].Value = ((long)(Pport));
            if ((EmMusic == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(EmMusic));
            }
            this.Adapter.UpdateCommand.Parameters[48].Value = ((long)(Original_SimplePAId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long TileWidth, 
                    long MapX, 
                    long MapY, 
                    double Zoom, 
                    long debug, 
                    long SpeakerIconSize, 
                    string UserName, 
                    string EMServerIP, 
                    string ServerIP, 
                    string ServerPort, 
                    string Reserved1, 
                    string Reserved2, 
                    string Reserved3, 
                    string Reserved4, 
                    string Reserved5, 
                    string Reserved6, 
                    string Reserved7, 
                    string Reserved8, 
                    string Reserved9, 
                    string Reserved10, 
                    string Reserved11, 
                    string GPIOPort, 
                    string Rport, 
                    string Reserved15, 
                    string Reserved16, 
                    long Jigsangbalhwa, 
                    long SpeakerTimer, 
                    double inputvolume, 
                    double outputvolume, 
                    long disp, 
                    long Multi_Ch, 
                    long SoundDeviceNum, 
                    string SoundDeviceName, 
                    long Reserved17, 
                    double scalelength, 
                    double length, 
                    double scale, 
                    long noise1, 
                    long noise2, 
                    long dsp_vol, 
                    long dsp_vol_em, 
                    string sms_server, 
                    string sms_id, 
                    string sms_pw, 
                    string sms_rcvno, 
                    long Pport, 
                    string EmMusic, 
                    long Original_SimplePAId) {
            return this.Update(Original_SimplePAId, TileWidth, MapX, MapY, Zoom, debug, SpeakerIconSize, UserName, EMServerIP, ServerIP, ServerPort, Reserved1, Reserved2, Reserved3, Reserved4, Reserved5, Reserved6, Reserved7, Reserved8, Reserved9, Reserved10, Reserved11, GPIOPort, Rport, Reserved15, Reserved16, Jigsangbalhwa, SpeakerTimer, inputvolume, outputvolume, disp, Multi_Ch, SoundDeviceNum, SoundDeviceName, Reserved17, scalelength, length, scale, noise1, noise2, dsp_vol, dsp_vol_em, sms_server, sms_id, sms_pw, sms_rcvno, Pport, EmMusic, Original_SimplePAId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTreesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UserTreesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserTrees";
            tableMapping.ColumnMappings.Add("UserTreeId", "UserTreeId");
            tableMapping.ColumnMappings.Add("user_group", "user_group");
            tableMapping.ColumnMappings.Add("user_name", "user_name");
            tableMapping.ColumnMappings.Add("login_id", "login_id");
            tableMapping.ColumnMappings.Add("login_password", "login_password");
            tableMapping.ColumnMappings.Add("login_password2", "login_password2");
            tableMapping.ColumnMappings.Add("mobile", "mobile");
            tableMapping.ColumnMappings.Add("email", "email");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"UserTrees\" WHERE ((\"UserTreeId\" = :Original_UserTreeId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"UserTrees\" (\"UserTreeId\", \"user_group\", \"user_name\", \"login_i" +
                "d\", \"login_password\", \"login_password2\", \"mobile\", \"email\") VALUES (:UserTreeId," +
                " :user_group, :user_name, :login_id, :login_password, :login_password2, :mobile," +
                " :email)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_group";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "mobile";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "email";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "email";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""UserTrees"" SET ""UserTreeId"" = :UserTreeId, ""user_group"" = :user_group, ""user_name"" = :user_name, ""login_id"" = :login_id, ""login_password"" = :login_password, ""login_password2"" = :login_password2, ""mobile"" = :mobile, ""email"" = :email WHERE ((""UserTreeId"" = :Original_UserTreeId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_group";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_group";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_password2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "login_password2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "mobile";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "mobile";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "email";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "email";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_UserTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "UserTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[2];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  UserTreeId, user_group, user_name, login_id, login_password, login_passwo" +
                "rd2, mobile, email\r\nFROM     UserTrees";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT  UserTreeId, user_group, user_name, login_id, login_password, login_passwo" +
                "rd2, mobile, email\r\nFROM     UserTrees\r\nWHERE  (login_id = :login_id) AND (login" +
                "_password = :login_pw)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_id";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = "login_id";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "login_pw";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = "login_password";
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.UserTreesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.UserTreesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.UserTreesDataTable dataTable = new DataSet1.UserTreesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(DataSet1.UserTreesDataTable dataTable, string login_id, string login_pw) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((login_id == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(login_id));
            }
            if ((login_pw == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(login_pw));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual DataSet1.UserTreesDataTable GetDataBy(string login_id, string login_pw) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((login_id == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(login_id));
            }
            if ((login_pw == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(login_pw));
            }
            DataSet1.UserTreesDataTable dataTable = new DataSet1.UserTreesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.UserTreesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "UserTrees");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_UserTreeId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_UserTreeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long UserTreeId, string user_group, string user_name, string login_id, string login_password, string login_password2, string mobile, string email) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(UserTreeId));
            if ((user_group == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(user_group));
            }
            if ((user_name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(user_name));
            }
            if ((login_id == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(login_id));
            }
            if ((login_password == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(login_password));
            }
            if ((login_password2 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(login_password2));
            }
            if ((mobile == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(mobile));
            }
            if ((email == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(email));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long UserTreeId, string user_group, string user_name, string login_id, string login_password, string login_password2, string mobile, string email, long Original_UserTreeId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(UserTreeId));
            if ((user_group == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(user_group));
            }
            if ((user_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(user_name));
            }
            if ((login_id == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(login_id));
            }
            if ((login_password == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(login_password));
            }
            if ((login_password2 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(login_password2));
            }
            if ((mobile == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(mobile));
            }
            if ((email == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(email));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_UserTreeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string user_group, string user_name, string login_id, string login_password, string login_password2, string mobile, string email, long Original_UserTreeId) {
            return this.Update(Original_UserTreeId, user_group, user_name, login_id, login_password, login_password2, mobile, email, Original_UserTreeId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BSTreeTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public BSTreeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BSTree";
            tableMapping.ColumnMappings.Add("BSTreeId", "BSTreeId");
            tableMapping.ColumnMappings.Add("wtime", "wtime");
            tableMapping.ColumnMappings.Add("chno", "chno");
            tableMapping.ColumnMappings.Add("AssetId", "AssetId");
            tableMapping.ColumnMappings.Add("MusicId", "MusicId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"BSTree\" WHERE ((\"BSTreeId\" = :Original_BSTreeId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_BSTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"BSTree\" (\"BSTreeId\", \"wtime\", \"chno\", \"AssetId\", \"MusicId\") V" +
                "ALUES (:BSTreeId, :wtime, :chno, :AssetId, :MusicId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "BSTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSTreeId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "wtime";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "wtime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"BSTree\" SET \"BSTreeId\" = :BSTreeId, \"wtime\" = :wtime, \"chno\" = :ch" +
                "no, \"AssetId\" = :AssetId, \"MusicId\" = :MusicId WHERE ((\"BSTreeId\" = :Original_BS" +
                "TreeId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "BSTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSTreeId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "wtime";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "wtime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "AssetId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "AssetId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "MusicId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "MusicId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_BSTreeId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSTreeId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  BSTreeId, wtime, chno, AssetId, MusicId\r\nFROM     BSTree";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.BSTreeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.BSTreeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.BSTreeDataTable dataTable = new DataSet1.BSTreeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.BSTreeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "BSTree");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_BSTreeId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_BSTreeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long BSTreeId, global::System.Nullable<global::System.DateTime> wtime, long chno, long AssetId, long MusicId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(BSTreeId));
            if ((wtime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(wtime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(chno));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(AssetId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(MusicId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long BSTreeId, global::System.Nullable<global::System.DateTime> wtime, long chno, long AssetId, long MusicId, long Original_BSTreeId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(BSTreeId));
            if ((wtime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(wtime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(chno));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(AssetId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(MusicId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_BSTreeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.DateTime> wtime, long chno, long AssetId, long MusicId, long Original_BSTreeId) {
            return this.Update(Original_BSTreeId, wtime, chno, AssetId, MusicId, Original_BSTreeId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DeviceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public DeviceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Device";
            tableMapping.ColumnMappings.Add("DeviceId", "DeviceId");
            tableMapping.ColumnMappings.Add("device", "device");
            tableMapping.ColumnMappings.Add("ip", "ip");
            tableMapping.ColumnMappings.Add("ip_dspctrl", "ip_dspctrl");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName");
            tableMapping.ColumnMappings.Add("DanteModelName", "DanteModelName");
            tableMapping.ColumnMappings.Add("dsp_off_ch1", "dsp_off_ch1");
            tableMapping.ColumnMappings.Add("dsp_off_ch2", "dsp_off_ch2");
            tableMapping.ColumnMappings.Add("dsp_name", "dsp_name");
            tableMapping.ColumnMappings.Add("dsp_chno", "dsp_chno");
            tableMapping.ColumnMappings.Add("dsp_vol", "dsp_vol");
            tableMapping.ColumnMappings.Add("dsp_vol_em", "dsp_vol_em");
            tableMapping.ColumnMappings.Add("path", "path");
            tableMapping.ColumnMappings.Add("floor_em", "floor_em");
            tableMapping.ColumnMappings.Add("emData", "emData");
            tableMapping.ColumnMappings.Add("chspk", "chspk1");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Device\" WHERE ((\"DeviceId\" = :Original_DeviceId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "DeviceId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""Device"" (""DeviceId"", ""device"", ""ip"", ""ip_dspctrl"", ""name"", ""DeviceName"", ""DanteModelName"", ""dsp_off_ch1"", ""dsp_off_ch2"", ""chspk"", ""dsp_name"", ""dsp_chno"", ""dsp_vol"", ""dsp_vol_em"", ""path"", ""floor_em"", ""emData"") VALUES (:DeviceId, :device, :ip, :ip_dspctrl, :name, :DeviceName, :DanteModelName, :dsp_off_ch1, :dsp_off_ch2, :chspk, :dsp_name, :dsp_chno, :dsp_vol, :dsp_vol_em, :path, :floor_em, :emData)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "DeviceId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "device";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "device";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip_dspctrl";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip_dspctrl";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DanteModelName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DanteModelName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_off_ch1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "dsp_off_ch1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_off_ch2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "dsp_off_ch2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chspk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chspk";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "dsp_name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_chno";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floor_em";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "emData";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "emData";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Device"" SET ""DeviceId"" = :DeviceId, ""device"" = :device, ""ip"" = :ip, ""ip_dspctrl"" = :ip_dspctrl, ""name"" = :name, ""DeviceName"" = :DeviceName, ""DanteModelName"" = :DanteModelName, ""dsp_off_ch1"" = :dsp_off_ch1, ""dsp_off_ch2"" = :dsp_off_ch2, ""chspk"" = :chspk, ""dsp_name"" = :dsp_name, ""dsp_chno"" = :dsp_chno, ""dsp_vol"" = :dsp_vol, ""dsp_vol_em"" = :dsp_vol_em, ""path"" = :path, ""floor_em"" = :floor_em, ""emData"" = :emData WHERE ((""DeviceId"" = :Original_DeviceId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "DeviceId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "device";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "device";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "ip_dspctrl";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "ip_dspctrl";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DeviceName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DeviceName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "DanteModelName";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "DanteModelName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_off_ch1";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "dsp_off_ch1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_off_ch2";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "dsp_off_ch2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "chspk";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "chspk";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "dsp_name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_chno";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_chno";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "dsp_vol_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "dsp_vol_em";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "path";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "path";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor_em";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floor_em";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "emData";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "emData";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_DeviceId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "DeviceId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[2];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  DeviceId, device, ip, ip_dspctrl, name, DeviceName, DanteModelName, dsp_o" +
                "ff_ch1, dsp_off_ch2, chspk, dsp_name, dsp_chno, dsp_vol, dsp_vol_em, path, floor" +
                "_em, emData\r\nFROM     Device";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT  DeviceId, device, ip, ip_dspctrl, name, DeviceName, DanteModelName, dsp_o" +
                "ff_ch1, dsp_off_ch2, chspk, dsp_name, dsp_chno, dsp_vol, dsp_vol_em, path, floor" +
                "_em, emData\r\nFROM     Device";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.DeviceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.DeviceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.DeviceDataTable dataTable = new DataSet1.DeviceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(DataSet1.DeviceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual DataSet1.DeviceDataTable GetDataBy() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            DataSet1.DeviceDataTable dataTable = new DataSet1.DeviceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.DeviceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Device");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_DeviceId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_DeviceId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long DeviceId, 
                    global::System.Nullable<long> device, 
                    string ip, 
                    string ip_dspctrl, 
                    string name, 
                    string DeviceName, 
                    string DanteModelName, 
                    string dsp_off_ch1, 
                    string dsp_off_ch2, 
                    global::System.Nullable<long> chspk, 
                    string dsp_name, 
                    global::System.Nullable<long> dsp_chno, 
                    global::System.Nullable<long> dsp_vol, 
                    global::System.Nullable<long> dsp_vol_em, 
                    string path, 
                    global::System.Nullable<long> floor_em, 
                    string emData) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(DeviceId));
            if ((device.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(device.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ip == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ip));
            }
            if ((ip_dspctrl == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ip_dspctrl));
            }
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(name));
            }
            if ((DeviceName == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DeviceName));
            }
            if ((DanteModelName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DanteModelName));
            }
            if ((dsp_off_ch1 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(dsp_off_ch1));
            }
            if ((dsp_off_ch2 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(dsp_off_ch2));
            }
            if ((chspk.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(chspk.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((dsp_name == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(dsp_name));
            }
            if ((dsp_chno.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((long)(dsp_chno.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dsp_vol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(dsp_vol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((dsp_vol_em.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((long)(dsp_vol_em.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(path));
            }
            if ((floor_em.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((long)(floor_em.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((emData == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(emData));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long DeviceId, 
                    global::System.Nullable<long> device, 
                    string ip, 
                    string ip_dspctrl, 
                    string name, 
                    string DeviceName, 
                    string DanteModelName, 
                    string dsp_off_ch1, 
                    string dsp_off_ch2, 
                    global::System.Nullable<long> chspk, 
                    string dsp_name, 
                    global::System.Nullable<long> dsp_chno, 
                    global::System.Nullable<long> dsp_vol, 
                    global::System.Nullable<long> dsp_vol_em, 
                    string path, 
                    global::System.Nullable<long> floor_em, 
                    string emData, 
                    long Original_DeviceId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(DeviceId));
            if ((device.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(device.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ip == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ip));
            }
            if ((ip_dspctrl == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ip_dspctrl));
            }
            if ((name == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(name));
            }
            if ((DeviceName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(DeviceName));
            }
            if ((DanteModelName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DanteModelName));
            }
            if ((dsp_off_ch1 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(dsp_off_ch1));
            }
            if ((dsp_off_ch2 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(dsp_off_ch2));
            }
            if ((chspk.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(chspk.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((dsp_name == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(dsp_name));
            }
            if ((dsp_chno.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(dsp_chno.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((dsp_vol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(dsp_vol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((dsp_vol_em.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(dsp_vol_em.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((path == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(path));
            }
            if ((floor_em.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(floor_em.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((emData == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(emData));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_DeviceId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> device, 
                    string ip, 
                    string ip_dspctrl, 
                    string name, 
                    string DeviceName, 
                    string DanteModelName, 
                    string dsp_off_ch1, 
                    string dsp_off_ch2, 
                    global::System.Nullable<long> chspk, 
                    string dsp_name, 
                    global::System.Nullable<long> dsp_chno, 
                    global::System.Nullable<long> dsp_vol, 
                    global::System.Nullable<long> dsp_vol_em, 
                    string path, 
                    global::System.Nullable<long> floor_em, 
                    string emData, 
                    long Original_DeviceId) {
            return this.Update(Original_DeviceId, device, ip, ip_dspctrl, name, DeviceName, DanteModelName, dsp_off_ch1, dsp_off_ch2, chspk, dsp_name, dsp_chno, dsp_vol, dsp_vol_em, path, floor_em, emData, Original_DeviceId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FloorbasesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public FloorbasesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Floorbases";
            tableMapping.ColumnMappings.Add("FloorBaseId", "FloorBaseId");
            tableMapping.ColumnMappings.Add("buildingname", "buildingname");
            tableMapping.ColumnMappings.Add("floororder", "floororder");
            tableMapping.ColumnMappings.Add("floor", "floor");
            tableMapping.ColumnMappings.Add("filename", "filename");
            tableMapping.ColumnMappings.Add("left", "left");
            tableMapping.ColumnMappings.Add("top", "top");
            tableMapping.ColumnMappings.Add("content", "content");
            tableMapping.ColumnMappings.Add("assetname", "assetname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Floorbases\" WHERE ((\"FloorBaseId\" = :Original_FloorBaseId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Floorbases\" (\"FloorBaseId\", \"buildingname\", \"floororder\", \"fl" +
                "oor\", \"filename\", \"left\", \"top\", \"content\", \"assetname\") VALUES (:FloorBaseId, :" +
                "buildingname, :floororder, :floor, :filename, :left, :top, :content, :assetname)" +
                "";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Floorbases"" SET ""FloorBaseId"" = :FloorBaseId, ""buildingname"" = :buildingname, ""floororder"" = :floororder, ""floor"" = :floor, ""filename"" = :filename, ""left"" = :left, ""top"" = :top, ""content"" = :content, ""assetname"" = :assetname WHERE ((""FloorBaseId"" = :Original_FloorBaseId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorBaseId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorBaseId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FloorBaseId, buildingname, floororder, floor, filename, \"left\", \"top\", con" +
                "tent, assetname FROM \"main\".Floorbases";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.FloorbasesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.FloorbasesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.FloorbasesDataTable dataTable = new DataSet1.FloorbasesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.FloorbasesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Floorbases");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_FloorBaseId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_FloorBaseId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long FloorBaseId, string buildingname, global::System.Nullable<long> floororder, string floor, string filename, global::System.Nullable<long> left, global::System.Nullable<long> top, string content, string assetname) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(FloorBaseId));
            if ((buildingname == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(buildingname));
            }
            if ((floororder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(floororder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((floor == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(filename));
            }
            if ((left.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(left.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((top.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(top.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((content == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long FloorBaseId, string buildingname, global::System.Nullable<long> floororder, string floor, string filename, global::System.Nullable<long> left, global::System.Nullable<long> top, string content, string assetname, long Original_FloorBaseId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(FloorBaseId));
            if ((buildingname == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(buildingname));
            }
            if ((floororder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(floororder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((floor == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(filename));
            }
            if ((left.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(left.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((top.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(top.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((content == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(assetname));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_FloorBaseId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string buildingname, global::System.Nullable<long> floororder, string floor, string filename, global::System.Nullable<long> left, global::System.Nullable<long> top, string content, string assetname, long Original_FloorBaseId) {
            return this.Update(Original_FloorBaseId, buildingname, floororder, floor, filename, left, top, content, assetname, Original_FloorBaseId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FloormapsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public FloormapsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Floormaps";
            tableMapping.ColumnMappings.Add("FloorMapId", "FloorMapId");
            tableMapping.ColumnMappings.Add("buildingname", "buildingname");
            tableMapping.ColumnMappings.Add("floororder", "floororder");
            tableMapping.ColumnMappings.Add("floor", "floor");
            tableMapping.ColumnMappings.Add("filename", "filename");
            tableMapping.ColumnMappings.Add("left", "left");
            tableMapping.ColumnMappings.Add("top", "top");
            tableMapping.ColumnMappings.Add("content", "content");
            tableMapping.ColumnMappings.Add("assetname", "assetname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Floormaps\" WHERE ((\"FloorMapId\" = :Original_FloorMapId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Floormaps\" (\"FloorMapId\", \"buildingname\", \"floororder\", \"floo" +
                "r\", \"filename\", \"left\", \"top\", \"content\", \"assetname\") VALUES (:FloorMapId, :bui" +
                "ldingname, :floororder, :floor, :filename, :left, :top, :content, :assetname)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Floormaps"" SET ""FloorMapId"" = :FloorMapId, ""buildingname"" = :buildingname, ""floororder"" = :floororder, ""floor"" = :floor, ""filename"" = :filename, ""left"" = :left, ""top"" = :top, ""content"" = :content, ""assetname"" = :assetname WHERE ((""FloorMapId"" = :Original_FloorMapId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "buildingname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "buildingname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floororder";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "floororder";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "floor";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "floor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "filename";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "filename";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "left";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "left";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "top";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "top";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "content";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "content";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "assetname";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "assetname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_FloorMapId";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "FloorMapId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FloorMapId, buildingname, floororder, floor, filename, \"left\", \"top\", cont" +
                "ent, assetname FROM \"main\".Floormaps";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.FloormapsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.FloormapsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.FloormapsDataTable dataTable = new DataSet1.FloormapsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.FloormapsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Floormaps");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_FloorMapId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_FloorMapId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long FloorMapId, string buildingname, global::System.Nullable<long> floororder, string floor, string filename, global::System.Nullable<long> left, global::System.Nullable<long> top, string content, string assetname) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(FloorMapId));
            if ((buildingname == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(buildingname));
            }
            if ((floororder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(floororder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((floor == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(filename));
            }
            if ((left.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(left.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((top.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(top.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((content == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(assetname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long FloorMapId, string buildingname, global::System.Nullable<long> floororder, string floor, string filename, global::System.Nullable<long> left, global::System.Nullable<long> top, string content, string assetname, long Original_FloorMapId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(FloorMapId));
            if ((buildingname == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(buildingname));
            }
            if ((floororder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(floororder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((floor == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(floor));
            }
            if ((filename == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(filename));
            }
            if ((left.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(left.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((top.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(top.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((content == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(content));
            }
            if ((assetname == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(assetname));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_FloorMapId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string buildingname, global::System.Nullable<long> floororder, string floor, string filename, global::System.Nullable<long> left, global::System.Nullable<long> top, string content, string assetname, long Original_FloorMapId) {
            return this.Update(Original_FloorMapId, buildingname, floororder, floor, filename, left, top, content, assetname, Original_FloorMapId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BSroomTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public BSroomTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BSroom";
            tableMapping.ColumnMappings.Add("BSroomid", "BSroomid");
            tableMapping.ColumnMappings.Add("user_name", "user_name");
            tableMapping.ColumnMappings.Add("state", "state");
            tableMapping.ColumnMappings.Add("mode", "mode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"BSroom\" WHERE ((\"BSroomid\" = :Original_BSroomid))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_BSroomid";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSroomid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"BSroom\" (\"BSroomid\", \"user_name\", \"state\", \"mode\") VALUES (:B" +
                "Sroomid, :user_name, :state, :mode)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "BSroomid";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSroomid";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "mode";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "mode";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"BSroom\" SET \"BSroomid\" = :BSroomid, \"user_name\" = :user_name, \"sta" +
                "te\" = :state, \"mode\" = :mode WHERE ((\"BSroomid\" = :Original_BSroomid))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "BSroomid";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSroomid";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "user_name";
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Text;
            param.IsNullable = true;
            param.SourceColumn = "user_name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "state";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "state";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "mode";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "mode";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Original_BSroomid";
            param.DbType = global::System.Data.DbType.Int64;
            param.SQLiteType = global::Devart.Data.SQLite.SQLiteType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "BSroomid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  BSroom.*\r\nFROM     BSroom";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.BSroomDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.BSroomDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.BSroomDataTable dataTable = new DataSet1.BSroomDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.BSroomDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "BSroom");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_BSroomid) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_BSroomid));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long BSroomid, string user_name, global::System.Nullable<long> state, global::System.Nullable<long> mode) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(BSroomid));
            if ((user_name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(user_name));
            }
            if ((state.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(state.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((mode.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(mode.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long BSroomid, string user_name, global::System.Nullable<long> state, global::System.Nullable<long> mode, long Original_BSroomid) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(BSroomid));
            if ((user_name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(user_name));
            }
            if ((state.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(state.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((mode.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(mode.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(Original_BSroomid));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string user_name, global::System.Nullable<long> state, global::System.Nullable<long> mode, long Original_BSroomid) {
            return this.Update(Original_BSroomid, user_name, state, mode, Original_BSroomid);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private AssetGroupsTableAdapter _assetGroupsTableAdapter;
        
        private AssetsTableAdapter _assetsTableAdapter;
        
        private EventvmTableAdapter _eventvmTableAdapter;
        
        private HolidaysTableAdapter _holidaysTableAdapter;
        
        private InfoTreesTableAdapter _infoTreesTableAdapter;
        
        private MusicsTableAdapter _musicsTableAdapter;
        
        private SimpleMultisTableAdapter _simpleMultisTableAdapter;
        
        private SimplepaTableAdapter _simplepaTableAdapter;
        
        private UserTreesTableAdapter _userTreesTableAdapter;
        
        private BSTreeTableAdapter _bSTreeTableAdapter;
        
        private DeviceTableAdapter _deviceTableAdapter;
        
        private FloorbasesTableAdapter _floorbasesTableAdapter;
        
        private FloormapsTableAdapter _floormapsTableAdapter;
        
        private BSroomTableAdapter _bSroomTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AssetGroupsTableAdapter AssetGroupsTableAdapter {
            get {
                return this._assetGroupsTableAdapter;
            }
            set {
                this._assetGroupsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AssetsTableAdapter AssetsTableAdapter {
            get {
                return this._assetsTableAdapter;
            }
            set {
                this._assetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public EventvmTableAdapter EventvmTableAdapter {
            get {
                return this._eventvmTableAdapter;
            }
            set {
                this._eventvmTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public HolidaysTableAdapter HolidaysTableAdapter {
            get {
                return this._holidaysTableAdapter;
            }
            set {
                this._holidaysTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public InfoTreesTableAdapter InfoTreesTableAdapter {
            get {
                return this._infoTreesTableAdapter;
            }
            set {
                this._infoTreesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public MusicsTableAdapter MusicsTableAdapter {
            get {
                return this._musicsTableAdapter;
            }
            set {
                this._musicsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SimpleMultisTableAdapter SimpleMultisTableAdapter {
            get {
                return this._simpleMultisTableAdapter;
            }
            set {
                this._simpleMultisTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SimplepaTableAdapter SimplepaTableAdapter {
            get {
                return this._simplepaTableAdapter;
            }
            set {
                this._simplepaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public UserTreesTableAdapter UserTreesTableAdapter {
            get {
                return this._userTreesTableAdapter;
            }
            set {
                this._userTreesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public BSTreeTableAdapter BSTreeTableAdapter {
            get {
                return this._bSTreeTableAdapter;
            }
            set {
                this._bSTreeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public DeviceTableAdapter DeviceTableAdapter {
            get {
                return this._deviceTableAdapter;
            }
            set {
                this._deviceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FloorbasesTableAdapter FloorbasesTableAdapter {
            get {
                return this._floorbasesTableAdapter;
            }
            set {
                this._floorbasesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FloormapsTableAdapter FloormapsTableAdapter {
            get {
                return this._floormapsTableAdapter;
            }
            set {
                this._floormapsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public BSroomTableAdapter BSroomTableAdapter {
            get {
                return this._bSroomTableAdapter;
            }
            set {
                this._bSroomTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._assetGroupsTableAdapter != null) 
                            && (this._assetGroupsTableAdapter.Connection != null))) {
                    return this._assetGroupsTableAdapter.Connection;
                }
                if (((this._assetsTableAdapter != null) 
                            && (this._assetsTableAdapter.Connection != null))) {
                    return this._assetsTableAdapter.Connection;
                }
                if (((this._eventvmTableAdapter != null) 
                            && (this._eventvmTableAdapter.Connection != null))) {
                    return this._eventvmTableAdapter.Connection;
                }
                if (((this._holidaysTableAdapter != null) 
                            && (this._holidaysTableAdapter.Connection != null))) {
                    return this._holidaysTableAdapter.Connection;
                }
                if (((this._infoTreesTableAdapter != null) 
                            && (this._infoTreesTableAdapter.Connection != null))) {
                    return this._infoTreesTableAdapter.Connection;
                }
                if (((this._musicsTableAdapter != null) 
                            && (this._musicsTableAdapter.Connection != null))) {
                    return this._musicsTableAdapter.Connection;
                }
                if (((this._simpleMultisTableAdapter != null) 
                            && (this._simpleMultisTableAdapter.Connection != null))) {
                    return this._simpleMultisTableAdapter.Connection;
                }
                if (((this._simplepaTableAdapter != null) 
                            && (this._simplepaTableAdapter.Connection != null))) {
                    return this._simplepaTableAdapter.Connection;
                }
                if (((this._userTreesTableAdapter != null) 
                            && (this._userTreesTableAdapter.Connection != null))) {
                    return this._userTreesTableAdapter.Connection;
                }
                if (((this._bSTreeTableAdapter != null) 
                            && (this._bSTreeTableAdapter.Connection != null))) {
                    return this._bSTreeTableAdapter.Connection;
                }
                if (((this._deviceTableAdapter != null) 
                            && (this._deviceTableAdapter.Connection != null))) {
                    return this._deviceTableAdapter.Connection;
                }
                if (((this._floorbasesTableAdapter != null) 
                            && (this._floorbasesTableAdapter.Connection != null))) {
                    return this._floorbasesTableAdapter.Connection;
                }
                if (((this._floormapsTableAdapter != null) 
                            && (this._floormapsTableAdapter.Connection != null))) {
                    return this._floormapsTableAdapter.Connection;
                }
                if (((this._bSroomTableAdapter != null) 
                            && (this._bSroomTableAdapter.Connection != null))) {
                    return this._bSroomTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._assetGroupsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._assetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._eventvmTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._holidaysTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._infoTreesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._musicsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._simpleMultisTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._simplepaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._userTreesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._bSTreeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._deviceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._floorbasesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._floormapsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._bSroomTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._assetGroupsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AssetGroups.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._assetGroupsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._assetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Assets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._assetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._eventvmTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Eventvm.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eventvmTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._holidaysTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Holidays.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._holidaysTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._infoTreesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.InfoTrees.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._infoTreesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._musicsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Musics.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._musicsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._simpleMultisTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SimpleMultis.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._simpleMultisTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._simplepaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Simplepa.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._simplepaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._userTreesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.UserTrees.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._userTreesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._bSTreeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.BSTree.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._bSTreeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._deviceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Device.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._deviceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._floorbasesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Floorbases.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._floorbasesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._floormapsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Floormaps.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._floormapsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._bSroomTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.BSroom.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._bSroomTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._assetGroupsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AssetGroups.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._assetGroupsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._assetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Assets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._assetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._eventvmTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Eventvm.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eventvmTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._holidaysTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Holidays.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._holidaysTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._infoTreesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.InfoTrees.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._infoTreesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._musicsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Musics.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._musicsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._simpleMultisTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SimpleMultis.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._simpleMultisTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._simplepaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Simplepa.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._simplepaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._userTreesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.UserTrees.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._userTreesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._bSTreeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.BSTree.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._bSTreeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._deviceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Device.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._deviceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._floorbasesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Floorbases.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._floorbasesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._floormapsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Floormaps.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._floormapsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._bSroomTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.BSroom.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._bSroomTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._bSroomTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.BSroom.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._bSroomTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._floormapsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Floormaps.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._floormapsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._floorbasesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Floorbases.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._floorbasesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._deviceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Device.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._deviceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._bSTreeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.BSTree.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._bSTreeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._userTreesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.UserTrees.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._userTreesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._simplepaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Simplepa.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._simplepaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._simpleMultisTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SimpleMultis.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._simpleMultisTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._musicsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Musics.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._musicsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._infoTreesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.InfoTrees.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._infoTreesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._holidaysTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Holidays.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._holidaysTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._eventvmTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Eventvm.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eventvmTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._assetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Assets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._assetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._assetGroupsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AssetGroups.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._assetGroupsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(DataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._assetGroupsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._assetGroupsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._assetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._assetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._eventvmTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eventvmTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._holidaysTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._holidaysTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._infoTreesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._infoTreesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._musicsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._musicsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._simpleMultisTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._simpleMultisTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._simplepaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._simplepaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._userTreesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._userTreesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._bSTreeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._bSTreeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._deviceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._deviceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._floorbasesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._floorbasesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._floormapsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._floormapsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            if (((this._bSroomTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._bSroomTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager에서 관리하는 모든 TableAdapter에는 동일한 연결 문자열을 사용해야 합니다.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager에 연결 정보가 없습니다. 각 TableAdapterManager TableAdapter 속성을 올바른 Tabl" +
                        "eAdapter 인스턴스로 설정하십시오.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("트랜잭션을 시작할 수 없습니다. 현재 데이터 연결에서 트랜잭션이 지원되지 않거나 현재 상태에서 트랜잭션을 시작할 수 없습니다.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._assetGroupsTableAdapter != null)) {
                    revertConnections.Add(this._assetGroupsTableAdapter, this._assetGroupsTableAdapter.Connection);
                    this._assetGroupsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._assetGroupsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._assetGroupsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._assetGroupsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._assetGroupsTableAdapter.Adapter);
                    }
                }
                if ((this._assetsTableAdapter != null)) {
                    revertConnections.Add(this._assetsTableAdapter, this._assetsTableAdapter.Connection);
                    this._assetsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._assetsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._assetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._assetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._assetsTableAdapter.Adapter);
                    }
                }
                if ((this._eventvmTableAdapter != null)) {
                    revertConnections.Add(this._eventvmTableAdapter, this._eventvmTableAdapter.Connection);
                    this._eventvmTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._eventvmTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._eventvmTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eventvmTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eventvmTableAdapter.Adapter);
                    }
                }
                if ((this._holidaysTableAdapter != null)) {
                    revertConnections.Add(this._holidaysTableAdapter, this._holidaysTableAdapter.Connection);
                    this._holidaysTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._holidaysTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._holidaysTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._holidaysTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._holidaysTableAdapter.Adapter);
                    }
                }
                if ((this._infoTreesTableAdapter != null)) {
                    revertConnections.Add(this._infoTreesTableAdapter, this._infoTreesTableAdapter.Connection);
                    this._infoTreesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._infoTreesTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._infoTreesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._infoTreesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._infoTreesTableAdapter.Adapter);
                    }
                }
                if ((this._musicsTableAdapter != null)) {
                    revertConnections.Add(this._musicsTableAdapter, this._musicsTableAdapter.Connection);
                    this._musicsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._musicsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._musicsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._musicsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._musicsTableAdapter.Adapter);
                    }
                }
                if ((this._simpleMultisTableAdapter != null)) {
                    revertConnections.Add(this._simpleMultisTableAdapter, this._simpleMultisTableAdapter.Connection);
                    this._simpleMultisTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._simpleMultisTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._simpleMultisTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._simpleMultisTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._simpleMultisTableAdapter.Adapter);
                    }
                }
                if ((this._simplepaTableAdapter != null)) {
                    revertConnections.Add(this._simplepaTableAdapter, this._simplepaTableAdapter.Connection);
                    this._simplepaTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._simplepaTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._simplepaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._simplepaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._simplepaTableAdapter.Adapter);
                    }
                }
                if ((this._userTreesTableAdapter != null)) {
                    revertConnections.Add(this._userTreesTableAdapter, this._userTreesTableAdapter.Connection);
                    this._userTreesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._userTreesTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._userTreesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._userTreesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._userTreesTableAdapter.Adapter);
                    }
                }
                if ((this._bSTreeTableAdapter != null)) {
                    revertConnections.Add(this._bSTreeTableAdapter, this._bSTreeTableAdapter.Connection);
                    this._bSTreeTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._bSTreeTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._bSTreeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._bSTreeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._bSTreeTableAdapter.Adapter);
                    }
                }
                if ((this._deviceTableAdapter != null)) {
                    revertConnections.Add(this._deviceTableAdapter, this._deviceTableAdapter.Connection);
                    this._deviceTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._deviceTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._deviceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._deviceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._deviceTableAdapter.Adapter);
                    }
                }
                if ((this._floorbasesTableAdapter != null)) {
                    revertConnections.Add(this._floorbasesTableAdapter, this._floorbasesTableAdapter.Connection);
                    this._floorbasesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._floorbasesTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._floorbasesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._floorbasesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._floorbasesTableAdapter.Adapter);
                    }
                }
                if ((this._floormapsTableAdapter != null)) {
                    revertConnections.Add(this._floormapsTableAdapter, this._floormapsTableAdapter.Connection);
                    this._floormapsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._floormapsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._floormapsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._floormapsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._floormapsTableAdapter.Adapter);
                    }
                }
                if ((this._bSroomTableAdapter != null)) {
                    revertConnections.Add(this._bSroomTableAdapter, this._bSroomTableAdapter.Connection);
                    this._bSroomTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._bSroomTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._bSroomTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._bSroomTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._bSroomTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._assetGroupsTableAdapter != null)) {
                    this._assetGroupsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._assetGroupsTableAdapter]));
                    this._assetGroupsTableAdapter.Transaction = null;
                }
                if ((this._assetsTableAdapter != null)) {
                    this._assetsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._assetsTableAdapter]));
                    this._assetsTableAdapter.Transaction = null;
                }
                if ((this._eventvmTableAdapter != null)) {
                    this._eventvmTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._eventvmTableAdapter]));
                    this._eventvmTableAdapter.Transaction = null;
                }
                if ((this._holidaysTableAdapter != null)) {
                    this._holidaysTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._holidaysTableAdapter]));
                    this._holidaysTableAdapter.Transaction = null;
                }
                if ((this._infoTreesTableAdapter != null)) {
                    this._infoTreesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._infoTreesTableAdapter]));
                    this._infoTreesTableAdapter.Transaction = null;
                }
                if ((this._musicsTableAdapter != null)) {
                    this._musicsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._musicsTableAdapter]));
                    this._musicsTableAdapter.Transaction = null;
                }
                if ((this._simpleMultisTableAdapter != null)) {
                    this._simpleMultisTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._simpleMultisTableAdapter]));
                    this._simpleMultisTableAdapter.Transaction = null;
                }
                if ((this._simplepaTableAdapter != null)) {
                    this._simplepaTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._simplepaTableAdapter]));
                    this._simplepaTableAdapter.Transaction = null;
                }
                if ((this._userTreesTableAdapter != null)) {
                    this._userTreesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._userTreesTableAdapter]));
                    this._userTreesTableAdapter.Transaction = null;
                }
                if ((this._bSTreeTableAdapter != null)) {
                    this._bSTreeTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._bSTreeTableAdapter]));
                    this._bSTreeTableAdapter.Transaction = null;
                }
                if ((this._deviceTableAdapter != null)) {
                    this._deviceTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._deviceTableAdapter]));
                    this._deviceTableAdapter.Transaction = null;
                }
                if ((this._floorbasesTableAdapter != null)) {
                    this._floorbasesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._floorbasesTableAdapter]));
                    this._floorbasesTableAdapter.Transaction = null;
                }
                if ((this._floormapsTableAdapter != null)) {
                    this._floormapsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._floormapsTableAdapter]));
                    this._floormapsTableAdapter.Transaction = null;
                }
                if ((this._bSroomTableAdapter != null)) {
                    this._bSroomTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._bSroomTableAdapter]));
                    this._bSroomTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591